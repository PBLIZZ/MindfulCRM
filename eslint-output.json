[{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/api/photoEnrichmentApi.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/BatchEnrichmentControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ConsentVerification.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":20,"suggestions":[{"fix":{"range":[852,901],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { updateUserConsent } from '../api/photoEnrichmentApi';\n\ninterface UserProfile {\n  id: string;\n  name: string;\n  email: string;\n  allowProfilePictureScraping: boolean;\n  gdprConsentDate?: string;\n  gdprConsentVersion: string;\n}\n\ninterface ConsentVerificationProps {\n  profile: UserProfile;\n}\n\nconst ConsentVerification: React.FC<ConsentVerificationProps> = ({ profile }) => {\n  if (!profile) {\n    return (\n      <div className=\"p-3 border rounded bg-gray-50\">\n        <p className=\"text-sm text-gray-600\">Loading consent status...</p>\n      </div>\n    );\n  }\n\n  const hasConsent = profile.allowProfilePictureScraping || false;\n\n  const handleGrantConsent = async (): Promise<void> => {\n    try {\n      await updateUserConsent(true);\n      window.location.reload(); // Refresh to update UI\n    } catch (error) {\n      console.error('Failed to grant consent:', error);\n      alert('Failed to grant consent. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"p-3 border rounded\">\n      <div className={`flex items-center gap-3 ${hasConsent ? 'text-green-700' : 'text-amber-700'}`}>\n        <div className=\"text-2xl\">\n          {hasConsent ? '✅' : '⚠️'}\n        </div>\n        <div className=\"flex-1\">\n          <h3 className=\"font-semibold\">GDPR Consent Status</h3>\n          <p className=\"text-sm\">\n            {hasConsent \n              ? 'You have consented to contact profile picture enrichment'\n              : 'Consent required for contact profile picture enrichment'\n            }\n          </p>\n          {!hasConsent && (\n            <button \n              onClick={handleGrantConsent}\n              className=\"mt-2 px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600\"\n            >\n              Grant Consent\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConsentVerification;\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/Contact/AIPhotoReview.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":33,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[941,954],"text":""},"desc":"Remove unused variable 'open'."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":36,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":36,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":51,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":51,"endColumn":43},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":66,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":66,"endColumn":51},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":72,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":72,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":82,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":82,"endColumn":30},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":105,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":105,"endColumn":71,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2858,2858],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2858,2858],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":118,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":118,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'error' is not defined.","line":118,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":118,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `error` typed value.","line":118,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":118,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":124,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":124,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":154,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":154,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":154,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":154,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'open' is not defined.","line":166,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":166,"endColumn":13},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":167,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":167,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4521,4521],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4521,4521],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'searchForPhotos' and 'suggestions.length'. Either include them or remove the dependency array.","line":169,"column":6,"nodeType":"ArrayExpression","endLine":169,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [contact, searchForPhotos, suggestions.length]","fix":{"range":[4550,4560],"text":"[contact, searchForPhotos, suggestions.length]"}}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":171,"column":58,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":171,"endColumn":60},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":176,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":176,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":181,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":181,"endColumn":49},{"ruleId":"no-undef","severity":2,"message":"'open' is not defined.","line":193,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":193,"endColumn":23}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react'\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { Button } from '@/components/ui/button'\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogFooter, \n  DialogHeader, \n  DialogTitle \n} from '@/components/ui/dialog'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport { ScrollArea } from '@/components/ui/scroll-area'\nimport { \n  Loader2, \n  CheckCircle, \n  X, \n  ExternalLink, \n  Sparkles,\n  User,\n  Mail,\n  Building\n} from 'lucide-react'\nimport { useToast } from '@/hooks/use-toast'\nimport { aiPhotoFinder, type ContactInfo, type PhotoSuggestion } from '@/services/aiPhotoFinder'\nimport type { Contact } from './ContactsTable'\n\ninterface AIPhotoReviewProps {\n  contact: Contact | null\n  open: boolean\n  onOpenChange: (open: boolean) => void\n}\n\nconst getSourceIcon = (source: string) => {\n  switch (source) {\n    case 'gravatar':\n      return <Mail className=\"h-4 w-4\" />\n    case 'clearbit':\n      return <Building className=\"h-4 w-4\" />\n    case 'linkedin':\n      return <User className=\"h-4 w-4\" />\n    case 'ai_generated':\n      return <Sparkles className=\"h-4 w-4\" />\n    default:\n      return <User className=\"h-4 w-4\" />\n  }\n}\n\nconst getSourceLabel = (source: string) => {\n  switch (source) {\n    case 'gravatar':\n      return 'Gravatar'\n    case 'clearbit':\n      return 'Clearbit'\n    case 'linkedin':\n      return 'LinkedIn'\n    case 'ai_generated':\n      return 'AI Generated'\n    default:\n      return source\n  }\n}\n\nconst getConfidenceColor = (confidence: number) => {\n  if (confidence >= 0.8) return 'bg-green-100 text-green-800'\n  if (confidence >= 0.6) return 'bg-yellow-100 text-yellow-800'\n  return 'bg-red-100 text-red-800'\n}\n\nconst getInitials = (name: string) => {\n  return (\n    name\n      ?.split(' ')\n      .map((n) => n[0])\n      .join('')\n      .toUpperCase() || '?'\n  )\n}\n\nexport function AIPhotoReview({\n  contact,\n  \n  onOpenChange\n}: AIPhotoReviewProps) {\n  const [isSearching, setIsSearching] = useState(false)\n  const [suggestions, setSuggestions] = useState<PhotoSuggestion[]>([])\n  const [selectedSuggestion, setSelectedSuggestion] = useState<PhotoSuggestion | null>(null)\n  const queryClient = useQueryClient()\n  const { toast } = useToast()\n\n  const downloadMutation = useMutation({\n    mutationFn: async (suggestion: PhotoSuggestion) => {\n      if (!contact) throw new Error('No contact selected')\n      return aiPhotoFinder.downloadAndProcessPhoto(suggestion, contact.id)\n    },\n    onSuccess: (data) => {\n      if (data.success) {\n        toast({\n          title: 'Photo updated successfully',\n          description: 'Contact photo has been updated with AI suggestion.'\n        })\n        \n        queryClient.invalidateQueries({ queryKey: ['/api/contacts'] })\n        onOpenChange(false)\n      } else {\n        toast({\n          title: 'Download failed',\n          description: data.error,\n          variant: 'destructive'\n        })\n      }\n    },\n    onError: () => {\n      toast({\n        title: 'Download failed',\n        description: error.message,\n        variant: 'destructive'\n      })\n    }\n  })\n\n  const searchForPhotos = async () => {\n    if (!contact) return\n    \n    setIsSearching(true)\n    try {\n      const contactInfo: ContactInfo = {\n        name: contact.name,\n        email: contact.email,\n        company: contact.extractedFields?.company as string | undefined,\n        linkedinUrl: contact.extractedFields?.linkedinUrl as string | undefined,\n        jobTitle: contact.extractedFields?.jobTitle as string | undefined\n      }\n\n      const result = await aiPhotoFinder.findPhotoSuggestions(contactInfo)\n      \n      if (result.success) {\n        setSuggestions(result.suggestions)\n        if (result.suggestions.length === 0) {\n          toast({\n            title: 'No photos found',\n            description: 'Could not find any photo suggestions for this contact.',\n          })\n        }\n      } else {\n        toast({\n          title: 'Search failed',\n          description: result.error,\n          variant: 'destructive'\n        })\n      }\n    } catch (error) {\n      toast({\n        title: 'Search failed',\n        description: 'Failed to search for photos.',\n        variant: 'destructive'\n      })\n    } finally {\n      setIsSearching(false)\n    }\n  }\n\n  useEffect(() => {\n    if (open && suggestions.length === 0 && contact) {\n      searchForPhotos()\n    }\n  }, [ contact])\n\n  const handleApplyPhoto = (suggestion: PhotoSuggestion) => {\n    setSelectedSuggestion(suggestion)\n    downloadMutation.mutate(suggestion)\n  }\n\n  const resetDialog = () => {\n    setSuggestions([])\n    setSelectedSuggestion(null)\n  }\n\n  const handleOpenChange = (newOpen: boolean) => {\n    if (!newOpen) {\n      resetDialog()\n    }\n    onOpenChange(newOpen)\n  }\n\n  if (!contact) {\n    return null\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={handleOpenChange}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[80vh]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Sparkles className=\"h-5 w-5\" />\n            AI Photo Suggestions\n          </DialogTitle>\n          <DialogDescription>\n            Found {suggestions.length} photo suggestions for {contact?.name || 'this contact'}. \n            Select a photo to apply to the contact.\n          </DialogDescription>\n        </DialogHeader>\n\n        <ScrollArea className=\"max-h-[400px] pr-4\">\n          {isSearching ? (\n            <div className=\"flex flex-col items-center justify-center py-8 space-y-4\">\n              <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n              <div className=\"text-center\">\n                <p className=\"text-sm font-medium\">Searching for photos...</p>\n                <p className=\"text-xs text-muted-foreground\">\n                  Checking Gravatar, Clearbit, and other sources\n                </p>\n              </div>\n            </div>\n          ) : suggestions.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <div className=\"mx-auto w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n                <User className=\"h-8 w-8 text-muted-foreground\" />\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                No photo suggestions found for this contact.\n              </p>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                className=\"mt-4\"\n                onClick={searchForPhotos}\n              >\n                Search Again\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {/* Current Photo */}\n              <div className=\"mb-6\">\n                <h4 className=\"text-sm font-medium mb-2\">Current Photo</h4>\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center gap-4\">\n                      <Avatar className=\"h-16 w-16\">\n                        <AvatarImage src={contact.avatarUrl} alt={contact.name} />\n                        <AvatarFallback className=\"text-lg\">\n                          {getInitials(contact.name)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <p className=\"font-medium\">{contact.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {contact.avatarUrl ? 'Has custom photo' : 'Using initials'}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Photo Suggestions */}\n              <div>\n                <h4 className=\"text-sm font-medium mb-2\">Photo Suggestions</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {suggestions.map((suggestion) => (\n                    <Card \n                      key={suggestion.id}\n                      className={`cursor-pointer transition-colors hover:bg-muted/50 ${\n                        selectedSuggestion?.id === suggestion.id ? 'ring-2 ring-primary' : ''\n                      }`}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start gap-3\">\n                          <Avatar className=\"h-12 w-12 flex-shrink-0\">\n                            <AvatarImage \n                              src={suggestion.thumbnailUrl || suggestion.url} \n                              alt={`${contact.name} - ${suggestion.source}`}\n                            />\n                            <AvatarFallback>\n                              {getInitials(contact.name)}\n                            </AvatarFallback>\n                          </Avatar>\n                          \n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {getSourceIcon(suggestion.source)}\n                                <span className=\"ml-1\">{getSourceLabel(suggestion.source)}</span>\n                              </Badge>\n                              <Badge \n                                variant=\"outline\" \n                                className={`text-xs ${getConfidenceColor(suggestion.confidence)}`}\n                              >\n                                {Math.round(suggestion.confidence * 100)}% match\n                              </Badge>\n                            </div>\n                            \n                            {suggestion.metadata?.description && (\n                              <p className=\"text-xs text-muted-foreground mb-2\">\n                                {suggestion.metadata.description}\n                              </p>\n                            )}\n                            \n                            <div className=\"flex items-center gap-2\">\n                              <Button\n                                size=\"sm\"\n                                onClick={() => handleApplyPhoto(suggestion)}\n                                disabled={downloadMutation.isPending}\n                              >\n                                {downloadMutation.isPending && selectedSuggestion?.id === suggestion.id ? (\n                                  <>\n                                    <Loader2 className=\"mr-1 h-3 w-3 animate-spin\" />\n                                    Applying...\n                                  </>\n                                ) : (\n                                  <>\n                                    <CheckCircle className=\"mr-1 h-3 w-3\" />\n                                    Apply\n                                  </>\n                                )}\n                              </Button>\n                              \n                              {suggestion.metadata?.sourceUrl && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={() => window.open(suggestion.metadata?.sourceUrl, '_blank')}\n                                >\n                                  <ExternalLink className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </ScrollArea>\n\n        <DialogFooter>\n          <Button \n            variant=\"outline\" \n            onClick={() => handleOpenChange(false)}\n            disabled={downloadMutation.isPending}\n          >\n            <X className=\"mr-2 h-4 w-4\" />\n            Close\n          </Button>\n          \n          {suggestions.length > 0 && (\n            <Button \n              variant=\"outline\"\n              onClick={searchForPhotos}\n              disabled={isSearching || downloadMutation.isPending}\n            >\n              {isSearching ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Searching...\n                </>\n              ) : (\n                <>\n                  <Sparkles className=\"mr-2 h-4 w-4\" />\n                  Search Again\n                </>\n              )}\n            </Button>\n          )}\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/Contact/AddContactDialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":58,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[1807,1820],"text":""},"desc":"Remove unused variable 'open'."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":61,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":61,"endColumn":41},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":90,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":90,"endColumn":70,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2614,2614],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2614,2614],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":91,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":91,"endColumn":77,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2684,2684],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2684,2684],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":108,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":108,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3428,3431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3428,3431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":127,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4050,4053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4050,4053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extractedFields on an `any` value.","line":127,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":127,"endColumn":41},{"ruleId":"no-undef","severity":2,"message":"'open' is not defined.","line":134,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":134,"endColumn":23}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\nconst contactSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  email: z.string().email('Invalid email address').optional().or(z.literal('')),\n  phone: z.string().optional(),\n  status: z.enum(['active', 'inactive', 'potential']),\n  lifecycleStage: z.enum(['discovery', 'curious', 'new_client', 'core_client', 'ambassador', 'needs_reconnecting', 'inactive', 'collaborator']).optional(),\n  sentiment: z.number().min(1).max(5).optional(),\n  notes: z.string().optional(),\n  healthGoals: z.string().optional(),\n  emergencyContact: z.string().optional(),\n  preferredContactMethod: z.enum(['email', 'phone', 'text']).optional(),\n  // Dynamic fields that will be stored in extractedFields\n  company: z.string().optional(),\n  jobTitle: z.string().optional(),\n  website: z.string().optional(),\n  linkedinUrl: z.string().optional(),\n  address: z.string().optional(),\n});\n\ntype ContactFormData = z.infer<typeof contactSchema>;\n\ninterface AddContactDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function AddContactDialog({ onOpenChange }: AddContactDialogProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<ContactFormData>({\n    resolver: zodResolver(contactSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      phone: '',\n      status: 'potential',\n      lifecycleStage: undefined,\n      sentiment: undefined,\n      notes: '',\n      healthGoals: '',\n      emergencyContact: '',\n      preferredContactMethod: 'email',\n      company: '',\n      jobTitle: '',\n      website: '',\n      linkedinUrl: '',\n      address: '',\n    },\n  });\n\n  const createContact = useMutation({\n    mutationFn: (data: ContactFormData) =>\n      apiRequest('POST', '/api/contacts', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/contacts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      toast({\n        title: 'Contact added',\n        description: 'The contact has been successfully added to your list.',\n      });\n      form.reset();\n      onOpenChange(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to add contact. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: ContactFormData) => {\n    // Separate standard fields from extracted fields\n    const { company, jobTitle, website, linkedinUrl, address, ...standardFields } = data;\n    \n    // Build extracted fields object\n    const extractedFields: Record<string, any> = {};\n    if (company) extractedFields.company = company;\n    if (jobTitle) extractedFields.jobTitle = jobTitle;\n    if (website) extractedFields.website = website;\n    if (linkedinUrl) extractedFields.linkedinUrl = linkedinUrl;\n    if (address) extractedFields.address = address;\n    \n    // Clean up empty strings from standard fields\n    const cleanData = Object.fromEntries(\n      Object.entries(standardFields).filter(([, value]) => value !== '' && value !== null && value !== undefined)\n    );\n    \n    // Add extracted fields if not empty\n    if (Object.keys(extractedFields).length > 0) {\n      (cleanData as any).extractedFields = extractedFields;\n    }\n    \n    createContact.mutate(cleanData as ContactFormData);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className='sm:max-w-[600px] max-h-[90vh] overflow-y-auto'>\n        <DialogHeader>\n          <DialogTitle>Add New Contact</DialogTitle>\n          <DialogDescription>\n            Add a new client or contact to your CRM. Fill in as much information as you\n            have available. Additional fields will be stored for future reference.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n            <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n              <FormField\n                control={form.control}\n                name='name'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder='Enter full name' {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='status'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder='Select status' />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value='potential'>Potential Client</SelectItem>\n                        <SelectItem value='active'>Active Client</SelectItem>\n                        <SelectItem value='inactive'>Inactive</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n              <FormField\n                control={form.control}\n                name='email'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Address</FormLabel>\n                    <FormControl>\n                      <Input type='email' placeholder='Enter email address' {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='phone'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Phone Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder='Enter phone number' {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n              <FormField\n                control={form.control}\n                name='lifecycleStage'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Lifecycle Stage</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder='Will be set by LLM analysis' />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value='discovery'>Discovery</SelectItem>\n                        <SelectItem value='curious'>Curious</SelectItem>\n                        <SelectItem value='new_client'>New Client</SelectItem>\n                        <SelectItem value='core_client'>Core Client</SelectItem>\n                        <SelectItem value='ambassador'>Ambassador</SelectItem>\n                        <SelectItem value='needs_reconnecting'>Needs Reconnecting</SelectItem>\n                        <SelectItem value='inactive'>Inactive</SelectItem>\n                        <SelectItem value='collaborator'>Collaborator</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name='sentiment'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Sentiment Rating</FormLabel>\n                    <Select onValueChange={(value) => field.onChange(Number(value))} value={field.value ? String(field.value) : undefined}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder='Will be analyzed by LLM' />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value='1'>1 - Very Negative</SelectItem>\n                        <SelectItem value='2'>2 - Negative</SelectItem>\n                        <SelectItem value='3'>3 - Neutral</SelectItem>\n                        <SelectItem value='4'>4 - Positive</SelectItem>\n                        <SelectItem value='5'>5 - Very Positive</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name='preferredContactMethod'\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Preferred Contact Method</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder='Select preferred method' />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value='email'>Email</SelectItem>\n                      <SelectItem value='phone'>Phone Call</SelectItem>\n                      <SelectItem value='text'>Text Message</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Professional Information */}\n            <div className='space-y-4'>\n              <h4 className='text-sm font-medium text-muted-foreground'>Professional Information</h4>\n              <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n                <FormField\n                  control={form.control}\n                  name='company'\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Company</FormLabel>\n                      <FormControl>\n                        <Input placeholder='Company name' {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name='jobTitle'\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Job Title</FormLabel>\n                      <FormControl>\n                        <Input placeholder='Job title or position' {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n                <FormField\n                  control={form.control}\n                  name='website'\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Website</FormLabel>\n                      <FormControl>\n                        <Input placeholder='https://example.com' {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name='linkedinUrl'\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>LinkedIn URL</FormLabel>\n                      <FormControl>\n                        <Input placeholder='https://linkedin.com/in/username' {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name='address'\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder='Full address...'\n                        className='min-h-[60px]'\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name='healthGoals'\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Health & Wellness Goals</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder='Describe their wellness goals and objectives...'\n                      className='min-h-[80px]'\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name='notes'\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Additional Notes</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder='Any additional notes about this contact...'\n                      className='min-h-[80px]'\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name='emergencyContact'\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Emergency Contact</FormLabel>\n                  <FormControl>\n                    <Input placeholder='Emergency contact name and phone' {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <DialogFooter>\n              <Button\n                type='button'\n                variant='outline'\n                onClick={() => onOpenChange(false)}\n                disabled={createContact.isPending}\n              >\n                Cancel\n              </Button>\n              <Button type='submit' disabled={createContact.isPending}>\n                {createContact.isPending ? 'Adding...' : 'Add Contact'}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/Contact/ContactDetail.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'contact' is defined but never used.","line":20,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"contact"},"fix":{"range":[795,822],"text":""},"desc":"Remove unused variable 'contact'."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":23,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":23,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":24,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"data"},"fix":{"range":[936,941],"text":""},"desc":"Remove unused variable 'data'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":24,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":40,"column":8,"nodeType":"Identifier","messageId":"undef","endLine":40,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":50,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":50,"endColumn":45},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":59,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":59,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":75,"column":35,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":75,"endColumn":52},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":75,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":75,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatarUrl on an `error` typed value.","line":75,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":75,"column":59,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":75,"endColumn":71},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":75,"column":59,"nodeType":"Identifier","messageId":"undef","endLine":75,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":75,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":75,"endColumn":71},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":77,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":77,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":77,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":44},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":81,"column":49,"nodeType":"Identifier","messageId":"undef","endLine":81,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `error` typed value.","line":81,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":61},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":82,"column":55,"nodeType":"Identifier","messageId":"undef","endLine":82,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":82,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":82,"endColumn":68},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":83,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":83,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .phone on an `error` typed value.","line":83,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":84,"column":65,"nodeType":"Identifier","messageId":"undef","endLine":84,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .phone on an `error` typed value.","line":84,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":78},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":89,"column":46,"nodeType":"Identifier","messageId":"undef","endLine":89,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `error` typed value.","line":89,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":89,"endColumn":60},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":90,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":90,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `error` typed value.","line":90,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":96,"column":48,"nodeType":"Identifier","messageId":"undef","endLine":96,"endColumn":55},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":124,"column":69,"nodeType":"Identifier","messageId":"undef","endLine":124,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":124,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":124,"endColumn":82},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":125,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":125,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .phone on an `error` typed value.","line":125,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":125,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":126,"column":71,"nodeType":"Identifier","messageId":"undef","endLine":126,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .phone on an `error` typed value.","line":126,"column":79,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":126,"endColumn":84},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":130,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":130,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastContact on an `error` typed value.","line":130,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":130,"endColumn":43},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":131,"column":56,"nodeType":"Identifier","messageId":"undef","endLine":131,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastContact on an `error` typed value.","line":131,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":131,"endColumn":75},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":134,"column":70,"nodeType":"Identifier","messageId":"undef","endLine":134,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `error` typed value.","line":134,"column":78,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":134,"endColumn":84},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":141,"column":73,"nodeType":"Identifier","messageId":"undef","endLine":141,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .sentiment on an `error` typed value.","line":141,"column":81,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":90},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":142,"column":69,"nodeType":"Identifier","messageId":"undef","endLine":142,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .engagementTrend on an `error` typed value.","line":142,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":142,"endColumn":92},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":143,"column":76,"nodeType":"Identifier","messageId":"undef","endLine":143,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .interactions on an `error` typed value.","line":143,"column":84,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":143,"endColumn":96},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":143,"column":105,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":143,"endColumn":107,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5358,5360],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":144,"column":69,"nodeType":"Identifier","messageId":"undef","endLine":144,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .goals on an `error` typed value.","line":144,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":144,"endColumn":82},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":144,"column":91,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":144,"endColumn":93,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5458,5460],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":149,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":149,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `error` typed value.","line":149,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":149,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":153,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":153,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .notes on an `error` typed value.","line":153,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":153,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":160,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":160,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .interactions on an `error` typed value.","line":160,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":160,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":160,"column":40,"nodeType":"Identifier","messageId":"undef","endLine":160,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .interactions on an `error` typed value.","line":160,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":160,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":161,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":161,"endColumn":41},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":161,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":161,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .interactions on an `error` typed value.","line":161,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":37},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":164,"column":72,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":164,"endColumn":74,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6325,6327],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":192,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":192,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .goals on an `error` typed value.","line":192,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":192,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":192,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":192,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .goals on an `error` typed value.","line":192,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":192,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":193,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":193,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":193,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":193,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .goals on an `error` typed value.","line":193,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":193,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":219,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":219,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .documents on an `error` typed value.","line":219,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":219,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":219,"column":37,"nodeType":"Identifier","messageId":"undef","endLine":219,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .documents on an `error` typed value.","line":219,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":219,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":220,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":220,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'contact' is not defined.","line":220,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":220,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .documents on an `error` typed value.","line":220,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":220,"endColumn":34}],"suppressedMessages":[],"errorCount":73,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Edit } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { Contact, Interaction, Goal, Document } from \"@shared/schema\";\n\ninterface ContactWithDetails extends Contact {\n  interactions: Interaction[];\n  goals: Goal[];\n  documents: Document[];\n}\n\ninterface ContactDetailProps {\n  contactId: string;\n  onEditContact?: (contact: ContactWithDetails) => void;\n}\n\nexport default function ContactDetail({ contactId, onEditContact }: ContactDetailProps) {\n  const { data, isLoading } = useQuery({\n    queryKey: [\"/api/contacts\", contactId],\n  }) as { data: ContactWithDetails, isLoading: boolean };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Card className=\"animate-pulse\">\n          <CardContent className=\"p-6\">\n            <div className=\"h-40 bg-muted rounded\" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!contact) {\n    return (\n      <Card>\n        <CardContent className=\"p-6 text-center\">\n          <p className=\"text-muted-foreground\">Contact not found</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, \"default\" | \"secondary\" | \"destructive\"> = {\n      active: \"default\",\n      inactive: \"secondary\",\n      archived: \"destructive\",\n    };\n    return variants[status] || \"default\";\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      ?.split(' ')\n      .map((n) => n[0])\n      .join('')\n      .toUpperCase() || '?'\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Contact Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Avatar className=\"h-16 w-16\">\n                <AvatarImage src={contact.avatarUrl} alt={contact.name} />\n                <AvatarFallback className=\"text-lg\">\n                  {getInitials(contact.name)}\n                </AvatarFallback>\n              </Avatar>\n              <div>\n                <CardTitle className=\"text-xl\">{contact.name}</CardTitle>\n                <p className=\"text-muted-foreground\">{contact.email}</p>\n                {contact.phone && (\n                  <p className=\"text-sm text-muted-foreground\">{contact.phone}</p>\n                )}\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant={getStatusBadge(contact.status)}>\n                {contact.status}\n              </Badge>\n              {onEditContact && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onEditContact(contact)}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Edit className=\"h-4 w-4\" />\n                  Edit Contact\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Contact Details */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <Tabs defaultValue=\"overview\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n              <TabsTrigger value=\"goals\">Goals</TabsTrigger>\n              <TabsTrigger value=\"documents\">Documents</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-6 mt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-medium mb-2\">Contact Information</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <p><span className=\"font-medium\">Email:</span> {contact.email}</p>\n                    {contact.phone && (\n                      <p><span className=\"font-medium\">Phone:</span> {contact.phone}</p>\n                    )}\n                    <p>\n                      <span className=\"font-medium\">Last Contact:</span>{\" \"}\n                      {contact.lastContact\n                        ? formatDistanceToNow(new Date(contact.lastContact), { addSuffix: true })\n                        : \"Never\"}\n                    </p>\n                    <p><span className=\"font-medium\">Status:</span> {contact.status}</p>\n                  </div>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-medium mb-2\">Engagement Metrics</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <p><span className=\"font-medium\">Sentiment:</span> {contact.sentiment}/5</p>\n                    <p><span className=\"font-medium\">Trend:</span> {contact.engagementTrend}</p>\n                    <p><span className=\"font-medium\">Interactions:</span> {contact.interactions?.length || 0}</p>\n                    <p><span className=\"font-medium\">Goals:</span> {contact.goals?.length || 0}</p>\n                  </div>\n                </div>\n              </div>\n\n              {contact.notes && (\n                <div>\n                  <h4 className=\"font-medium mb-2\">Notes</h4>\n                  <p className=\"text-sm text-muted-foreground bg-muted p-3 rounded-lg\">\n                    {contact.notes}\n                  </p>\n                </div>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"timeline\" className=\"space-y-4 mt-6\">\n              {contact.interactions && contact.interactions.length > 0 ? (\n                contact.interactions.map((interaction: Interaction) => (\n                  <div key={interaction.id} className=\"border-l-2 border-primary pl-4 pb-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <h5 className=\"font-medium\">{interaction.subject || interaction.type}</h5>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {formatDistanceToNow(new Date(interaction.timestamp), { addSuffix: true })}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {interaction.content}\n                    </p>\n                    <div className=\"flex items-center space-x-2 mt-2\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {interaction.type}\n                      </Badge>\n                      {interaction.source && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {interaction.source}\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No interactions found\n                </div>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"goals\" className=\"space-y-4 mt-6\">\n              {contact.goals && contact.goals.length > 0 ? (\n                contact.goals.map((goal: Goal) => (\n                  <div key={goal.id} className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <h5 className=\"font-medium\">{goal.title}</h5>\n                      <Badge variant={goal.status === \"completed\" ? \"default\" : \"secondary\"}>\n                        {goal.status}\n                      </Badge>\n                    </div>\n                    {goal.description && (\n                      <p className=\"text-sm text-muted-foreground\">{goal.description}</p>\n                    )}\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span>Progress: {goal.currentValue}/{goal.targetValue} {goal.unit}</span>\n                      <span>{Math.round((goal.currentValue / goal.targetValue) * 100)}%</span>\n                    </div>\n                    <Progress value={(goal.currentValue / goal.targetValue) * 100} className=\"h-2\" />\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No goals set\n                </div>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"documents\" className=\"space-y-4 mt-6\">\n              {contact.documents && contact.documents.length > 0 ? (\n                contact.documents.map((document: Document) => (\n                  <div key={document.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div>\n                      <h5 className=\"font-medium\">{document.name}</h5>\n                      <p className=\"text-sm text-muted-foreground\">{document.type}</p>\n                    </div>\n                    {document.url && (\n                      <a\n                        href={document.url}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-primary hover:underline text-sm\"\n                      >\n                        View\n                      </a>\n                    )}\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No documents found\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/Contact/ContactPhotoUpload.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":22,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[682,695],"text":""},"desc":"Remove unused variable 'open'."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":34,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":34,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":50,"column":21,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":50,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":85,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":85,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":90,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":90,"endColumn":35},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":132,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":132,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3748,3750],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":145,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":145,"endColumn":71,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4105,4105],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4105,4105],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":157,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":157,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'error' is not defined.","line":157,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":157,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `error` typed value.","line":157,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":164,"column":73,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":164,"endColumn":75},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":192,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":192,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":198,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":198,"endColumn":29},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":203,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":203,"endColumn":40},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":218,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":218,"endColumn":71,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5934,5934],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[5934,5934],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":221,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":221,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":221,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":221,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":230,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":230,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":239,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":239,"endColumn":49},{"ruleId":"no-undef","severity":2,"message":"'open' is not defined.","line":247,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":247,"endColumn":23},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":261,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":261,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7135,7137],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef } from 'react'\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { Button } from '@/components/ui/button'\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogFooter, \n  DialogHeader, \n  DialogTitle \n} from '@/components/ui/dialog'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport { Progress } from '@/components/ui/progress'\nimport { Upload, X, Image as ImageIcon, Loader2 } from 'lucide-react'\nimport { useToast } from '@/hooks/use-toast'\n\ninterface ContactPhotoUploadProps {\n  contactId: string\n  contactName: string\n  currentPhotoUrl?: string\n  open: boolean\n  onOpenChange: (open: boolean) => void\n}\n\ninterface UploadResponse {\n  success: boolean\n  avatarUrl?: string\n  error?: string\n}\n\nconst MAX_FILE_SIZE = 250 * 1024 // 250KB\nconst ACCEPTED_TYPES = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp']\n\nconst getInitials = (name: string) => {\n  return (\n    name\n      ?.split(' ')\n      .map((n) => n[0])\n      .join('')\n      .toUpperCase() || '?'\n  )\n}\n\nconst convertToWebP = (file: File): Promise<Blob> => {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas')\n    const ctx = canvas.getContext('2d')\n    const img = new Image()\n    \n    img.onload = () => {\n      // Calculate dimensions to maintain aspect ratio within max bounds\n      const maxSize = 200\n      let { width, height } = img\n      \n      if (width > height) {\n        if (width > maxSize) {\n          height = (height * maxSize) / width\n          width = maxSize\n        }\n      } else {\n        if (height > maxSize) {\n          width = (width * maxSize) / height\n          height = maxSize\n        }\n      }\n      \n      canvas.width = width\n      canvas.height = height\n      \n      // Draw and convert to WebP\n      ctx?.drawImage(img, 0, 0, width, height)\n      canvas.toBlob(\n        (blob) => {\n          if (blob) {\n            resolve(blob)\n          } else {\n            reject(new Error('Failed to convert image'))\n          }\n        },\n        'image/webp',\n        0.8 // Quality setting\n      )\n    }\n    \n    img.onerror = () => reject(new Error('Failed to load image'))\n    img.src = URL.createObjectURL(file)\n  })\n}\n\nexport function ContactPhotoUpload({\n  contactId,\n  contactName,\n  currentPhotoUrl,\n  \n  onOpenChange\n}: ContactPhotoUploadProps) {\n  const [preview, setPreview] = useState<string | null>(null)\n  const [selectedFile, setSelectedFile] = useState<File | null>(null)\n  const [uploadProgress, setUploadProgress] = useState(0)\n  const fileInputRef = useRef<HTMLInputElement>(null)\n  const queryClient = useQueryClient()\n  const { toast } = useToast()\n\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File): Promise<UploadResponse> => {\n      const formData = new FormData()\n      \n      // Convert to WebP if not already\n      let processedFile: File | Blob = file\n      if (file.type !== 'image/webp') {\n        processedFile = await convertToWebP(file)\n      }\n      \n      // Check file size after conversion\n      if (processedFile.size > MAX_FILE_SIZE) {\n        throw new Error(`File size must be under 250KB. Current size: ${Math.round(processedFile.size / 1024)}KB`)\n      }\n      \n      formData.append('photo', processedFile, `${contactId}.webp`)\n      formData.append('contactId', contactId)\n      \n      const response = await fetch('/api/contacts/upload-photo', {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      })\n      \n      if (!response.ok) {\n        const error = await response.json() as { message?: string }\n        throw new Error(error.message || 'Upload failed')\n      }\n      \n      return response.json() as Promise<UploadResponse>\n    },\n    onSuccess: (data) => {\n      if (data.success) {\n        toast({\n          title: 'Photo uploaded successfully',\n          description: 'Contact photo has been updated.'\n        })\n        \n        // Invalidate contacts query to refresh the data\n        queryClient.invalidateQueries({ queryKey: ['/api/contacts'] })\n        \n        // Close dialog and reset state\n        onOpenChange(false)\n        setPreview(null)\n        setSelectedFile(null)\n        setUploadProgress(0)\n      }\n    },\n    onError: () => {\n      toast({\n        title: 'Upload failed',\n        description: error.message,\n        variant: 'destructive'\n      })\n      setUploadProgress(0)\n    }\n  })\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (!file) return\n\n    // Validate file type\n    if (!ACCEPTED_TYPES.includes(file.type)) {\n      toast({\n        title: 'Invalid file type',\n        description: 'Please select a JPEG, PNG, or WebP image.',\n        variant: 'destructive'\n      })\n      return\n    }\n\n    // Validate file size (before conversion)\n    if (file.size > MAX_FILE_SIZE * 2) { // Allow 2x for conversion\n      toast({\n        title: 'File too large',\n        description: 'Please select an image smaller than 500KB.',\n        variant: 'destructive'\n      })\n      return\n    }\n\n    setSelectedFile(file)\n    \n    // Create preview\n    const reader = new FileReader()\n    reader.onload = (e) => {\n      setPreview(e.target?.result as string)\n    }\n    reader.readAsDataURL(file)\n  }\n\n  const handleUpload = () => {\n    if (!selectedFile) return\n    uploadMutation.mutate(selectedFile)\n  }\n\n  const handleRemovePhoto = async () => {\n    try {\n      const response = await fetch(`/api/contacts/${contactId}/photo`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      })\n\n      if (response.ok) {\n        toast({\n          title: 'Photo removed',\n          description: 'Contact photo has been removed.'\n        })\n        \n        queryClient.invalidateQueries({ queryKey: ['/api/contacts'] })\n        onOpenChange(false)\n      }\n    } catch (error) {\n      toast({\n        title: 'Failed to remove photo',\n        description: 'Please try again.',\n        variant: 'destructive'\n      })\n    }\n  }\n\n  const resetDialog = () => {\n    setPreview(null)\n    setSelectedFile(null)\n    setUploadProgress(0)\n    if (fileInputRef.current) {\n      fileInputRef.current.value = ''\n    }\n  }\n\n  const handleOpenChange = (newOpen: boolean) => {\n    if (!newOpen) {\n      resetDialog()\n    }\n    onOpenChange(newOpen)\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={handleOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Update Contact Photo</DialogTitle>\n          <DialogDescription>\n            Upload a new photo for {contactName}. Images will be optimized to WebP format and resized to 200x200px.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Current/Preview Photo */}\n          <div className=\"flex justify-center\">\n            <Avatar className=\"h-24 w-24\">\n              <AvatarImage \n                src={preview || currentPhotoUrl} \n                alt={contactName} \n              />\n              <AvatarFallback className=\"text-2xl\">\n                {getInitials(contactName)}\n              </AvatarFallback>\n            </Avatar>\n          </div>\n\n          {/* File Upload Area */}\n          <div className=\"space-y-2\">\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept={ACCEPTED_TYPES.join(',')}\n              onChange={handleFileSelect}\n              className=\"hidden\"\n            />\n            \n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => fileInputRef.current?.click()}\n              disabled={uploadMutation.isPending}\n            >\n              <ImageIcon className=\"mr-2 h-4 w-4\" />\n              Choose Photo\n            </Button>\n            \n            <p className=\"text-xs text-muted-foreground text-center\">\n              Max file size: 250KB • Formats: JPEG, PNG, WebP\n            </p>\n          </div>\n\n          {/* Upload Progress */}\n          {uploadMutation.isPending && (\n            <div className=\"space-y-2\">\n              <Progress value={uploadProgress} className=\"w-full\" />\n              <p className=\"text-sm text-muted-foreground text-center\">\n                Uploading and optimizing...\n              </p>\n            </div>\n          )}\n\n          {/* File Info */}\n          {selectedFile && !uploadMutation.isPending && (\n            <div className=\"bg-muted p-3 rounded-md\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium truncate\">\n                    {selectedFile.name}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {Math.round(selectedFile.size / 1024)}KB\n                  </p>\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={resetDialog}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <DialogFooter className=\"flex-col sm:flex-row gap-2\">\n          {currentPhotoUrl && (\n            <Button\n              type=\"button\"\n              variant=\"destructive\"\n              onClick={handleRemovePhoto}\n              className=\"sm:mr-auto\"\n            >\n              Remove Photo\n            </Button>\n          )}\n          \n          <div className=\"flex gap-2\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => handleOpenChange(false)}\n              disabled={uploadMutation.isPending}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"button\"\n              onClick={handleUpload}\n              disabled={!selectedFile || uploadMutation.isPending}\n            >\n              {uploadMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Uploading...\n                </>\n              ) : (\n                <>\n                  <Upload className=\"mr-2 h-4 w-4\" />\n                  Upload Photo\n                </>\n              )}\n            </Button>\n          </div>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/Contact/ContactsTable.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":2,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":2,"endColumn":118,"fix":{"range":[59,59],"text":" type"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1828,1831],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1828,1831],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1864,1867],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1864,1867],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'contactId' is defined but never used.","line":79,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":79,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"contactId"},"fix":{"range":[2010,2027],"text":""},"desc":"Remove unused variable 'contactId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'contact' is defined but never used.","line":80,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"contact"},"fix":{"range":[2056,2072],"text":""},"desc":"Remove unused variable 'contact'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'contact' is defined but never used.","line":81,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"contact"},"fix":{"range":[2103,2119],"text":""},"desc":"Remove unused variable 'contact'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'action' is defined but never used.","line":82,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"action"},"fix":{"range":[2147,2162],"text":""},"desc":"Remove unused variable 'action'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'contactIds' is defined but never used.","line":82,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":55,"suggestions":[{"messageId":"removeVar","data":{"varName":"contactIds"},"fix":{"range":[2161,2183],"text":""},"desc":"Remove unused variable 'contactIds'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'format' is defined but never used.","line":83,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"format"},"fix":{"range":[2211,2225],"text":""},"desc":"Remove unused variable 'format'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'tool' is defined but never used.","line":85,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":85,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"tool"},"fix":{"range":[2277,2289],"text":""},"desc":"Remove unused variable 'tool'."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":88,"column":52,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":88,"endColumn":54},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":96,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":96,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":106,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":106,"endColumn":50},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":129,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":129,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":135,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":135,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4218,4221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4218,4221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":168,"column":66,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":168,"endColumn":68},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":176,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":176,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":253,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":253,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":280,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":280,"endColumn":13},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":292,"column":17,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":292,"endColumn":53,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[8563,8563],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[8563,8563],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":306,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":306,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":330,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":330,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":344,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":344,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":359,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":359,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":388,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":388,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":409,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":409,"endColumn":13},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":411,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":411,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12449,12451],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":446,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":446,"endColumn":13},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":449,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":449,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13667,13669],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":450,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":450,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13706,13708],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":481,"column":37,"nodeType":"LogicalExpression","messageId":"unsafeReturn","endLine":481,"endColumn":75},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":481,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":481,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14842,14844],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":483,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":483,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":495,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":495,"endColumn":13},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":553,"column":84,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":553,"endColumn":86,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17058,17308],"text":"(!debouncedGlobalFilter ||\n        contact.name.toLowerCase().includes(debouncedGlobalFilter.toLowerCase()) ||\n        contact.email?.toLowerCase().includes(debouncedGlobalFilter.toLowerCase()) ??\n        contact.phone?.includes(debouncedGlobalFilter))"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":554,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":554,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17309,17311],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":555,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":555,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17358,17360],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":596,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":596,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'onBulkAction' is not defined.","line":642,"column":45,"nodeType":"Identifier","messageId":"undef","endLine":642,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":650,"column":50,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":650,"endColumn":99},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":650,"column":50,"nodeType":"Identifier","messageId":"unsafeCall","endLine":650,"endColumn":62},{"ruleId":"no-undef","severity":2,"message":"'onBulkAction' is not defined.","line":650,"column":50,"nodeType":"Identifier","messageId":"undef","endLine":650,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":655,"column":50,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":655,"endColumn":92},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":655,"column":50,"nodeType":"Identifier","messageId":"unsafeCall","endLine":655,"endColumn":62},{"ruleId":"no-undef","severity":2,"message":"'onBulkAction' is not defined.","line":655,"column":50,"nodeType":"Identifier","messageId":"undef","endLine":655,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":660,"column":50,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":660,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":660,"column":50,"nodeType":"Identifier","messageId":"unsafeCall","endLine":660,"endColumn":62},{"ruleId":"no-undef","severity":2,"message":"'onBulkAction' is not defined.","line":660,"column":50,"nodeType":"Identifier","messageId":"undef","endLine":660,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":663,"column":50,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":663,"endColumn":96},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":663,"column":50,"nodeType":"Identifier","messageId":"unsafeCall","endLine":663,"endColumn":62},{"ruleId":"no-undef","severity":2,"message":"'onBulkAction' is not defined.","line":663,"column":50,"nodeType":"Identifier","messageId":"undef","endLine":663,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":667,"column":50,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":667,"endColumn":92},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":667,"column":50,"nodeType":"Identifier","messageId":"unsafeCall","endLine":667,"endColumn":62},{"ruleId":"no-undef","severity":2,"message":"'onBulkAction' is not defined.","line":667,"column":50,"nodeType":"Identifier","messageId":"undef","endLine":667,"endColumn":62},{"ruleId":"no-undef","severity":2,"message":"'onAITool' is not defined.","line":712,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":712,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":721,"column":50,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":721,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":721,"column":50,"nodeType":"Identifier","messageId":"unsafeCall","endLine":721,"endColumn":58},{"ruleId":"no-undef","severity":2,"message":"'onAITool' is not defined.","line":721,"column":50,"nodeType":"Identifier","messageId":"undef","endLine":721,"endColumn":58},{"ruleId":"no-undef","severity":2,"message":"'onAddContact' is not defined.","line":730,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":730,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":731,"column":30,"nodeType":"Identifier","messageId":"anyAssignment","endLine":731,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'onAddContact' is not defined.","line":731,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":731,"endColumn":42}],"suppressedMessages":[],"errorCount":43,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { useState, useMemo, useEffect } from \"react\"\nimport { ColumnDef, PaginationState, SortingState, ColumnFiltersState, VisibilityState } from \"@tanstack/react-table\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n  DropdownMenuCheckboxItem\n} from \"@/components/ui/dropdown-menu\"\nimport { \n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\nimport { \n  Mail, \n  Phone, \n   \n  MessageSquare, \n  Eye, \n  Edit, \n  Trash2, \n  Search,\n  Filter,\n  Download,\n  Settings,\n  ArrowUpDown,\n  ChevronLeft,\n  ChevronRight,\n  ChevronsLeft,\n  ChevronsRight,\n  RefreshCw,\n  Camera,\n  Sparkles,\n  Plus\n} from \"lucide-react\"\nimport {\n  useReactTable,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  flexRender,\n} from \"@tanstack/react-table\"\n\nexport type Contact = {\n  id: string\n  name: string\n  email?: string\n  phone?: string\n  avatarUrl?: string\n  lifecycleStage?: 'discovery' | 'curious' | 'new_client' | 'core_client' | 'ambassador' | 'needs_reconnecting' | 'inactive' | 'collaborator'\n  tags?: Array<{id: string, name: string, color: string}>\n  notes?: string\n  voiceNotes?: Array<{id: string, noteUrl: string, transcription?: string}>\n  lastContact?: string\n  sentiment?: number\n  engagementTrend?: 'improving' | 'stable' | 'declining'\n  extractedFields?: Record<string, any>\n  revenueData?: Record<string, any>\n  referralCount?: number\n  createdAt: string\n  updatedAt: string\n}\n\ninterface ContactsTableProps {\n  contacts: Contact[]\n  onSelectContact: (contactId: string) => void\n  onEditContact?: (contact: Contact) => void\n  onDeleteContact?: (contact: Contact) => void\n  onBulkAction?: (action: string, contactIds: string[]) => void\n  onExportData?: (format: string) => void\n  onAddContact?: () => void\n  onAITool?: (tool: string) => void\n}\n\nconst useDebounce = (value: string, delay: number) => {\n  const [debouncedValue, setDebouncedValue] = useState(value)\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n\n\n\nconst getLifecycleStageColor = (stage: string) => {\n  switch (stage) {\n    case 'discovery':\n      return 'bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100'\n    case 'curious':\n      return 'bg-purple-100 text-purple-800 dark:bg-purple-800 dark:text-purple-100'\n    case 'new_client':\n      return 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100'\n    case 'core_client':\n      return 'bg-emerald-100 text-emerald-800 dark:bg-emerald-800 dark:text-emerald-100'\n    case 'ambassador':\n      return 'bg-gold-100 text-gold-800 dark:bg-gold-800 dark:text-gold-100'\n    case 'needs_reconnecting':\n      return 'bg-orange-100 text-orange-800 dark:bg-orange-800 dark:text-orange-100'\n    case 'inactive':\n      return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100'\n    case 'collaborator':\n      return 'bg-indigo-100 text-indigo-800 dark:bg-indigo-800 dark:text-indigo-100'\n    default:\n      return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100'\n  }\n}\n\nconst getSentimentColor = (sentiment: number) => {\n  if (sentiment >= 4) return 'text-green-600'\n  if (sentiment >= 3) return 'text-yellow-600'\n  return 'text-red-600'\n}\n\nconst getInitials = (name: string) => {\n  return (\n    name\n      ?.split(' ')\n      .map((n) => n[0])\n      .join('')\n      .toUpperCase() || '?'\n  )\n}\n\nconst DEFAULT_PREFERENCES: TablePreferences = {\n  pageSize: 25,\n  columnVisibility: {},\n  sorting: [],\n  filters: []\n}\n\ninterface TablePreferences {\n  pageSize: number;\n  columnVisibility: Record<string, boolean>;\n  sorting: SortingState;\n  filters: any[];\n}\n\nconst loadPreferences = (): TablePreferences => {\n  try {\n    const saved = localStorage.getItem('contacts-table-preferences')\n    return saved ? { ...DEFAULT_PREFERENCES, ...JSON.parse(saved) as Partial<TablePreferences> } : DEFAULT_PREFERENCES\n  } catch {\n    return DEFAULT_PREFERENCES\n  }\n}\n\nconst savePreferences = (preferences: Partial<TablePreferences>) => {\n  try {\n    localStorage.setItem('contacts-table-preferences', JSON.stringify(preferences))\n  } catch {\n    // Ignore errors\n  }\n}\n\nexport function ContactsTable({ \n  contacts, \n  onSelectContact, \n  onEditContact, \n  onDeleteContact,\n  \n}: ContactsTableProps) {\n  const [preferences] = useState(() => loadPreferences())\n  const [globalFilter, setGlobalFilter] = useState('')\n  const [sorting, setSorting] = useState<SortingState>(preferences.sorting || [])\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])\n  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>(preferences.columnVisibility || {})\n  const [rowSelection, setRowSelection] = useState<Record<string, boolean>>({})\n  const [pagination, setPagination] = useState<PaginationState>({\n    pageIndex: 0,\n    pageSize: preferences.pageSize || 25,\n  })\n  const [lifecycleFilter, setLifecycleFilter] = useState('all')\n\n  const debouncedGlobalFilter = useDebounce(globalFilter, 300)\n\n  // Save preferences when they change\n  useEffect(() => {\n    const newPreferences = {\n      pageSize: pagination.pageSize,\n      columnVisibility,\n      sorting,\n    }\n    savePreferences(newPreferences)\n  }, [pagination.pageSize, columnVisibility, sorting])\n\n  // Get dynamic columns from extractedFields\n  const dynamicColumns = useMemo(() => {\n    const fieldsSet = new Set<string>()\n    contacts.forEach(contact => {\n      if (contact.extractedFields) {\n        Object.keys(contact.extractedFields).forEach(key => fieldsSet.add(key))\n      }\n    })\n    return Array.from(fieldsSet)\n  }, [contacts])\n\n  const columns: ColumnDef<Contact>[] = useMemo(() => [\n    {\n      id: \"select\",\n      header: ({ table }) => (\n        <Checkbox\n          checked={\n            table.getIsAllPageRowsSelected() ||\n            (table.getIsSomePageRowsSelected() && \"indeterminate\")\n          }\n          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n          aria-label=\"Select all\"\n        />\n      ),\n      cell: ({ row }) => (\n        <Checkbox\n          checked={row.getIsSelected()}\n          onCheckedChange={(value) => row.toggleSelected(!!value)}\n          aria-label=\"Select row\"\n        />\n      ),\n      enableSorting: false,\n      enableHiding: false,\n    },\n    {\n      accessorKey: \"name\",\n      header: ({ column }) => (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n          className=\"h-auto p-0 hover:bg-transparent\"\n        >\n          Name\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      ),\n      cell: ({ row }) => {\n        const contact = row.original\n        return (\n          <div className=\"flex items-center space-x-3\">\n            <Avatar className=\"h-8 w-8\">\n              <AvatarImage src={contact.avatarUrl} alt={contact.name} />\n              <AvatarFallback className=\"text-xs\">\n                {getInitials(contact.name)}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"font-medium\">{contact.name}</div>\n          </div>\n        )\n      },\n    },\n    {\n      accessorKey: \"email\",\n      header: ({ column }) => (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n          className=\"h-auto p-0 hover:bg-transparent\"\n        >\n          Email\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      ),\n      cell: ({ row }) => {\n        const email = row.getValue(\"email\") as string\n        return email ? (\n          <div className=\"flex items-center space-x-2\">\n            <Mail className=\"h-3 w-3 text-muted-foreground\" />\n            <span className=\"truncate max-w-[200px]\" title={email}>{email}</span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-4 w-4 p-0\"\n              onClick={(e) => {\n                e.stopPropagation()\n                navigator.clipboard.writeText(email)\n              }}\n            >\n              📋\n            </Button>\n          </div>\n        ) : (\n          <span className=\"text-muted-foreground\">—</span>\n        )\n      },\n    },\n    {\n      accessorKey: \"phone\",\n      header: \"Phone\",\n      cell: ({ row }) => {\n        const phone = row.getValue(\"phone\") as string\n        return phone ? (\n          <div className=\"flex items-center space-x-2\">\n            <Phone className=\"h-3 w-3 text-muted-foreground\" />\n            <span>{phone}</span>\n          </div>\n        ) : (\n          <span className=\"text-muted-foreground\">—</span>\n        )\n      },\n    },\n    {\n      accessorKey: \"lifecycleStage\",\n      header: ({ column }) => (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n          className=\"h-auto p-0 hover:bg-transparent\"\n        >\n          Client Journey\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      ),\n      cell: ({ row }) => {\n        const stage = row.getValue(\"lifecycleStage\") as string\n        return stage ? (\n          <Badge variant=\"outline\" className={getLifecycleStageColor(stage)}>\n            {stage.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n          </Badge>\n        ) : (\n          <span className=\"text-muted-foreground text-xs\">Pending analysis</span>\n        )\n      },\n    },\n    {\n      accessorKey: \"sentiment\",\n      header: \"Sentiment\",\n      cell: ({ row }) => {\n        const sentiment = row.getValue(\"sentiment\") as number\n        return sentiment ? (\n          <div className={`flex items-center space-x-1 ${getSentimentColor(sentiment)}`}>\n            <span>{'★'.repeat(sentiment)}{'☆'.repeat(5-sentiment)}</span>\n            <span className=\"text-xs\">({sentiment}/5)</span>\n          </div>\n        ) : (\n          <span className=\"text-muted-foreground text-xs\">Pending analysis</span>\n        )\n      },\n    },\n    {\n      accessorKey: \"engagementTrend\",\n      header: \"Engagement\",\n      cell: ({ row }) => {\n        const trend = row.getValue(\"engagementTrend\") as string\n        const trendColors = {\n          improving: 'text-green-600',\n          stable: 'text-yellow-600',\n          declining: 'text-red-600'\n        }\n        // Only show engagement if it's been analyzed and is not the default 'stable'\n        return trend && trend !== 'stable' ? (\n          <span className={trendColors[trend as keyof typeof trendColors]}>\n            {trend === 'improving' ? '↗️' : trend === 'declining' ? '↘️' : '→'} {trend}\n          </span>\n        ) : (\n          <span className=\"text-muted-foreground text-xs\">Pending analysis</span>\n        )\n      },\n    },\n    {\n      accessorKey: \"lastContact\",\n      header: ({ column }) => (\n        <Button\n          variant=\"ghost\"\n          onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n          className=\"h-auto p-0 hover:bg-transparent\"\n        >\n          Last Contact\n          <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n        </Button>\n      ),\n      cell: ({ row }) => {\n        const lastContact = row.getValue(\"lastContact\") as string\n        return lastContact ? (\n          <div className=\"flex items-center space-x-2\">\n            <MessageSquare className=\"h-3 w-3 text-muted-foreground\" />\n            <span className=\"text-sm\">\n              {new Date(lastContact).toLocaleDateString('en-GB', { \n                day: '2-digit', \n                month: 'short', \n                year: '2-digit' \n              }).replace(/\\s/g, '-').toUpperCase()}\n            </span>\n          </div>\n        ) : (\n          <span className=\"text-muted-foreground\">—</span>\n        )\n      },\n    },\n    {\n      accessorKey: \"tags\",\n      header: \"Tags\",\n      cell: ({ row }) => {\n        const contact = row.original\n        const tags = contact.tags || []\n        const displayTags = tags.slice(0, 3)\n        const extraCount = tags.length - 3\n\n        return (\n          <div className=\"flex items-center gap-1 flex-wrap\">\n            {displayTags.map((tag) => (\n              <Badge \n                key={tag.id} \n                variant=\"secondary\" \n                className=\"text-xs cursor-pointer hover:opacity-80\"\n                style={{ backgroundColor: tag.color + '20', color: tag.color, borderColor: tag.color }}\n                onClick={(e) => {\n                  e.stopPropagation()\n                  // TODO: Filter by tag\n                }}\n              >\n                {tag.name}\n              </Badge>\n            ))}\n            {extraCount > 0 && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                +{extraCount}\n              </Badge>\n            )}\n            {tags.length === 0 && (\n              <span className=\"text-muted-foreground text-xs\">—</span>\n            )}\n          </div>\n        )\n      },\n    },\n    {\n      accessorKey: \"notes\",\n      header: \"Notes\",\n      cell: ({ row }) => {\n        const contact = row.original\n        const notes = contact.notes\n        const voiceNotes = contact.voiceNotes || []\n        const hasContent = notes || voiceNotes.length > 0\n\n        return (\n          <div className=\"flex items-center space-x-2\">\n            {hasContent ? (\n              <>\n                {notes && (\n                  <div className=\"flex items-center space-x-1\">\n                    <MessageSquare className=\"h-3 w-3 text-blue-600\" />\n                    <span className=\"text-xs text-muted-foreground\">\n                      {notes.length > 30 ? notes.substring(0, 30) + '...' : notes}\n                    </span>\n                  </div>\n                )}\n                {voiceNotes.length > 0 && (\n                  <div className=\"flex items-center space-x-1\">\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      🎤 {voiceNotes.length}\n                    </Badge>\n                  </div>\n                )}\n              </>\n            ) : (\n              <span className=\"text-muted-foreground text-xs\">—</span>\n            )}\n          </div>\n        )\n      },\n    },\n    ...dynamicColumns.map(fieldName => ({\n      id: `extracted_${fieldName}`,\n      accessorFn: (row: Contact) => row.extractedFields?.[fieldName] || '',\n      header: fieldName.charAt(0).toUpperCase() + fieldName.slice(1),\n      cell: ({ getValue }: { getValue: () => unknown }) => {\n        const value = getValue() as string | number | boolean | null | undefined\n        return value ? (\n          <span className=\"text-sm text-muted-foreground\">{String(value)}</span>\n        ) : (\n          <span className=\"text-muted-foreground\">—</span>\n        )\n      },\n    })),\n    {\n      id: \"actions\",\n      enableHiding: false,\n      cell: ({ row }) => {\n        const contact = row.original\n\n        return (\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-8 w-8 p-0 hover:bg-muted\"\n              onClick={(e) => {\n                e.stopPropagation()\n                onSelectContact(contact.id)\n              }}\n              title=\"View contact details\"\n            >\n              <Eye className=\"h-4 w-4 text-sky-500\" />\n            </Button>\n            \n            {onEditContact && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-8 w-8 p-0 hover:bg-muted\"\n                onClick={(e) => {\n                  e.stopPropagation()\n                  onEditContact(contact)\n                }}\n                title=\"Edit contact\"\n              >\n                <Edit className=\"h-4 w-4 text-green-500\" />\n              </Button>\n            )}\n            \n            {onDeleteContact && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-8 w-8 p-0 hover:bg-destructive/10 text-red-600 dark:text-red-400\"\n                onClick={(e) => {\n                  e.stopPropagation()\n                  onDeleteContact(contact)\n                }}\n                title=\"Delete contact\"\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        )\n      },\n    },\n  ], [dynamicColumns, onSelectContact, onEditContact, onDeleteContact])\n\n  const filteredData = useMemo(() => {\n    return contacts.filter(contact => {\n      // Global search filter\n      const searchMatch = !debouncedGlobalFilter ||\n        contact.name.toLowerCase().includes(debouncedGlobalFilter.toLowerCase()) ||\n        contact.email?.toLowerCase().includes(debouncedGlobalFilter.toLowerCase()) ||\n        contact.phone?.includes(debouncedGlobalFilter) ||\n        Object.values(contact.extractedFields || {}).some(value => \n          String(value).toLowerCase().includes(debouncedGlobalFilter.toLowerCase())\n        )\n      \n      // Lifecycle filter\n      const lifecycleMatch = lifecycleFilter === 'all' || contact.lifecycleStage === lifecycleFilter\n      \n      return searchMatch && lifecycleMatch\n    })\n  }, [contacts, debouncedGlobalFilter, lifecycleFilter])\n\n  const table = useReactTable({\n    data: filteredData,\n    columns,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n      pagination,\n      globalFilter: debouncedGlobalFilter,\n    },\n    enableRowSelection: true,\n    getRowId: (row) => row.id,\n    onRowSelectionChange: setRowSelection,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onColumnVisibilityChange: setColumnVisibility,\n    onPaginationChange: setPagination,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    manualPagination: false,\n    manualSorting: false,\n    manualFiltering: false,\n  })\n\n  \n  const selectedContactIds = Object.keys(rowSelection).filter(id => rowSelection[id])\n\n  const resetPreferences = () => {\n    setColumnVisibility({})\n    setSorting([])\n    setPagination({ pageIndex: 0, pageSize: 25 })\n    localStorage.removeItem('contacts-table-preferences')\n  }\n\n  return (\n    <div className=\"w-full space-y-4\">\n      {/* Toolbar */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          {/* Global Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search contacts...\"\n              value={globalFilter}\n              onChange={(e) => setGlobalFilter(e.target.value)}\n              className=\"pl-8 w-[250px]\"\n            />\n          </div>\n\n          {/* Lifecycle Filter */}\n          <Select value={lifecycleFilter} onValueChange={setLifecycleFilter}>\n            <SelectTrigger className=\"w-[180px]\">\n              <Filter className=\"mr-2 h-4 w-4\" />\n              <SelectValue placeholder=\"Client Journey\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Stages</SelectItem>\n              <SelectItem value=\"discovery\">Discovery</SelectItem>\n              <SelectItem value=\"curious\">Curious</SelectItem>\n              <SelectItem value=\"new_client\">New Client</SelectItem>\n              <SelectItem value=\"core_client\">Core Client</SelectItem>\n              <SelectItem value=\"ambassador\">Ambassador</SelectItem>\n              <SelectItem value=\"needs_reconnecting\">Needs Reconnecting</SelectItem>\n              <SelectItem value=\"inactive\">Inactive</SelectItem>\n              <SelectItem value=\"collaborator\">Collaborator</SelectItem>\n            </SelectContent>\n          </Select>\n\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          {/* Bulk Actions */}\n          {selectedContactIds.length > 0 && onBulkAction && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\">\n                  Bulk Actions ({selectedContactIds.length})\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent>\n                <DropdownMenuItem onClick={() => onBulkAction('enrich_photos', selectedContactIds)}>\n                  <Camera className=\"mr-2 h-4 w-4\" />\n                  Enrich Photos ({selectedContactIds.length})\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={() => onBulkAction('export', selectedContactIds)}>\n                  <Download className=\"mr-2 h-4 w-4\" />\n                  Export as JSON\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={() => onBulkAction('add_tag', selectedContactIds)}>\n                  Add Tag\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => onBulkAction('remove_tag', selectedContactIds)}>\n                  Remove Tag\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={() => onBulkAction('delete', selectedContactIds)}>\n                  <Trash2 className=\"mr-2 h-4 w-4\" />\n                  Delete Selected\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n\n          {/* Column Visibility */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\">\n                <Settings className=\"mr-2 h-4 w-4\" />\n                Columns\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-[200px]\">\n              <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n              <DropdownMenuSeparator />\n              {table\n                .getAllColumns()\n                .filter((column) => column.getCanHide())\n                .map((column) => {\n                  return (\n                    <DropdownMenuCheckboxItem\n                      key={column.id}\n                      className=\"capitalize\"\n                      checked={column.getIsVisible()}\n                      onCheckedChange={(value) =>\n                        column.toggleVisibility(!!value)\n                      }\n                    >\n                      {column.id.replace('_', ' ')}\n                    </DropdownMenuCheckboxItem>\n                  )\n                })}\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={resetPreferences}>\n                <RefreshCw className=\"mr-2 h-4 w-4\" />\n                Reset preferences\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          {/* AI Tools */}\n          {onAITool && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\">\n                  <Sparkles className=\"mr-2 h-4 w-4\" />\n                  AI Tools\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent>\n                <DropdownMenuItem onClick={() => onAITool('enrich_photos')}>\n                  <Sparkles className=\"mr-2 h-4 w-4\" />\n                  Enrich All Photos\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n\n          {/* Add Contact */}\n          {onAddContact && (\n            <Button onClick={onAddContact}>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Contact\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Table */}\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id} className=\"whitespace-nowrap\">\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  )\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && \"selected\"}\n                  className=\"hover:bg-muted/50\"\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id} className=\"py-2\">\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center\"\n                >\n                  No contacts found.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n      {/* Pagination */}\n      <div className=\"flex items-center justify-between space-x-2 py-4\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"text-sm font-medium\">\n            Rows per page\n          </p>\n          <Select\n            value={`${table.getState().pagination.pageSize}`}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value))\n            }}\n          >\n            <SelectTrigger className=\"h-8 w-[70px]\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {[10, 25, 50, 100].map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        \n        <div className=\"flex items-center space-x-6 lg:space-x-8\">\n          <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n            Page {table.getState().pagination.pageIndex + 1} of{\" \"}\n            {table.getPageCount()}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              className=\"hidden h-8 w-8 p-0 lg:flex\"\n              onClick={() => table.setPageIndex(0)}\n              disabled={!table.getCanPreviousPage()}\n            >\n              <span className=\"sr-only\">Go to first page</span>\n              <ChevronsLeft className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"h-8 w-8 p-0\"\n              onClick={() => table.previousPage()}\n              disabled={!table.getCanPreviousPage()}\n            >\n              <span className=\"sr-only\">Go to previous page</span>\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"h-8 w-8 p-0\"\n              onClick={() => table.nextPage()}\n              disabled={!table.getCanNextPage()}\n            >\n              <span className=\"sr-only\">Go to next page</span>\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"hidden h-8 w-8 p-0 lg:flex\"\n              onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n              disabled={!table.getCanNextPage()}\n            >\n              <span className=\"sr-only\">Go to last page</span>\n              <ChevronsRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"flex-1 text-sm text-muted-foreground\">\n          {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n          {table.getFilteredRowModel().rows.length} row(s) selected.\n        </div>\n      </div>\n    </div>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/Contact/DeleteContactDialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":32,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[862,875],"text":""},"desc":"Remove unused variable 'open'."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":44,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":44,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":54,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":54,"endColumn":36},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":86,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":86,"endColumn":69,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2213,2213],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2213,2213],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":87,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":87,"endColumn":76,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2282,2282],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2282,2282],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":95,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":95,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'error' is not defined.","line":95,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":95,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `error` typed value.","line":95,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":95,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":101,"column":53,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":101,"endColumn":55},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":124,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":124,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":124,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":139,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":139,"endColumn":49},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":141,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":141,"endColumn":34,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3629,3629],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3629,3629],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":148,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":148,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'open' is not defined.","line":161,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":161,"endColumn":28}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react'\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport { Separator } from '@/components/ui/separator'\nimport { \n  Trash2, \n  AlertTriangle, \n  FileText, \n  MessageSquare, \n  Calendar,\n  Target,\n  Loader2\n} from 'lucide-react'\nimport { useToast } from '@/hooks/use-toast'\nimport type { Contact } from './ContactsTable'\n\ninterface DeleteContactDialogProps {\n  contact: Contact | null\n  open: boolean\n  onOpenChange: (open: boolean) => void\n}\n\ninterface CascadeInfo {\n  interactions: number\n  goals: number\n  documents: number\n  calendarEvents: number\n  voiceNotes: number\n  photos: number\n}\n\nconst getInitials = (name: string) => {\n  return (\n    name\n      ?.split(' ')\n      .map((n) => n[0])\n      .join('')\n      .toUpperCase() || '?'\n  )\n}\n\nexport function DeleteContactDialog({\n  contact,\n  \n  onOpenChange\n}: DeleteContactDialogProps) {\n  const [cascadeInfo, setCascadeInfo] = useState<CascadeInfo | null>(null)\n  const [isLoadingCascade, setIsLoadingCascade] = useState(false)\n  const queryClient = useQueryClient()\n  const { toast } = useToast()\n\n  const deleteMutation = useMutation({\n    mutationFn: async (contactId: string) => {\n      const response = await fetch(`/api/contacts/${contactId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      })\n\n      if (!response.ok) {\n        const error = await response.json() as { message?: string }\n        throw new Error(error.message ?? 'Failed to delete contact')\n      }\n\n      return response.json() as Promise<{ success: boolean }>\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Contact deleted',\n        description: 'The contact and all associated data have been permanently deleted.',\n      })\n      \n      queryClient.invalidateQueries({ queryKey: ['/api/contacts'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] })\n      \n      onOpenChange(false)\n      setCascadeInfo(null)\n    },\n    onError: () => {\n      toast({\n        title: 'Failed to delete contact',\n        description: error.message,\n        variant: 'destructive'\n      })\n    }\n  })\n\n  const loadCascadeInfo = async (contactId: string) => {\n    setIsLoadingCascade(true)\n    try {\n      const response = await fetch(`/api/contacts/${contactId}/cascade-info`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      })\n\n      if (response.ok) {\n        const data = await response.json() as CascadeInfo\n        setCascadeInfo(data)\n      } else {\n        // If endpoint doesn't exist, show default info\n        setCascadeInfo({\n          interactions: 0,\n          goals: 0,\n          documents: 0,\n          calendarEvents: 0,\n          voiceNotes: 0,\n          photos: 0\n        })\n      }\n    } catch (error) {\n      // Failed to load cascade info\n      setCascadeInfo({\n        interactions: 0,\n        goals: 0,\n        documents: 0,\n        calendarEvents: 0,\n        voiceNotes: 0,\n        photos: 0\n      })\n    } finally {\n      setIsLoadingCascade(false)\n    }\n  }\n\n  const handleOpenChange = (newOpen: boolean) => {\n    if (newOpen && contact && !cascadeInfo) {\n      loadCascadeInfo(contact.id)\n    } else if (!newOpen) {\n      setCascadeInfo(null)\n    }\n    onOpenChange(newOpen)\n  }\n\n  const handleDelete = () => {\n    if (contact) {\n      deleteMutation.mutate(contact.id)\n    }\n  }\n\n  if (!contact) return null\n\n  const totalRelatedItems = cascadeInfo \n    ? (Object.values(cascadeInfo) as number[]).reduce((sum: number, count: number) => sum + count, 0)\n    : 0\n\n  return (\n    <AlertDialog open={open} onOpenChange={handleOpenChange}>\n      <AlertDialogContent className=\"sm:max-w-lg\">\n        <AlertDialogHeader>\n          <AlertDialogTitle className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-5 w-5 text-destructive\" />\n            Delete Contact\n          </AlertDialogTitle>\n          <AlertDialogDescription>\n            This action cannot be undone. This will permanently delete the contact\n            and all associated data.\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Contact Info */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-4\">\n                <Avatar className=\"h-12 w-12\">\n                  <AvatarImage src={contact.avatarUrl} alt={contact.name} />\n                  <AvatarFallback>\n                    {getInitials(contact.name)}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-semibold\">{contact.name}</h4>\n                  <p className=\"text-sm text-muted-foreground\">{contact.email}</p>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    {contact.lifecycleStage && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {contact.lifecycleStage.replace('_', ' ')}\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Cascade Information */}\n          {isLoadingCascade ? (\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-center py-4\">\n                  <Loader2 className=\"h-6 w-6 animate-spin text-muted-foreground\" />\n                  <span className=\"ml-2 text-sm text-muted-foreground\">\n                    Checking related data...\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          ) : cascadeInfo && totalRelatedItems > 0 ? (\n            <Card className=\"border-destructive/20 bg-destructive/5\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start gap-3\">\n                  <AlertTriangle className=\"h-5 w-5 text-destructive flex-shrink-0 mt-0.5\" />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium text-destructive mb-2\">\n                      Warning: Related Data Will Be Deleted\n                    </h4>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      This contact has {totalRelatedItems} related item{totalRelatedItems !== 1 ? 's' : ''} that will also be permanently deleted:\n                    </p>\n                    \n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                      {cascadeInfo.interactions > 0 && (\n                        <div className=\"flex items-center gap-2\">\n                          <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n                          <span>{cascadeInfo.interactions} interaction{cascadeInfo.interactions !== 1 ? 's' : ''}</span>\n                        </div>\n                      )}\n                      {cascadeInfo.calendarEvents > 0 && (\n                        <div className=\"flex items-center gap-2\">\n                          <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                          <span>{cascadeInfo.calendarEvents} calendar event{cascadeInfo.calendarEvents !== 1 ? 's' : ''}</span>\n                        </div>\n                      )}\n                      {cascadeInfo.goals > 0 && (\n                        <div className=\"flex items-center gap-2\">\n                          <Target className=\"h-4 w-4 text-muted-foreground\" />\n                          <span>{cascadeInfo.goals} goal{cascadeInfo.goals !== 1 ? 's' : ''}</span>\n                        </div>\n                      )}\n                      {cascadeInfo.documents > 0 && (\n                        <div className=\"flex items-center gap-2\">\n                          <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                          <span>{cascadeInfo.documents} document{cascadeInfo.documents !== 1 ? 's' : ''}</span>\n                        </div>\n                      )}\n                      {cascadeInfo.voiceNotes > 0 && (\n                        <div className=\"flex items-center gap-2\">\n                          <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n                          <span>{cascadeInfo.voiceNotes} voice note{cascadeInfo.voiceNotes !== 1 ? 's' : ''}</span>\n                        </div>\n                      )}\n                      {cascadeInfo.photos > 0 && (\n                        <div className=\"flex items-center gap-2\">\n                          <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                          <span>{cascadeInfo.photos} photo{cascadeInfo.photos !== 1 ? 's' : ''}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ) : cascadeInfo && totalRelatedItems === 0 ? (\n            <Card className=\"border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-900/20\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"h-5 w-5 rounded-full bg-green-500 flex items-center justify-center\">\n                    <div className=\"h-2 w-2 rounded-full bg-white\" />\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-green-800 dark:text-green-200\">\n                      No related data found\n                    </p>\n                    <p className=\"text-xs text-green-600 dark:text-green-400\">\n                      This contact can be safely deleted without affecting other records.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ) : null}\n\n          <Separator />\n\n          <div className=\"text-sm text-muted-foreground\">\n            <p className=\"font-medium mb-1\">This will permanently delete:</p>\n            <ul className=\"list-disc list-inside space-y-1 text-xs\">\n              <li>Contact information and profile</li>\n              <li>All interaction history</li>\n              <li>Goals and progress tracking</li>\n              <li>Uploaded documents and photos</li>\n              <li>Calendar events and meeting notes</li>\n              <li>All associated metadata</li>\n            </ul>\n          </div>\n        </div>\n\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={deleteMutation.isPending}>\n            Cancel\n          </AlertDialogCancel>\n          <AlertDialogAction\n            onClick={handleDelete}\n            disabled={deleteMutation.isPending}\n            className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n          >\n            {deleteMutation.isPending ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Deleting...\n              </>\n            ) : (\n              <>\n                <Trash2 className=\"mr-2 h-4 w-4\" />\n                Delete Contact\n              </>\n            )}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/Contact/EditContactModal.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":30,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[923,936],"text":""},"desc":"Remove unused variable 'open'."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":49,"column":21,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":49,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":104,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":104,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":109,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":109,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":117,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":117,"endColumn":33},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":140,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":140,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4015,4017],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":141,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":141,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4051,4053],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":142,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":142,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4087,4089],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":143,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":143,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4141,4143],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":144,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":144,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4184,4186],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":146,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":146,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4239,4241],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":176,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":176,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":177,"column":9,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":177,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatarUrl on an `any` value.","line":177,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":177,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `Promise<any>`.","line":197,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":197,"endColumn":29},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":200,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":200,"endColumn":69,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5808,5808],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[5808,5808],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":211,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":211,"endColumn":89},{"ruleId":"no-undef","severity":2,"message":"'error' is not defined.","line":211,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":211,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'error' is not defined.","line":211,"column":47,"nodeType":"Identifier","messageId":"undef","endLine":211,"endColumn":52},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `error` typed value.","line":211,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":211,"endColumn":60},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":217,"column":24,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":217,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":252,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":252,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":252,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":252,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":263,"column":72,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":263,"endColumn":74},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":266,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":266,"endColumn":30,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[7503,7503],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[7503,7503],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":270,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":270,"endColumn":53},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":274,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":274,"endColumn":49},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":278,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":278,"endColumn":30,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[7770,7770],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[7770,7770],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":282,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":282,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":290,"column":21,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":290,"endColumn":23},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":301,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":301,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8237,8239],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":306,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":306,"endColumn":39},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":309,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":309,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8426,8428],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":313,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":313,"endColumn":51},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":327,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":327,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8807,8809],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-undef","severity":2,"message":"'open' is not defined.","line":334,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":334,"endColumn":23}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useCallback, useEffect } from 'react'\nimport { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Badge } from '@/components/ui/badge'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog'\nimport { \n  Upload, \n  X, \n   \n  Loader2,\n  Plus\n} from 'lucide-react'\nimport { useToast } from '@/hooks/use-toast'\nimport type { Contact } from './ContactsTable'\n\ninterface EditContactModalProps {\n  contact: Contact | null\n  open: boolean\n  onOpenChange: (open: boolean) => void\n}\n\ninterface ContactUpdateData {\n  name: string\n  email?: string\n  phone?: string\n  notes?: string\n  lifecycleStage?: Contact['lifecycleStage']\n  tags?: Array<{id: string, name: string, color: string}>\n}\n\n// Image processing utilities\nconst convertToWebP = (file: File): Promise<File> => {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas')\n    const ctx = canvas.getContext('2d')\n    const img = new Image()\n    \n    img.onload = () => {\n      // Calculate dimensions to maintain aspect ratio\n      const maxSize = 400\n      let { width, height } = img\n      \n      if (width > height) {\n        if (width > maxSize) {\n          height = (height * maxSize) / width\n          width = maxSize\n        }\n      } else {\n        if (height > maxSize) {\n          width = (width * maxSize) / height\n          height = maxSize\n        }\n      }\n      \n      canvas.width = width\n      canvas.height = height\n      \n      // Draw and convert to WebP\n      ctx?.drawImage(img, 0, 0, width, height)\n      \n      canvas.toBlob(\n        (blob) => {\n          if (blob && blob.size <= 250 * 1024) { // 250KB limit\n            const webpFile = new File([blob], file.name.replace(/\\.[^/.]+$/, '.webp'), {\n              type: 'image/webp'\n            })\n            resolve(webpFile)\n          } else if (blob) {\n            // If still too large, reduce quality\n            canvas.toBlob(\n              (smallerBlob) => {\n                if (smallerBlob) {\n                  const webpFile = new File([smallerBlob], file.name.replace(/\\.[^/.]+$/, '.webp'), {\n                    type: 'image/webp'\n                  })\n                  resolve(webpFile)\n                } else {\n                  reject(new Error('Failed to compress image'))\n                }\n              },\n              'image/webp',\n              0.7\n            )\n          } else {\n            reject(new Error('Failed to convert image'))\n          }\n        },\n        'image/webp',\n        0.9\n      )\n    }\n    \n    img.onerror = () => reject(new Error('Failed to load image'))\n    img.src = URL.createObjectURL(file)\n  })\n}\n\nconst getInitials = (name: string) => {\n  return name\n    ?.split(' ')\n    .map((n) => n[0])\n    .join('')\n    .toUpperCase() || '?'\n}\n\nexport function EditContactModal({ contact,  onOpenChange }: EditContactModalProps) {\n  const [formData, setFormData] = useState<ContactUpdateData>({\n    name: '',\n    email: '',\n    phone: '',\n    notes: '',\n    lifecycleStage: 'discovery',\n    tags: []\n  })\n  \n  const [imageFile, setImageFile] = useState<File | null>(null)\n  const [imagePreview, setImagePreview] = useState<string>('')\n  const [uploadingImage, setUploadingImage] = useState(false)\n  const [newTagName, setNewTagName] = useState('')\n  const fileInputRef = useRef<HTMLInputElement>(null)\n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Initialize form data when contact changes\n  useEffect(() => {\n    if (contact) {\n      setFormData({\n        name: contact.name || '',\n        email: contact.email || '',\n        phone: contact.phone || '',\n        notes: contact.notes || '',\n        lifecycleStage: contact.lifecycleStage || 'discovery',\n        tags: contact.tags || []\n      })\n      setImagePreview(contact.avatarUrl || '')\n      setImageFile(null)\n    }\n  }, [contact])\n\n  // Update contact mutation\n  const updateContactMutation = useMutation({\n    mutationFn: async (data: ContactUpdateData & { imageFile?: File }) => {\n      if (!contact) throw new Error('No contact selected')\n      \n      let avatarUrl = contact.avatarUrl\n      \n      // Upload image if provided\n      if (data.imageFile) {\n        const formData = new FormData()\n        formData.append('image', data.imageFile)\n        formData.append('contactId', contact.id)\n        \n        const imageResponse = await fetch('/api/contacts/upload-photo', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          },\n          body: formData,\n        })\n        \n        if (!imageResponse.ok) {\n          throw new Error('Failed to upload image')\n        }\n        \n        const imageResult = await imageResponse.json()\n        avatarUrl = imageResult.avatarUrl\n      }\n      \n      // Update contact data\n      const updateData = { ...data, avatarUrl }\n      delete updateData.imageFile\n      \n      const response = await fetch(`/api/contacts/${contact.id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify(updateData),\n      })\n      \n      if (!response.ok) {\n        throw new Error('Failed to update contact')\n      }\n      \n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/contacts'] })\n      toast({\n        title: 'Contact updated',\n        description: 'Contact has been successfully updated.',\n      })\n      onOpenChange(false)\n      resetForm()\n    },\n    onError: () => {\n      toast({\n        title: 'Update failed',\n        description: error instanceof Error ? error.message : 'Failed to update contact',\n        variant: 'destructive',\n      })\n    },\n  })\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      email: '',\n      phone: '',\n      notes: '',\n      lifecycleStage: 'discovery',\n      tags: []\n    })\n    setImageFile(null)\n    setImagePreview('')\n    setNewTagName('')\n  }\n\n  const handleImageSelect = useCallback(async (file: File) => {\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: 'Invalid file type',\n        description: 'Please select an image file.',\n        variant: 'destructive'\n      })\n      return\n    }\n\n    setUploadingImage(true)\n    \n    try {\n      const webpFile = await convertToWebP(file)\n      setImageFile(webpFile)\n      setImagePreview(URL.createObjectURL(webpFile))\n      \n      toast({\n        title: 'Image processed',\n        description: `Image converted to WebP format (${Math.round(webpFile.size / 1024)}KB)`,\n      })\n    } catch (error) {\n      toast({\n        title: 'Image processing failed',\n        description: 'Failed to process the image. Please try another file.',\n        variant: 'destructive'\n      })\n    } finally {\n      setUploadingImage(false)\n    }\n  }, [toast])\n\n  const handleFileInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (file) {\n      handleImageSelect(file)\n    }\n  }\n\n  const handleDragOver = (event: React.DragEvent) => {\n    event.preventDefault()\n  }\n\n  const handleDrop = (event: React.DragEvent) => {\n    event.preventDefault()\n    const file = event.dataTransfer.files[0]\n    if (file) {\n      handleImageSelect(file)\n    }\n  }\n\n  const removeImage = () => {\n    setImageFile(null)\n    setImagePreview('')\n    if (fileInputRef.current) {\n      fileInputRef.current.value = ''\n    }\n  }\n\n  const addTag = () => {\n    if (!newTagName.trim()) return\n    \n    const newTag = {\n      id: `temp_${Date.now()}`,\n      name: newTagName.trim(),\n      color: '#3b82f6' // Default blue color\n    }\n    \n    setFormData(prev => ({\n      ...prev,\n      tags: [...(prev.tags || []), newTag]\n    }))\n    setNewTagName('')\n  }\n\n  const removeTag = (tagId: string) => {\n    setFormData(prev => ({\n      ...prev,\n      tags: prev.tags?.filter(tag => tag.id !== tagId) || []\n    }))\n  }\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault()\n    \n    if (!formData.name.trim()) {\n      toast({\n        title: 'Name required',\n        description: 'Please enter a contact name.',\n        variant: 'destructive'\n      })\n      return\n    }\n    \n    updateContactMutation.mutate({\n      ...formData,\n      imageFile: imageFile || undefined\n    })\n  }\n\n  if (!contact) return null\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit Contact</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Image Upload Section */}\n          <div className=\"space-y-4\">\n            <Label>Profile Picture</Label>\n            <div className=\"flex items-center gap-4\">\n              <Avatar className=\"h-20 w-20\">\n                <AvatarImage src={imagePreview} alt={formData.name} />\n                <AvatarFallback className=\"text-lg\">\n                  {getInitials(formData.name)}\n                </AvatarFallback>\n              </Avatar>\n              \n              <div className=\"flex-1\">\n                <div\n                  className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center hover:border-muted-foreground/50 transition-colors cursor-pointer\"\n                  onDragOver={handleDragOver}\n                  onDrop={handleDrop}\n                  onClick={() => fileInputRef.current?.click()}\n                >\n                  {uploadingImage ? (\n                    <div className=\"flex items-center justify-center\">\n                      <Loader2 className=\"h-6 w-6 animate-spin mr-2\" />\n                      Processing image...\n                    </div>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      <Upload className=\"h-8 w-8 mx-auto text-muted-foreground\" />\n                      <div className=\"text-sm\">\n                        <span className=\"font-medium\">Click to upload</span> or drag and drop\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        PNG, JPG, GIF up to 10MB (will be converted to WebP and optimized)\n                      </div>\n                    </div>\n                  )}\n                </div>\n                \n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleFileInput}\n                  className=\"hidden\"\n                />\n                \n                {(imagePreview || imageFile) && (\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={removeImage}\n                    className=\"mt-2\"\n                  >\n                    <X className=\"h-4 w-4 mr-1\" />\n                    Remove Image\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Basic Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Name *</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                placeholder=\"Contact name\"\n                required\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                placeholder=\"contact@example.com\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"phone\">Phone</Label>\n              <Input\n                id=\"phone\"\n                value={formData.phone}\n                onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n                placeholder=\"+1 (555) 123-4567\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"lifecycleStage\">Lifecycle Stage</Label>\n              <Select\n                value={formData.lifecycleStage}\n                onValueChange={(value) => setFormData(prev => ({ \n                  ...prev, \n                  lifecycleStage: value as Contact['lifecycleStage']\n                }))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select lifecycle stage\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"discovery\">Discovery</SelectItem>\n                  <SelectItem value=\"curious\">Curious</SelectItem>\n                  <SelectItem value=\"new_client\">New Client</SelectItem>\n                  <SelectItem value=\"core_client\">Core Client</SelectItem>\n                  <SelectItem value=\"ambassador\">Ambassador</SelectItem>\n                  <SelectItem value=\"needs_reconnecting\">Needs Reconnecting</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  <SelectItem value=\"collaborator\">Collaborator</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Tags Section */}\n          <div className=\"space-y-2\">\n            <Label>Tags</Label>\n            <div className=\"flex flex-wrap gap-2 mb-2\">\n              {formData.tags?.map((tag) => (\n                <Badge\n                  key={tag.id}\n                  variant=\"secondary\"\n                  className=\"flex items-center gap-1\"\n                  style={{ backgroundColor: tag.color + '20', color: tag.color, borderColor: tag.color }}\n                >\n                  {tag.name}\n                  <button\n                    type=\"button\"\n                    onClick={() => removeTag(tag.id)}\n                    className=\"ml-1 hover:bg-destructive/20 rounded-full p-0.5\"\n                  >\n                    <X className=\"h-3 w-3\" />\n                  </button>\n                </Badge>\n              ))}\n            </div>\n            <div className=\"flex gap-2\">\n              <Input\n                value={newTagName}\n                onChange={(e) => setNewTagName(e.target.value)}\n                placeholder=\"Add a tag...\"\n                onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}\n              />\n              <Button type=\"button\" onClick={addTag} variant=\"outline\" size=\"sm\">\n                <Plus className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Notes */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"notes\">Notes</Label>\n            <Textarea\n              id=\"notes\"\n              value={formData.notes}\n              onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n              placeholder=\"Add notes about this contact...\"\n              rows={4}\n            />\n          </div>\n\n          <DialogFooter>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={updateContactMutation.isPending || uploadingImage}\n            >\n              {updateContactMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                  Updating...\n                </>\n              ) : (\n                'Update Contact'\n              )}\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/Contact/TagSelectionDialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":26,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[681,694],"text":""},"desc":"Remove unused variable 'open'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'tag' is defined but never used.","line":27,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":55,"suggestions":[{"messageId":"removeVar","data":{"varName":"tag"},"fix":{"range":[723,759],"text":""},"desc":"Remove unused variable 'tag'."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":45,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":45,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `Promise<any>`.","line":68,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":68,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":85,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":85,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":86,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":86,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":86,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":45},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":86,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":86,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2398,2400],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `Promise<any>`.","line":90,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":90,"endColumn":30},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":93,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":93,"endColumn":18,"suggestions":[{"fix":{"range":[2551,2600],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":94,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":94,"endColumn":66,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2607,2607],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2607,2607],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":102,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":102,"endColumn":41},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":106,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":106,"endColumn":20,"suggestions":[{"fix":{"range":[2991,3035],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":115,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":115,"endColumn":48},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":120,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":120,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":147,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":147,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'open' is not defined.","line":155,"column":10,"nodeType":"Identifier","messageId":"undef","endLine":155,"endColumn":14},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has an unnecessary dependency: 'open'. Either exclude it or remove the dependency array. Outer scope values like 'open' aren't valid dependencies because mutating them doesn't re-render the component.","line":158,"column":6,"nodeType":"ArrayExpression","endLine":158,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[4304,4310],"text":"[]"}}]},{"ruleId":"no-undef","severity":2,"message":"'open' is not defined.","line":158,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":158,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'open' is not defined.","line":161,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":161,"endColumn":23}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Plus, Check, X } from 'lucide-react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Tag {\n  id: string;\n  name: string;\n  color: string;\n}\n\ninterface TagSelectionDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onTagSelected: (tag: { name: string; color: string }) => void;\n  title: string;\n  description: string;\n}\n\nconst DEFAULT_COLORS = [\n  '#3b82f6', // blue\n  '#ef4444', // red\n  '#10b981', // emerald\n  '#f59e0b', // amber\n  '#8b5cf6', // violet\n  '#06b6d4', // cyan\n  '#84cc16', // lime\n  '#f97316', // orange\n  '#ec4899', // pink\n  '#6b7280', // gray\n];\n\nexport function TagSelectionDialog({\n  \n  onOpenChange,\n  onTagSelected,\n  title,\n  description,\n}: TagSelectionDialogProps) {\n  const [isCreatingNew, setIsCreatingNew] = useState(false);\n  const [newTagName, setNewTagName] = useState('');\n  const [selectedColor, setSelectedColor] = useState(DEFAULT_COLORS[0]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch existing tags\n  const { data: tags = [] } = useQuery<Tag[]>({\n    queryKey: ['/api/tags'],\n    queryFn: async () => {\n      const response = await fetch('/api/tags', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch tags');\n      return response.json();\n    },\n  });\n\n  // Create new tag mutation\n  const createTagMutation = useMutation({\n    mutationFn: async (tagData: { name: string; color: string }) => {\n      const response = await fetch('/api/tags', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify(tagData),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        const errorMessage = errorData.error || 'Failed to create tag';\n        throw new Error(errorMessage);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (newTag) => {\n      console.log('Tag created successfully:', newTag);\n      queryClient.invalidateQueries({ queryKey: ['/api/tags'] });\n      onTagSelected(newTag);\n      setIsCreatingNew(false);\n      setNewTagName('');\n      setSelectedColor(DEFAULT_COLORS[0]);\n      onOpenChange(false);\n      toast({\n        title: 'Tag created',\n        description: `Tag \"${newTag.name}\" has been created and selected.`,\n      });\n    },\n    onError: (error) => {\n      console.error('Tag creation error:', error);\n      toast({\n        title: 'Error creating tag',\n        description: error instanceof Error ? error.message : 'Failed to create new tag. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleExistingTagSelect = (tag: Tag) => {\n    onTagSelected(tag);\n    onOpenChange(false);\n  };\n\n  const handleCreateNewTag = () => {\n    if (!newTagName.trim()) {\n      toast({\n        title: 'Tag name required',\n        description: 'Please enter a name for the new tag.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    // Check if tag with same name already exists\n    const existingTag = tags.find(tag => tag.name.toLowerCase() === newTagName.trim().toLowerCase());\n    if (existingTag) {\n      toast({\n        title: 'Tag already exists',\n        description: `A tag with the name \"${newTagName}\" already exists.`,\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    createTagMutation.mutate({\n      name: newTagName.trim(),\n      color: selectedColor,\n    });\n  };\n\n  const resetDialog = () => {\n    setIsCreatingNew(false);\n    setNewTagName('');\n    setSelectedColor(DEFAULT_COLORS[0]);\n  };\n\n  // Reset dialog state when it closes\n  useEffect(() => {\n    if (!open) {\n      resetDialog();\n    }\n  }, [open]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\" onOpenAutoFocus={(e) => {\n        // Prevent auto-focus to avoid accessibility issues\n        e.preventDefault();\n      }}>\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n          <DialogDescription>{description}</DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {!isCreatingNew ? (\n            <>\n              {/* Existing Tags */}\n              <div className=\"space-y-3\">\n                <Label>Select an existing tag:</Label>\n                <div className=\"max-h-60 overflow-y-auto space-y-2\">\n                  {tags.length === 0 ? (\n                    <p className=\"text-sm text-muted-foreground\">No tags available. Create a new one below.</p>\n                  ) : (\n                    tags.map((tag) => (\n                      <button\n                        key={tag.id}\n                        onClick={() => handleExistingTagSelect(tag)}\n                        className=\"w-full p-2 text-left rounded-md border hover:bg-muted transition-colors\"\n                      >\n                        <Badge\n                          variant=\"secondary\"\n                          style={{ backgroundColor: tag.color + '20', color: tag.color, borderColor: tag.color }}\n                        >\n                          {tag.name}\n                        </Badge>\n                      </button>\n                    ))\n                  )}\n                </div>\n              </div>\n\n              {/* Create New Tag Button */}\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsCreatingNew(true)}\n                className=\"w-full\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create New Tag\n              </Button>\n            </>\n          ) : (\n            <>\n              {/* Create New Tag Form */}\n              <div className=\"space-y-3\">\n                <Label htmlFor=\"tag-name\">Tag Name</Label>\n                <Input\n                  id=\"tag-name\"\n                  value={newTagName}\n                  onChange={(e) => setNewTagName(e.target.value)}\n                  placeholder=\"Enter tag name...\"\n                  autoFocus\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      handleCreateNewTag();\n                    }\n                  }}\n                />\n              </div>\n\n              <div className=\"space-y-3\">\n                <Label>Tag Color</Label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {DEFAULT_COLORS.map((color) => (\n                    <button\n                      key={color}\n                      onClick={() => setSelectedColor(color)}\n                      className={`w-8 h-8 rounded-full border-2 transition-all ${\n                        selectedColor === color\n                          ? 'border-foreground scale-110'\n                          : 'border-muted hover:scale-105'\n                      }`}\n                      style={{ backgroundColor: color }}\n                    />\n                  ))}\n                </div>\n                \n                {/* Preview */}\n                {newTagName && (\n                  <div className=\"pt-2\">\n                    <Label className=\"text-sm text-muted-foreground\">Preview:</Label>\n                    <div className=\"mt-1\">\n                      <Badge\n                        variant=\"secondary\"\n                        style={{ \n                          backgroundColor: selectedColor + '20', \n                          color: selectedColor, \n                          borderColor: selectedColor \n                        }}\n                      >\n                        {newTagName}\n                      </Badge>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n\n        <DialogFooter>\n          {isCreatingNew ? (\n            <>\n              <Button variant=\"outline\" onClick={() => setIsCreatingNew(false)}>\n                <X className=\"h-4 w-4 mr-2\" />\n                Cancel\n              </Button>\n              <Button \n                onClick={handleCreateNewTag}\n                disabled={createTagMutation.isPending || !newTagName.trim()}\n              >\n                <Check className=\"h-4 w-4 mr-2\" />\n                Create Tag\n              </Button>\n            </>\n          ) : (\n            <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Close\n            </Button>\n          )}\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/Dashboard/AIAssistant.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":19,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":19,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `Promise<any>`.","line":47,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":47,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":52,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":52,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .response on an `any` value.","line":52,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":31},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":76,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":76,"endColumn":23,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2556,2556],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2556,2556],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":93,"column":26,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":93,"endColumn":28},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":108,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":108,"endColumn":53},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":115,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":115,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":128,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":128,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":134,"column":7,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":134,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":287,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10164,10167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10164,10167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .startTime on an `any` value.","line":288,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":288,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .endTime on an `any` value.","line":289,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":289,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .endTime on an `any` value.","line":289,"column":64,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":289,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":290,"column":23,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":290,"endColumn":143},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .attendees on an `any` value.","line":290,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":290,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .attendees on an `any` value.","line":290,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":290,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .attendees on an `any` value.","line":290,"column":109,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":290,"endColumn":118},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .attendees on an `any` value.","line":290,"column":128,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":290,"endColumn":137},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":293,"column":29,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":293,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":293,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":293,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .summary on an `any` value.","line":297,"column":82,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":297,"endColumn":89},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":297,"column":90,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":297,"endColumn":92,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10838,10840],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calendarName on an `any` value.","line":298,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":298,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calendarName on an `any` value.","line":301,"column":84,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":301,"endColumn":96},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calendarColor on an `any` value.","line":305,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":305,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":308,"column":36,"nodeType":"Property","messageId":"anyAssignment","endLine":308,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .calendarColor on an `any` value.","line":308,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":308,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .location on an `any` value.","line":323,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":323,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .location on an `any` value.","line":326,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":326,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .description on an `any` value.","line":331,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":331,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .description on an `any` value.","line":333,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":333,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":338,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":338,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":342,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":342,"endColumn":117},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":342,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":342,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":342,"column":28,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":342,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .slice on an `any` value.","line":342,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":342,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `any` value.","line":342,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":342,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":342,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":342,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13164,13167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13164,13167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":342,"column":73,"nodeType":"LogicalExpression","messageId":"unsafeReturn","endLine":342,"endColumn":111},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":342,"column":82,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":342,"endColumn":87},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":342,"column":88,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":342,"endColumn":90,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13187,13189],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .displayName on an `any` value.","line":342,"column":100,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":342,"endColumn":111},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .join on an `any` value.","line":342,"column":113,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":342,"endColumn":117},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":343,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":343,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":343,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":343,"endColumn":73}],"suppressedMessages":[],"errorCount":40,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useVoiceInput } from \"@/hooks/useVoiceInput\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Mic, MicOff, Send, Bot, Calendar, BarChart3, RefreshCw, Clock, MapPin, Users } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface Message {\n  id: string;\n  content: string;\n  isUser: boolean;\n  timestamp: Date;\n}\n\nexport default function AIAssistant() {\n  const { user } = useAuth();\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: \"1\",\n      content: \"Hello! I've analyzed your recent client interactions. I can help you with client insights, scheduling suggestions, and progress tracking. How can I assist you today?\",\n      isUser: false,\n      timestamp: new Date(),\n    },\n  ]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  \n  // Fetch upcoming calendar events\n  const { data: upcomingEvents, isLoading: eventsLoading, refetch: refetchEvents } = useQuery({\n    queryKey: ['/api/calendar/upcoming?limit=5'],\n  });\n  \n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  \n  const { isListening, startListening, stopListening, transcript } = useVoiceInput();\n\n  const chatMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/chat\", { \n        message,\n        context: { userId: user?.id }\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      const aiMessage: Message = {\n        id: Date.now().toString(),\n        content: data.response,\n        isUser: false,\n        timestamp: new Date(),\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    },\n    onError: () => {\n      const errorMessage: Message = {\n        id: Date.now().toString(),\n        content: \"I'm sorry, I encountered an error. Please try again or check your OpenAI API configuration.\",\n        isUser: false,\n        timestamp: new Date(),\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    },\n  });\n\n  const syncMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/sync/manual\", {});\n      return response;\n    },\n    onSuccess: () => {\n      // Refetch events after sync\n      refetchEvents();\n    },\n  });\n\n  useEffect(() => {\n    // Only scroll to bottom if there are more than the initial message\n    if (messages.length > 1) {\n      messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [messages]);\n\n  useEffect(() => {\n    if (transcript) {\n      setInputMessage(transcript);\n    }\n  }, [transcript]);\n\n  const sendMessage = () => {\n    if (!inputMessage.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      content: inputMessage,\n      isUser: true,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    chatMutation.mutate(inputMessage);\n    setInputMessage(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  const toggleVoiceInput = () => {\n    if (isListening) {\n      stopListening();\n    } else {\n      startListening();\n    }\n  };\n\n  const quickActions = [\n    {\n      title: \"Schedule Follow-up\",\n      description: \"Create follow-up appointments for clients\",\n      icon: Calendar,\n      action: () => setInputMessage(\"Help me schedule follow-up appointments for clients who need attention\"),\n    },\n    {\n      title: \"Generate Report\",\n      description: \"Create progress reports for clients\",\n      icon: BarChart3,\n      action: () => setInputMessage(\"Generate a summary report of client progress this week\"),\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* AI Assistant Chat */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-semibold\">AI Assistant</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n              <span className=\"text-xs text-green-600 dark:text-green-400\">Online</span>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          <div className=\"h-80 overflow-y-auto space-y-4 mb-4\">\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex items-start space-x-3 ${\n                  message.isUser ? \"justify-end\" : \"\"\n                }`}\n              >\n                {!message.isUser && (\n                  <div className=\"w-8 h-8 bg-teal-100 dark:bg-teal-800 rounded-full flex items-center justify-center shrink-0\">\n                    <Bot className=\"h-4 w-4 text-teal-600 dark:text-teal-300\" />\n                  </div>\n                )}\n                \n                <div\n                  className={`rounded-lg p-3 max-w-xs ${\n                    message.isUser\n                      ? \"bg-primary text-primary-foreground\"\n                      : \"bg-muted\"\n                  }`}\n                >\n                  <p className=\"text-sm\">{message.content}</p>\n                  <span className=\"text-xs opacity-70 mt-1 block\">\n                    {formatDistanceToNow(message.timestamp, { addSuffix: true })}\n                  </span>\n                </div>\n                \n                {message.isUser && (\n                  <img\n                    src={user?.picture ?? \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=32&h=32&fit=crop&crop=face\"}\n                    alt={user?.name ?? \"User\"}\n                    className=\"w-8 h-8 rounded-full shrink-0\"\n                  />\n                )}\n              </div>\n            ))}\n            \n            {chatMutation.isPending && (\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-8 h-8 bg-teal-100 dark:bg-teal-800 rounded-full flex items-center justify-center shrink-0\">\n                  <Bot className=\"h-4 w-4 text-teal-600 dark:text-teal-300\" />\n                </div>\n                <div className=\"bg-muted rounded-lg p-3\">\n                  <div className=\"flex space-x-1\">\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" />\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: \"0.1s\" }} />\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: \"0.2s\" }} />\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            <div ref={messagesEndRef} />\n          </div>\n          \n          <div className=\"flex space-x-2\">\n            <Input\n              value={inputMessage}\n              onChange={(e) => setInputMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Ask about client progress...\"\n              className=\"flex-1\"\n              disabled={chatMutation.isPending}\n            />\n            <Button\n              onClick={toggleVoiceInput}\n              variant={isListening ? \"destructive\" : \"outline\"}\n              size=\"icon\"\n              className={isListening ? \"animate-voice-active\" : \"\"}\n            >\n              {isListening ? <MicOff className=\"h-4 w-4\" /> : <Mic className=\"h-4 w-4\" />}\n            </Button>\n            <Button\n              onClick={sendMessage}\n              disabled={!inputMessage.trim() || chatMutation.isPending}\n              size=\"icon\"\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold\">Quick Actions</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {quickActions.map((action, index) => (\n            <Button\n              key={index}\n              variant=\"ghost\"\n              className=\"w-full justify-start h-auto p-3\"\n              onClick={action.action}\n              disabled={action.title === \"Sync Data\" && syncMutation.isPending}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <action.icon className=\"h-5 w-5 text-primary\" />\n                <div className=\"text-left\">\n                  <span className=\"font-medium block\">{action.title}</span>\n                  <p className=\"text-sm text-muted-foreground\">{action.description}</p>\n                </div>\n              </div>\n            </Button>\n          ))}\n        </CardContent>\n      </Card>\n      \n      {/* Upcoming Sessions */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-semibold\">Upcoming Sessions</CardTitle>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => syncMutation.mutate()}\n              disabled={syncMutation.isPending}\n              className=\"h-8 px-2\"\n            >\n              <RefreshCw className={`h-3 w-3 ${syncMutation.isPending ? 'animate-spin' : ''}`} />\n              <span className=\"ml-1 text-xs\">Sync</span>\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {eventsLoading ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <RefreshCw className=\"h-4 w-4 animate-spin mx-auto mb-2\" />\n              Loading upcoming events...\n            </div>\n          ) : upcomingEvents && Array.isArray(upcomingEvents) && upcomingEvents.length > 0 ? (\n            <div className=\"space-y-3\">\n              {upcomingEvents.map((event: any) => {\n                const startTime = new Date(event.startTime);\n                const endTime = event.endTime ? new Date(event.endTime) : null;\n                const attendees = event.attendees ? (typeof event.attendees === 'string' ? JSON.parse(event.attendees) : event.attendees) : [];\n                \n                return (\n                  <div key={event.id} className=\"border rounded-lg p-3 space-y-2\">\n                    {/* Calendar and Title */}\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-sm leading-tight\">{event.summary || 'Untitled Event'}</h4>\n                        {event.calendarName && (\n                          <div className=\"flex items-center gap-1 mt-1\">\n                            <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n                            <span className=\"text-xs text-muted-foreground\">{event.calendarName}</span>\n                          </div>\n                        )}\n                      </div>\n                      {event.calendarColor && (\n                        <div \n                          className=\"w-3 h-3 rounded-full shrink-0\" \n                          style={{ backgroundColor: event.calendarColor }}\n                        />\n                      )}\n                    </div>\n                    \n                    {/* Time */}\n                    <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                      <Clock className=\"h-3 w-3\" />\n                      <span>\n                        {startTime.toLocaleDateString()} at {startTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                        {endTime && ` - ${endTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`}\n                      </span>\n                    </div>\n                    \n                    {/* Location */}\n                    {event.location && (\n                      <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                        <MapPin className=\"h-3 w-3\" />\n                        <span className=\"break-words\">{event.location}</span>\n                      </div>\n                    )}\n                    \n                    {/* Description */}\n                    {event.description && (\n                      <div className=\"text-xs text-muted-foreground\">\n                        <p className=\"break-words line-clamp-2\">{event.description}</p>\n                      </div>\n                    )}\n                    \n                    {/* Attendees */}\n                    {attendees.length > 0 && (\n                      <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                        <Users className=\"h-3 w-3\" />\n                        <span className=\"break-words\">\n                          {attendees.slice(0, 2).map((attendee: any) => attendee.email || attendee.displayName).join(', ')}\n                          {attendees.length > 2 && ` +${attendees.length - 2} more`}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No upcoming sessions found. Sync your Google Calendar to see scheduled appointments.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/Dashboard/ContactCards.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":8,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[882,885],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[882,885],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":26,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":26,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .contact on an `any` value.","line":27,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":27,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .contact on an `any` value.","line":30,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1289,1292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1289,1292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":38,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":38,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .contact on an `any` value.","line":39,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .contact on an `any` value.","line":42,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":42,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2518,2521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2518,2521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":72,"column":22,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":72,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":72,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":77,"column":24,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":77,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .contact on an `any` value.","line":77,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":77,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .contact on an `any` value.","line":83,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .timestamp on an `any` value.","line":86,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .content on an `any` value.","line":90,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":90,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .type on an `any` value.","line":100,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":46}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function ContactCards() {\n  const { data: recentInteractions, isLoading: loadingInteractions } = useQuery({\n    queryKey: [\"/api/interactions/recent\"],\n    refetchInterval: 300000,\n  });\n\n  if (loadingInteractions) {\n    return (\n      <div className=\"space-y-6\">\n        <Card className=\"animate-pulse\">\n          <CardContent className=\"p-6\">\n            <div className=\"h-40 bg-muted rounded\" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const getStatusColor = (interaction: any) => {\n    if (!interaction.contact.lastContact) return \"bg-gray-500\";\n    \n    const daysSinceContact = Math.floor(\n      (Date.now() - new Date(interaction.contact.lastContact).getTime()) / (1000 * 60 * 60 * 24)\n    );\n    \n    if (daysSinceContact <= 1) return \"bg-green-500\";\n    if (daysSinceContact <= 7) return \"bg-yellow-500\";\n    return \"bg-red-500\";\n  };\n\n  const getStatusText = (interaction: any) => {\n    if (!interaction.contact.lastContact) return \"No Contact\";\n    \n    const daysSinceContact = Math.floor(\n      (Date.now() - new Date(interaction.contact.lastContact).getTime()) / (1000 * 60 * 60 * 24)\n    );\n    \n    if (daysSinceContact <= 1) return \"Recent Contact\";\n    if (daysSinceContact <= 7) return \"Follow Up Soon\";\n    return \"Needs Attention\";\n  };\n\n  const mockGoals = [\n    { title: \"Weight Management\", current: 8, target: 10, unit: \"lbs\" },\n    { title: \"Stress Reduction\", current: 7, target: 10, unit: \"sessions\" },\n    { title: \"Sleep Quality\", current: 6, target: 8, unit: \"weeks\" },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-semibold\">Recent Client Activity</CardTitle>\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-primary\">\n              View All\n            </Button>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          {recentInteractions && Array.isArray(recentInteractions) && recentInteractions.length > 0 ? (\n            recentInteractions.slice(0, 3).map((interaction: any) => (\n              <div\n                key={interaction.id}\n                className=\"flex items-start space-x-4 p-4 rounded-lg bg-muted/50 hover:bg-muted transition-colors cursor-pointer\"\n              >\n                <img\n                  src={`https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=48&h=48&fit=crop&crop=face&auto=format`}\n                  alt={interaction.contact.name}\n                  className=\"w-12 h-12 rounded-full\"\n                />\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-medium text-foreground\">\n                      {interaction.contact.name}\n                    </h4>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {formatDistanceToNow(new Date(interaction.timestamp), { addSuffix: true })}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {interaction.content}\n                  </p>\n                  <div className=\"flex items-center mt-2 space-x-4\">\n                    <div className=\"flex items-center space-x-1\">\n                      <div className={`w-2 h-2 ${getStatusColor(interaction)} rounded-full`} />\n                      <span className=\"text-xs text-muted-foreground\">\n                        {getStatusText(interaction)}\n                      </span>\n                    </div>\n                    <span className=\"text-xs text-muted-foreground\">\n                      Type: {interaction.type}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No recent interactions found. Start syncing your Google services to see client activity.\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">Client Progress Overview</h3>\n          \n          <Tabs defaultValue=\"overview\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"timeline\">Timeline</TabsTrigger>\n              <TabsTrigger value=\"goals\">Goals</TabsTrigger>\n              <TabsTrigger value=\"documents\">Documents</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"overview\" className=\"space-y-4 mt-6\">\n              {mockGoals.map((goal, index) => (\n                <div key={index}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-foreground\">\n                      {goal.title}\n                    </span>\n                    <span className=\"text-sm text-muted-foreground\">\n                      {goal.current}/{goal.target} {goal.unit}\n                    </span>\n                  </div>\n                  <Progress \n                    value={(goal.current / goal.target) * 100} \n                    className=\"h-2\"\n                  />\n                </div>\n              ))}\n            </TabsContent>\n            \n            <TabsContent value=\"timeline\" className=\"mt-6\">\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Timeline view will show chronological client interactions\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"goals\" className=\"mt-6\">\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Detailed goal tracking and management\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"documents\" className=\"mt-6\">\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Client documents and session notes\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/Dashboard/PhotoEnrichment.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":6,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":12,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":33},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":14,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":14,"endColumn":20,"suggestions":[{"fix":{"range":[532,580],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":19,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":20,"suggestions":[{"fix":{"range":[723,776],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":20,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":20,"endColumn":20,"suggestions":[{"fix":{"range":[785,842],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":22,"suggestions":[{"fix":{"range":[929,991],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":30,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":30,"endColumn":16,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1057,1057],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1057,1057],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { fetchPhotoEnrichmentStats, fetchUserProfile, startBatchEnrichment } from '../../api/photoEnrichmentApi';\nimport ConsentVerification from '../ConsentVerification';\nimport BatchEnrichmentControls from '../BatchEnrichmentControls';\n\nconst PhotoEnrichment = () => {\n  const [stats, setStats] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        console.log('PhotoEnrichment: Loading data...');\n        const [stats, profile] = await Promise.all([\n          fetchPhotoEnrichmentStats(),\n          fetchUserProfile(),\n        ]);\n        console.log('PhotoEnrichment: Stats loaded:', stats);\n        console.log('PhotoEnrichment: Profile loaded:', profile);\n        setStats(stats);\n        setProfile(profile);\n      } catch (error) {\n        console.error('PhotoEnrichment: Failed to load data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  if (loading) return (\n    <div className=\"p-4 border rounded-lg\">\n      <h2 className=\"text-lg font-semibold mb-2\">Photo Enrichment</h2>\n      <div>Loading...</div>\n    </div>\n  );\n\n  return (\n    <div className=\"p-4 border rounded-lg space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Photo Enrichment Admin</h2>\n      {!stats && !profile ? (\n        <div className=\"text-red-500\">Failed to load data. Check console for errors.</div>\n      ) : (\n        <>\n          <ConsentVerification profile={profile} />\n          <BatchEnrichmentControls stats={stats} startBatchEnrichment={startBatchEnrichment} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default PhotoEnrichment;\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/Dashboard/StatsCards.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":5,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":5,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe spread of an `any` value in an array.","line":14,"column":11,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":14,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":28,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":28,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[827,830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[827,830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .totalClients on an `any` value.","line":28,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":28,"endColumn":42},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":28,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":28,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[846,848],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":37,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":37,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1098,1101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1098,1101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .weeklySessions on an `any` value.","line":37,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":44},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":37,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":37,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1119,1121],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":46,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":46,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1368,1371],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1368,1371],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .achievedGoals on an `any` value.","line":46,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":43},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":46,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":46,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1388,1390],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1643,1646],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1643,1646],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .responseRate on an `any` value.","line":55,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":55,"endColumn":45},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":55,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":55,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1662,1664],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Users, Calendar, Trophy, TrendingUp } from \"lucide-react\";\n\nexport default function StatsCards() {\n  const { data: stats, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    refetchInterval: 300000, // Refetch every 5 minutes\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"h-20 bg-muted rounded\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const statCards = [\n    {\n      title: \"Total Clients\",\n      value: (stats as any)?.totalClients || 0,\n      change: \"+12%\",\n      changeText: \"vs last month\",\n      icon: Users,\n      iconBg: \"bg-teal-100 dark:bg-teal-800\",\n      iconColor: \"text-teal-600 dark:text-teal-300\",\n    },\n    {\n      title: \"Sessions This Week\",\n      value: (stats as any)?.weeklySessions || 0,\n      change: \"+8%\",\n      changeText: \"vs last week\",\n      icon: Calendar,\n      iconBg: \"bg-blue-100 dark:bg-blue-800\",\n      iconColor: \"text-blue-600 dark:text-blue-300\",\n    },\n    {\n      title: \"Goals Achieved\",\n      value: (stats as any)?.achievedGoals || 0,\n      change: \"+15%\",\n      changeText: \"vs last month\",\n      icon: Trophy,\n      iconBg: \"bg-green-100 dark:bg-green-800\",\n      iconColor: \"text-green-600 dark:text-green-300\",\n    },\n    {\n      title: \"Response Rate\",\n      value: `${(stats as any)?.responseRate || 0}%`,\n      change: \"+3%\",\n      changeText: \"vs last month\",\n      icon: TrendingUp,\n      iconBg: \"bg-orange-100 dark:bg-orange-800\",\n      iconColor: \"text-orange-600 dark:text-orange-300\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {statCards.map((stat, index) => (\n        <Card key={index} className=\"shadow-sm\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">\n                  {stat.title}\n                </p>\n                <p className=\"text-2xl font-bold text-foreground\">\n                  {stat.value}\n                </p>\n              </div>\n              <div className={`w-12 h-12 ${stat.iconBg} rounded-lg flex items-center justify-center`}>\n                <stat.icon className={`h-6 w-6 ${stat.iconColor}`} />\n              </div>\n            </div>\n            <div className=\"mt-4 flex items-center\">\n              <span className=\"text-green-500 text-sm font-medium\">{stat.change}</span>\n              <span className=\"text-muted-foreground text-sm ml-2\">{stat.changeText}</span>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/Layout/AppLayout.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":68,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":68,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":96,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":96,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":100,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":102,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2553,2556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2553,2556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2567,2570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2567,2570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":101,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":101,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastSync on an `any` value.","line":101,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastSync on an `any` value.","line":101,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastSync on an `any` value.","line":104,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":54},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":118,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":118,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3377,3380],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3377,3380],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":121,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":121,"endColumn":58},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":127,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":127,"endColumn":47},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":138,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":138,"endColumn":48},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":149,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":149,"endColumn":44},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":257,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":257,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8258,8260],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useAuth } from '@/contexts/AuthContext';\nimport { useLocation } from 'wouter';\nimport { useEffect } from 'react';\nimport { Link } from 'wouter';\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n} from '@/components/ui/sidebar';\nimport { Button } from '@/components/ui/button';\nimport { useQuery } from '@tanstack/react-query';\nimport { cn } from '@/lib/utils';\nimport logoPath from '@assets/logo_1753860249688.png';\nimport {\n  Home,\n  Users,\n  Bot,\n  Settings,\n  ChevronDown,\n  LogOut,\n  Monitor,\n  Sun,\n  Moon,\n  CheckSquare,\n} from 'lucide-react';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { useTheme } from '@/contexts/ThemeContext';\n\nconst navigation = [\n  { name: 'Dashboard', href: '/', icon: Home },\n  { name: 'Contacts', href: '/contacts', icon: Users },\n  { name: 'Tasks', href: '/tasks', icon: CheckSquare },\n  { name: 'Settings', href: '/settings', icon: Settings },\n];\n\nconst quickActions = [\n  { name: 'New Contact', href: '/contacts?new=true', icon: Users },\n  { name: 'AI Chat', href: '/assistant', icon: Bot },\n];\n\ninterface AppLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function AppLayout({ children }: AppLayoutProps) {\n  const { user, isLoading, logout } = useAuth();\n  const { theme, setTheme } = useTheme();\n  const [location, setLocation] = useLocation();\n\n  const { data: syncStatus } = useQuery({\n    queryKey: ['/api/sync/status'],\n    refetchInterval: 60000, // Refetch every minute\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation('/login');\n    }\n  }, [user, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className='min-h-screen flex items-center justify-center bg-background'>\n        <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-primary'></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  const getLastSyncText = () => {\n    if (!syncStatus || !Array.isArray(syncStatus) || syncStatus.length === 0)\n      return 'Last synced: Never';\n\n    const latestSync = syncStatus.reduce((latest: any, current: any) => {\n      return new Date(current.lastSync) > new Date(latest.lastSync) ? current : latest;\n    });\n\n    const lastSyncDate = new Date(latestSync.lastSync);\n    const now = new Date();\n    const diffMinutes = Math.floor((now.getTime() - lastSyncDate.getTime()) / (1000 * 60));\n\n    if (diffMinutes < 1) return 'Last synced: Just now';\n    if (diffMinutes < 60) return `Last synced: ${diffMinutes} min ago`;\n\n    const diffHours = Math.floor(diffMinutes / 60);\n    if (diffHours < 24) return `Last synced: ${diffHours}h ago`;\n\n    const diffDays = Math.floor(diffHours / 24);\n    return `Last synced: ${diffDays}d ago`;\n  };\n\n  const getSyncStatusColor = () => {\n    if (!syncStatus || !Array.isArray(syncStatus) || syncStatus.length === 0) return 'bg-gray-500';\n\n    const hasError = syncStatus.some((s: any) => s.status === 'error');\n    if (hasError) return 'bg-red-500';\n\n    return 'bg-green-500';\n  };\n\n  const getThemeIcon = (themeValue: string) => {\n    switch (themeValue) {\n      case 'light':\n        return <Sun className='h-4 w-4' />;\n      case 'dark':\n        return <Moon className='h-4 w-4' />;\n      default:\n        return <Monitor className='h-4 w-4' />;\n    }\n  };\n\n  const getThemeLabel = (themeValue: string) => {\n    switch (themeValue) {\n      case 'light':\n        return 'Light';\n      case 'dark':\n        return 'Dark';\n      default:\n        return 'System';\n    }\n  };\n\n  const getUserInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map((word) => word[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <SidebarProvider>\n      <Sidebar variant='inset'>\n        <SidebarHeader>\n          <div className='flex items-center space-x-3 px-2 py-2'>\n            <img src={logoPath} alt='Wellness Hub Logo' className='w-8 h-8 rounded-lg' />\n            <div className='group-data-[collapsible=icon]:hidden'>\n              <h1 className='text-lg font-bold text-teal-700 dark:text-teal-300'>OmniCRM</h1>\n              <p className='text-xs text-muted-foreground'>Data Intelligence</p>\n            </div>\n          </div>\n        </SidebarHeader>\n\n        <SidebarContent>\n          <SidebarGroup>\n            <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {navigation.map((item) => {\n                  const Icon = item.icon;\n                  return (\n                    <SidebarMenuItem key={item.name}>\n                      <SidebarMenuButton\n                        asChild\n                        isActive={location === item.href}\n                        className={cn(\n                          'w-full justify-start',\n                          location === item.href &&\n                            'bg-teal-50 dark:bg-teal-800 text-teal-700 dark:text-teal-200 hover:bg-teal-50 dark:hover:bg-teal-800'\n                        )}\n                      >\n                        <Link href={item.href}>\n                          <Icon className='h-4 w-4' />\n                          <span>{item.name}</span>\n                        </Link>\n                      </SidebarMenuButton>\n                    </SidebarMenuItem>\n                  );\n                })}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n\n          <SidebarSeparator />\n\n          <SidebarGroup>\n            <SidebarGroupLabel>Quick Actions</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {quickActions.map((item) => {\n                  const Icon = item.icon;\n                  return (\n                    <SidebarMenuItem key={item.name}>\n                      <SidebarMenuButton asChild size='sm'>\n                        <Link href={item.href}>\n                          <Icon className='h-3 w-3' />\n                          <span className='text-xs'>{item.name}</span>\n                        </Link>\n                      </SidebarMenuButton>\n                    </SidebarMenuItem>\n                  );\n                })}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n\n        <SidebarFooter>\n          <div className='p-2'>\n            <div className='bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-3'>\n              <div className='flex items-center space-x-2'>\n                <div className={cn('w-2 h-2 rounded-full animate-pulse', getSyncStatusColor())} />\n                <span className='text-sm font-medium text-green-700 dark:text-green-300 group-data-[collapsible=icon]:hidden'>\n                  {getLastSyncText()}\n                </span>\n              </div>\n              <p className='text-xs text-green-600 dark:text-green-400 mt-1 group-data-[collapsible=icon]:hidden'>\n                Gmail • Calendar • Drive\n              </p>\n            </div>\n          </div>\n        </SidebarFooter>\n\n        <SidebarRail />\n      </Sidebar>\n\n      <SidebarInset>\n        <header className='flex h-16 shrink-0 items-center justify-between gap-2 px-4 border-b'>\n          <div className='flex items-center gap-2'>\n            <SidebarTrigger className='-ml-1' />\n            <div className='text-sm font-semibold'>Welcome back, {user?.name || 'User'}</div>\n          </div>\n\n          <div className='flex items-center gap-4'>\n            {/* User Profile Dropdown */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant='ghost' className='flex items-center gap-2 h-8 px-2'>\n                  <Avatar className='h-6 w-6'>\n                    <AvatarImage src={user?.picture || undefined} alt={user?.name || 'User'} />\n                    <AvatarFallback className='text-xs'>\n                      {getUserInitials(user?.name || 'User')}\n                    </AvatarFallback>\n                  </Avatar>\n                  <ChevronDown className='h-3 w-3' />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align='end' className='w-56'>\n                <DropdownMenuLabel className='font-normal'>\n                  <div className='flex flex-col space-y-1'>\n                    <p className='text-sm font-medium leading-none'>{user?.name || 'User'}</p>\n                    <p className='text-xs leading-none text-muted-foreground'>\n                      {user?.email || 'user@example.com'}\n                    </p>\n                  </div>\n                </DropdownMenuLabel>\n                <DropdownMenuSeparator />\n\n                {/* Theme Selection */}\n                <DropdownMenuSub>\n                  <DropdownMenuSubTrigger>\n                    {getThemeIcon(theme)}\n                    <span>Theme: {getThemeLabel(theme)}</span>\n                  </DropdownMenuSubTrigger>\n                  <DropdownMenuSubContent>\n                    <DropdownMenuItem onClick={() => setTheme('system')}>\n                      <Monitor className='h-4 w-4 mr-2' />\n                      System\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => setTheme('light')}>\n                      <Sun className='h-4 w-4 mr-2' />\n                      Light\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => setTheme('dark')}>\n                      <Moon className='h-4 w-4 mr-2' />\n                      Dark\n                    </DropdownMenuItem>\n                  </DropdownMenuSubContent>\n                </DropdownMenuSub>\n\n                <DropdownMenuSeparator />\n\n                <DropdownMenuItem onClick={() => setLocation('/settings')}>\n                  <Settings className='h-4 w-4 mr-2' />\n                  Settings\n                </DropdownMenuItem>\n\n                <DropdownMenuSeparator />\n\n                <DropdownMenuItem onClick={logout}>\n                  <LogOut className='h-4 w-4 mr-2' />\n                  Log out\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </header>\n        <div className='flex flex-1 flex-col gap-4 p-4 pt-0 overflow-auto'>\n          <div className='min-h-0'>{children}</div>\n        </div>\n      </SidebarInset>\n    </SidebarProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/Layout/AuthenticatedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/Layout/Header.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":3,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":3,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useAuth } from '@/contexts/AuthContext';\n\nexport default function Header() {\n  const { user } = useAuth();\n\n  return (\n    <header className='bg-card border-b border-border px-6 py-4'>\n      <div className='flex items-center justify-between'>\n        <div>\n          <h2 className='text-2xl font-bold text-foreground'>Dashboard</h2>\n          <p className='text-muted-foreground'>Welcome back, {user?.name ?? 'User'}</p>\n        </div>\n      </div>\n    </header>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/Layout/Sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":20,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":20,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":28,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":28,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":49,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":49,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useLocation } from 'wouter';\nimport { cn } from '@/lib/utils';\nimport logoPath from '@assets/logo_1753860249688.png';\nimport { useQuery } from '@tanstack/react-query';\n\ninterface SyncStatus {\n  lastSync: string;\n  status: 'success' | 'error' | 'pending';\n}\n\nconst navigation = [\n  { name: 'Dashboard', href: '/', icon: 'fas fa-th-large' },\n  { name: 'Contacts', href: '/contacts', icon: 'fas fa-users' },\n\n  { name: 'AI Assistant', href: '/assistant', icon: 'fas fa-robot' },\n  { name: 'Analytics', href: '/analytics', icon: 'fas fa-chart-line' },\n  { name: 'Settings', href: '/settings', icon: 'fas fa-cog' },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  const { data: syncStatus } = useQuery<SyncStatus[]>({\n    queryKey: ['/api/sync/status'],\n    refetchInterval: 60000, // Refetch every minute\n  });\n\n  const getLastSyncText = () => {\n    if (!syncStatus || !Array.isArray(syncStatus) || syncStatus.length === 0) return 'Never synced';\n\n    const latestSync = syncStatus.reduce((latest: SyncStatus, current: SyncStatus) => {\n      return new Date(current.lastSync) > new Date(latest.lastSync) ? current : latest;\n    });\n\n    const lastSyncDate = new Date(latestSync.lastSync);\n    const now = new Date();\n    const diffMinutes = Math.floor((now.getTime() - lastSyncDate.getTime()) / (1000 * 60));\n\n    if (diffMinutes < 1) return 'Just now';\n    if (diffMinutes < 60) return `${diffMinutes} min ago`;\n\n    const diffHours = Math.floor(diffMinutes / 60);\n    if (diffHours < 24) return `${diffHours}h ago`;\n\n    const diffDays = Math.floor(diffHours / 24);\n    return `${diffDays}d ago`;\n  };\n\n  const getSyncStatusColor = () => {\n    if (!syncStatus || !Array.isArray(syncStatus) || syncStatus.length === 0) return 'bg-gray-500';\n\n    const hasError = syncStatus.some((s: SyncStatus) => s.status === 'error');\n    if (hasError) return 'bg-red-500';\n\n    return 'bg-green-500';\n  };\n\n  return (\n    <aside className='w-64 bg-card border-r border-border shadow-sm'>\n      <div className='p-6 border-b border-border'>\n        <div className='flex items-center space-x-3'>\n          <img src={logoPath} alt='Wellness Hub Logo' className='w-10 h-10 rounded-lg' />\n          <div>\n            <h1 className='text-lg font-bold text-teal-700 dark:text-teal-300'>Wellness Hub</h1>\n            <p className='text-xs text-muted-foreground'>Data Intelligence</p>\n          </div>\n        </div>\n      </div>\n\n      <nav className='p-4'>\n        <ul className='space-y-2'>\n          {navigation.map((item) => (\n            <li key={item.name}>\n              <a\n                href={item.href}\n                className={cn(\n                  'flex items-center space-x-3 p-3 rounded-lg font-medium transition-colors',\n                  location === item.href\n                    ? 'bg-teal-50 dark:bg-teal-800 text-teal-700 dark:text-teal-200'\n                    : 'text-gray-600 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                )}\n              >\n                <i className={cn(item.icon, 'w-5')} />\n                <span>{item.name}</span>\n              </a>\n            </li>\n          ))}\n        </ul>\n      </nav>\n\n      {/* Sync Status */}\n      <div className='p-4 border-t border-border'>\n        <div className='bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-3'>\n          <div className='flex items-center space-x-2'>\n            <div className={cn('w-2 h-2 rounded-full animate-pulse', getSyncStatusColor())} />\n            <span className='text-sm font-medium text-green-700 dark:text-green-300'>\n              {getLastSyncText()}\n            </span>\n          </div>\n          <p className='text-xs text-green-600 dark:text-green-400 mt-1'>\n            Gmail • Calendar • Drive\n          </p>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/alert-dialog.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":49,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":49,"endColumn":44},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":63,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":63,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/badge.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":30,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":30,"endColumn":15},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":36,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":36,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/breadcrumb.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":79,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":79,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":94,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":94,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":56,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":56,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/calendar.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":10,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":10,"endColumn":18},{"ruleId":"react/prop-types","severity":2,"message":"'orientation' is missing in props validation","line":48,"column":21,"nodeType":"Property","messageId":"missingPropType","endLine":48,"endColumn":32}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\nimport { DayPicker } from 'react-day-picker';\n\nimport { cn } from '@/lib/utils';\nimport { buttonVariants } from '@/components/ui/button';\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({ className, classNames, showOutsideDays = true, ...props }: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn('p-3', className)}\n      classNames={{\n        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',\n        month: 'space-y-4',\n        caption: 'flex justify-center pt-1 relative items-center',\n        caption_label: 'text-sm font-medium',\n        nav: 'space-x-1 flex items-center',\n        nav_button: cn(\n          buttonVariants({ variant: 'outline' }),\n          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100'\n        ),\n        nav_button_previous: 'absolute left-1',\n        nav_button_next: 'absolute right-1',\n        table: 'w-full border-collapse space-y-1',\n        head_row: 'flex',\n        head_cell: 'text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]',\n        row: 'flex w-full mt-2',\n        cell: 'h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20',\n        day: cn(\n          buttonVariants({ variant: 'ghost' }),\n          'h-9 w-9 p-0 font-normal aria-selected:opacity-100'\n        ),\n        day_range_end: 'day-range-end',\n        day_selected:\n          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',\n        day_today: 'bg-accent text-accent-foreground',\n        day_outside:\n          'day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30',\n        day_disabled: 'text-muted-foreground opacity-50',\n        day_range_middle: 'aria-selected:bg-accent aria-selected:text-accent-foreground',\n        day_hidden: 'invisible',\n        ...classNames,\n      }}\n      components={{\n        Chevron: ({ orientation, ...props }) => {\n          const Icon = orientation === 'left' ? ChevronLeft : ChevronRight;\n          return <Icon className=\"h-4 w-4\" {...props} />;\n        },\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = 'Calendar';\n\nexport { Calendar };\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/carousel.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'api' is defined but never used.","line":19,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"api"},"fix":{"range":[586,602],"text":""},"desc":"Remove unused variable 'api'."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":33,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":33,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":79,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":79,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'api' is not defined.","line":79,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":79,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .scrollPrev on an `error` typed value.","line":79,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":22},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useCallback has an unnecessary dependency: 'api'. Either exclude it or remove the dependency array. Outer scope values like 'api' aren't valid dependencies because mutating them doesn't re-render the component.","line":80,"column":8,"nodeType":"ArrayExpression","endLine":80,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[1979,1984],"text":"[]"}}]},{"ruleId":"no-undef","severity":2,"message":"'api' is not defined.","line":80,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":80,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":83,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":83,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'api' is not defined.","line":83,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":83,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .scrollNext on an `error` typed value.","line":83,"column":12,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":22},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useCallback has an unnecessary dependency: 'api'. Either exclude it or remove the dependency array. Outer scope values like 'api' aren't valid dependencies because mutating them doesn't re-render the component.","line":84,"column":8,"nodeType":"ArrayExpression","endLine":84,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2067,2072],"text":"[]"}}]},{"ruleId":"no-undef","severity":2,"message":"'api' is not defined.","line":84,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":84,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'api' is not defined.","line":100,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'api' is not defined.","line":104,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":104,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has an unnecessary dependency: 'api'. Either exclude it or remove the dependency array. Outer scope values like 'api' aren't valid dependencies because mutating them doesn't re-render the component.","line":105,"column":8,"nodeType":"ArrayExpression","endLine":105,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [setApi]","fix":{"range":[2541,2554],"text":"[setApi]"}}]},{"ruleId":"no-undef","severity":2,"message":"'api' is not defined.","line":105,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":105,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'api' is not defined.","line":108,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":108,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'api' is not defined.","line":112,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":112,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":113,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":113,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'api' is not defined.","line":113,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":113,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .on on an `error` typed value.","line":113,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":113,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":114,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":114,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'api' is not defined.","line":114,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":114,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .on on an `error` typed value.","line":114,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":114,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":116,"column":17,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":116,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":117,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":117,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'api' is not defined.","line":117,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":117,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .off on an `error` typed value.","line":117,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":117,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has an unnecessary dependency: 'api'. Either exclude it or remove the dependency array. Outer scope values like 'api' aren't valid dependencies because mutating them doesn't re-render the component.","line":119,"column":8,"nodeType":"ArrayExpression","endLine":119,"endColumn":23,"suggestions":[{"desc":"Update the dependencies array to be: [onSelect]","fix":{"range":[2787,2802],"text":"[onSelect]"}}]},{"ruleId":"no-undef","severity":2,"message":"'api' is not defined.","line":119,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":119,"endColumn":12},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":125,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":125,"endColumn":19},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":125,"column":11,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":125,"endColumn":19,"fix":{"range":[2900,2908],"text":"api"}},{"ruleId":"no-undef","severity":2,"message":"'api' is not defined.","line":125,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":125,"endColumn":19}],"suppressedMessages":[],"errorCount":27,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/chart.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used.","line":12,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":7,"suggestions":[{"messageId":"removeVar","data":{"varName":"key"},"fix":{"range":[251,254],"text":""},"desc":"Remove unused variable 'key'."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":27,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":27,"endColumn":18},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":47,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":47,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1114,1116],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":70,"column":74,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":70,"endColumn":76},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":72,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":72,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2440,2442],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":89,"column":66,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":89,"endColumn":68,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2816,2818],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":142,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":142,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3824,3849],"text":"(labelKey ?? item?.dataKey)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":142,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":142,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3836,3863],"text":"(item?.dataKey ?? item?.name)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":142,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":142,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3864,3866],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":146,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":146,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4072,4074],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":189,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":189,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5077,5097],"text":"(nameKey ?? item.name)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":189,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":189,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5088,5113],"text":"(item.name ?? item.dataKey)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":189,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":189,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5114,5116],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":191,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":191,"endColumn":76},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":191,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":191,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5240,5266],"text":"(color ?? item.payload.fill)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .fill on an `any` value.","line":191,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":62},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":191,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":191,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5267,5269],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":222,"column":31,"nodeType":"Property","messageId":"anyAssignment","endLine":222,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":223,"column":31,"nodeType":"Property","messageId":"anyAssignment","endLine":223,"endColumn":63},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":238,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":238,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7334,7336],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":289,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":289,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8590,8613],"text":"(nameKey ?? item.dataKey)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":289,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":289,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8614,8616],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":294,"column":20,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":294,"endColumn":30},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":320,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":320,"endColumn":37}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [key in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-32 items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-border bg-(--color-bg)\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/command.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":24,"column":61,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":63},{"ruleId":"react/no-unknown-property","severity":2,"message":"Unknown property 'cmdk-input-wrapper' found","line":40,"column":52,"nodeType":"JSXAttribute","messageId":"unknownProp","endLine":40,"endColumn":73},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":128,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":128,"endColumn":45}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/context-menu.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":169,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":169,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-(--radix-context-menu-content-transform-origin)\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-(--radix-context-menu-content-available-height) min-w-32 overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-(--radix-context-menu-content-transform-origin)\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/data-table.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"Imports \"ColumnDef\", \"ColumnFiltersState\", \"SortingState\" and \"VisibilityState\" are only used as type.","line":2,"column":1,"nodeType":"ImportDeclaration","messageId":"someImportsAreOnlyTypes","endLine":13,"endColumn":31,"fix":{"range":[31,109],"text":"import type {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState} from \"@tanstack/react-table\";\nimport {"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":44,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":44,"endColumn":41},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":193,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":193,"endColumn":26},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":195,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":195,"endColumn":11},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":195,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5870,5873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5870,5873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":198,"column":9,"nodeType":"LogicalExpression","messageId":"anyAssignment","endLine":199,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":198,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":198,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getIsAllPageRowsSelected on an `any` value.","line":198,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":198,"endColumn":39},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":198,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":198,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5951,5953],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":199,"column":10,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":199,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getIsSomePageRowsSelected on an `any` value.","line":199,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":199,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":201,"column":35,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":201,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":201,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":201,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toggleAllPageRowsSelected on an `any` value.","line":201,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":201,"endColumn":66},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":205,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":205,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6161,6164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6161,6164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":207,"column":16,"nodeType":"CallExpression","messageId":"anyAssignment","endLine":207,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":207,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":207,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getIsSelected on an `any` value.","line":207,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":207,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":208,"column":35,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":208,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":208,"column":35,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":208,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toggleSelected on an `any` value.","line":208,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":208,"endColumn":53},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":216,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":216,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":219,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":219,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6474,6477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6474,6477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":230,"column":12,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":230,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `any` value.","line":230,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":230,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":230,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6904,6907],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6904,6907],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .separator on an `any` value.","line":232,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":232,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":233,"column":48,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":233,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":233,"column":48,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":233,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .onClick on an `any` value.","line":233,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":233,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .original on an `any` value.","line":233,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":233,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .icon on an `any` value.","line":234,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":234,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .label on an `any` value.","line":235,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":235,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":245,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7413,7416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7413,7416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":245,"column":59,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":245,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":249,"column":22,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":249,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":249,"column":22,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":249,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toggleSorting on an `any` value.","line":249,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":249,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":249,"column":43,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":249,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .getIsSorted on an `any` value.","line":249,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":249,"endColumn":61}],"suppressedMessages":[],"errorCount":35,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\nimport { ArrowUpDown, ChevronDown, MoreHorizontal } from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { Input } from \"@/components/ui/input\"\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n  searchKey?: string\n  searchPlaceholder?: string\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n  searchKey,\n  searchPlaceholder = \"Search...\",\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({})\n  const [rowSelection, setRowSelection] = React.useState({})\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n  })\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"flex items-center py-4\">\n        {searchKey && (\n          <Input\n            placeholder={searchPlaceholder}\n            value={(table.getColumn(searchKey)?.getFilterValue() as string) ?? \"\"}\n            onChange={(event) =>\n              table.getColumn(searchKey)?.setFilterValue(event.target.value)\n            }\n            className=\"max-w-sm\"\n          />\n        )}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" className=\"ml-auto\">\n              Columns <ChevronDown className=\"ml-2 h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            {table\n              .getAllColumns()\n              .filter((column) => column.getCanHide())\n              .map((column) => {\n                return (\n                  <DropdownMenuCheckboxItem\n                    key={column.id}\n                    className=\"capitalize\"\n                    checked={column.getIsVisible()}\n                    onCheckedChange={(value) =>\n                      column.toggleVisibility(!!value)\n                    }\n                  >\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                )\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  )\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && \"selected\"}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center\"\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        <div className=\"flex-1 text-sm text-muted-foreground\">\n          {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n          {table.getFilteredRowModel().rows.length} row(s) selected.\n        </div>\n        <div className=\"space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            Previous\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Utility components for common column types\nexport const SelectColumn = {\n  id: \"select\",\n  header: ({ table }: any) => (\n    <Checkbox\n      checked={\n        table.getIsAllPageRowsSelected() ||\n        (table.getIsSomePageRowsSelected() && \"indeterminate\")\n      }\n      onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n      aria-label=\"Select all\"\n    />\n  ),\n  cell: ({ row }: any) => (\n    <Checkbox\n      checked={row.getIsSelected()}\n      onCheckedChange={(value) => row.toggleSelected(!!value)}\n      aria-label=\"Select row\"\n    />\n  ),\n  enableSorting: false,\n  enableHiding: false,\n}\n\nexport const ActionsColumn = {\n  id: \"actions\",\n  enableHiding: false,\n  cell: ({ row, actions }: any) => {\n    return (\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n            <span className=\"sr-only\">Open menu</span>\n            <MoreHorizontal className=\"h-4 w-4\" />\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuLabel>Actions</DropdownMenuLabel>\n          {actions?.map((action: any, index: number) => (\n            <React.Fragment key={index}>\n              {action.separator && <DropdownMenuSeparator />}\n              <DropdownMenuItem onClick={() => action.onClick(row.original)}>\n                {action.icon && <action.icon className=\"mr-2 h-4 w-4\" />}\n                {action.label}\n              </DropdownMenuItem>\n            </React.Fragment>\n          ))}\n        </DropdownMenuContent>\n      </DropdownMenu>\n    )\n  },\n}\n\nexport const SortableHeader = ({ column, children }: any) => {\n  return (\n    <Button\n      variant=\"ghost\"\n      onClick={() => column.toggleSorting(column.getIsSorted() === \"asc\")}\n    >\n      {children}\n      <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n    </Button>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/dialog.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":59,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":59,"endColumn":44},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":73,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":73,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/drawer.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":11,"column":55,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":11,"endColumn":57},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":61,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":61,"endColumn":44},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":72,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":72,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/dropdown-menu.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":172,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":172,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-(--radix-dropdown-menu-content-transform-origin)\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-32 overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-(--radix-dropdown-menu-content-transform-origin)\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/form.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":4,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":4,"endColumn":56,"fix":{"range":[51,51],"text":" type"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":36,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":36,"endColumn":44},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":44,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":44,"endColumn":27},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":170,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":170,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":1,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/menubar.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":9,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":9,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":15,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":15,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":21,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":21,"endColumn":23},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":27,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":27,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":33,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":33,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":226,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":226,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-(--radix-menubar-content-transform-origin)\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-48 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-(--radix-menubar-content-transform-origin)\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-disabled:pointer-events-none data-disabled:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":119,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":119,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-px ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-(--radix-navigation-menu-viewport-height) w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-(--radix-navigation-menu-viewport-width)\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-1 flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/pagination.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"Imports \"ButtonProps\" are only used as type.","line":5,"column":1,"nodeType":"ImportDeclaration","messageId":"someImportsAreOnlyTypes","endLine":5,"endColumn":69,"fix":{"range":[138,159],"text":"import type { ButtonProps} from \"@/components/ui/button\";\nimport {"}},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":7,"column":75,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":7,"endColumn":77},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":47,"column":25,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":47,"endColumn":27},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":65,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":65,"endColumn":51},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":81,"column":49,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":81,"endColumn":51},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":97,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":97,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/progress.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":22,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":22,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[661,663],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/resizable.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":11,"column":64,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":11,"endColumn":66},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":29,"column":4,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":29,"endColumn":6}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/sheet.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":80,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":80,"endColumn":44},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":94,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":94,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"Imports \"VariantProps\" are only used as type.","line":3,"column":1,"nodeType":"ImportDeclaration","messageId":"someImportsAreOnlyTypes","endLine":3,"endColumn":61,"fix":{"range":[75,97],"text":"import type { VariantProps} from \"class-variance-authority\";\nimport {"}},{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":35,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[990,1003],"text":""},"desc":"Remove unused variable 'open'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":37,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[1053,1066],"text":""},"desc":"Remove unused variable 'open'."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":44,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":44,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":58,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[1555,1568],"text":""},"desc":"Remove unused variable 'open'."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":79,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":79,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'openProp' is not defined.","line":79,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":79,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":82,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":82,"endColumn":76},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":104,"column":52,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":104,"endColumn":54},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":115,"column":17,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":115,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":125,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":125,"endColumn":13},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":769,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":769,"endColumn":13}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      \n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-(--sidebar-width) flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-(--sidebar-width) bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]\"\n              : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon)\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]\"\n              : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-(--skeleton-width) flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/skeleton.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":3,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":3,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/table.tsx","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'className' is missing in props validation","line":72,"column":6,"nodeType":"Property","messageId":"missingPropType","endLine":72,"endColumn":15},{"ruleId":"react/prop-types","severity":2,"message":"'className' is missing in props validation","line":87,"column":6,"nodeType":"Property","messageId":"missingPropType","endLine":87,"endColumn":15}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/toaster.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":11,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":11,"endColumn":24},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":16,"column":19,"nodeType":"FunctionExpression","messageId":"preferArrowCallback","endLine":29,"endColumn":8,"fix":{"range":[287,342],"text":"({ id, title, description, action, ...props }) =>"}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/toggle-group.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":47,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":47,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1474,1476],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":48,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":48,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1515,1517],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":43,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":43,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/contexts/AuthContext.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":40,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":40,"endColumn":20,"suggestions":[{"fix":{"range":[1070,1109],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":51,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":51,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: () => void;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }): React.ReactElement {\n  const [user, setUser] = useState<User | null>(null);\n\n  const { data, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (data) {\n      setUser(data as User);\n    } else if (error) {\n      setUser(null);\n    }\n  }, [data, error]);\n\n  const login = (): void => {\n    window.location.href = \"/auth/google\";\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      await fetch(\"/api/auth/logout\", { method: \"POST\", credentials: \"include\" });\n      setUser(null);\n      window.location.href = \"/login\";\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, isLoading, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/contexts/ThemeContext.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'theme' is defined but never used.","line":7,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"theme"},"fix":{"range":[181,193],"text":""},"desc":"Remove unused variable 'theme'."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":50,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":50,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\" | \"system\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }): React.ReactElement {\n  const [theme, setThemeState] = useState<Theme>(() => {\n    if (typeof window !== \"undefined\") {\n      return (localStorage.getItem(\"theme\") as Theme) || \"system\";\n    }\n    return \"system\";\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    \n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n      root.classList.add(systemTheme);\n    } else {\n      root.classList.add(theme);\n    }\n    \n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const setTheme = (newTheme: Theme): void => {\n    setThemeState(newTheme);\n  };\n\n  const toggleTheme = (): void => {\n    setThemeState(prev => prev === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme(): ThemeContextType {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/hooks/use-mobile.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":15,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":15,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile(): boolean {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = (): void => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/hooks/use-toast.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'actionTypes' is not defined.","line":27,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":37},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":62,"column":7,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":62,"endColumn":23,"fix":{"range":[1162,1178],"text":"toastId"}},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":72,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":75,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'state' is not defined.","line":73,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":73,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of type `any[]` to a variable of type `ToasterToast[]`.","line":74,"column":9,"nodeType":"Property","messageId":"unsafeAssignment","endLine":74,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe spread of an error typed value in an array.","line":74,"column":32,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":74,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'state' is not defined.","line":74,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":74,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toasts on an `error` typed value.","line":74,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":74,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":78,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":83,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'state' is not defined.","line":79,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":79,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":80,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":82,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":80,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":80,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'state' is not defined.","line":80,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":80,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toasts on an `error` typed value.","line":80,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":80,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":81,"column":11,"nodeType":"ConditionalExpression","messageId":"unsafeReturn","endLine":81,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":81,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `error` typed value.","line":81,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":81,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":93,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":93,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'state' is not defined.","line":93,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":93,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toasts on an `error` typed value.","line":93,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":93,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":94,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":94,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":98,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":108,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'state' is not defined.","line":99,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":99,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":100,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":107,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":100,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":100,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'state' is not defined.","line":100,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":100,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toasts on an `error` typed value.","line":100,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":100,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":101,"column":11,"nodeType":"ConditionalExpression","messageId":"unsafeReturn","endLine":106,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":101,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":101,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":112,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":115,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'state' is not defined.","line":113,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":113,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":117,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":120,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'state' is not defined.","line":118,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":118,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":119,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":119,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":119,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":119,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'state' is not defined.","line":119,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":119,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .toasts on an `error` typed value.","line":119,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":119,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":119,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":119,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'state' is defined but never used.","line":124,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":124,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"state"},"fix":{"range":[2544,2556],"text":""},"desc":"Remove unused variable 'state'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'props' is defined but never used.","line":137,"column":82,"nodeType":"Identifier","messageId":"unusedVar","endLine":137,"endColumn":101,"suggestions":[{"messageId":"removeVar","data":{"varName":"props"},"fix":{"range":[2891,2910],"text":""},"desc":"Remove unused variable 'props'."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":140,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":140,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":145,"column":22,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":145,"endColumn":24},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":160,"column":5,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":160,"endColumn":11,"fix":{"range":[3334,3340],"text":"id"}},{"ruleId":"no-unused-vars","severity":2,"message":"'toastId' is defined but never used.","line":166,"column":79,"nodeType":"Identifier","messageId":"unusedVar","endLine":166,"endColumn":95,"suggestions":[{"messageId":"removeVar","data":{"varName":"toastId"},"fix":{"range":[3452,3468],"text":""},"desc":"Remove unused variable 'toastId'."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":171,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":171,"endColumn":17}],"suppressedMessages":[],"errorCount":42,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\n\n\nlet count = 0\n\nfunction genId(): string {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string): void => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action): void {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast): { id: string; dismiss: () => void; update: (props: ToasterToast) => void } {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast(): { toasts: ToasterToast[]; toast: typeof toast; dismiss: (toastId?: string) => void } {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: () => dispatch({ type: \"DISMISS_TOAST\" }),\n  }\n}\n\nexport { useToast, toast }\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/hooks/useAuth.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":3,"column":27,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":3,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useAuth as useAuthContext } from \"@/contexts/AuthContext\";\n\nexport const useAuth = () => {\n  return useAuthContext();\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/hooks/useVoiceInput.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used.","line":9,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"event"},"fix":{"range":[225,254],"text":""},"desc":"Remove unused variable 'event'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used.","line":10,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":48,"suggestions":[{"messageId":"removeVar","data":{"varName":"event"},"fix":{"range":[286,320],"text":""},"desc":"Remove unused variable 'event'."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":67,"column":74,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":67,"endColumn":76,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1889,1891],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":76,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":76,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2325,2328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2325,2328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":81,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":81,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":83,"column":18,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":83,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .resultIndex on an `any` value.","line":83,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .results on an `any` value.","line":83,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":83,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .results on an `any` value.","line":84,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":84,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [i] resolves to an `any` value.","line":84,"column":29,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":84,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .results on an `any` value.","line":85,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":85,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Computed name [i] resolves to an `any` value.","line":85,"column":46,"nodeType":"Identifier","messageId":"unsafeComputedMemberAccess","endLine":85,"endColumn":47},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":93,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":93,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'event' is not defined.","line":94,"column":47,"nodeType":"Identifier","messageId":"undef","endLine":94,"endColumn":52},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":98,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":98,"endColumn":40},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":108,"column":15,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":108,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'recognition'. Either include it or remove the dependency array.","line":113,"column":6,"nodeType":"ArrayExpression","endLine":113,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [recognition]","fix":{"range":[3125,3127],"text":"[recognition]"}}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from \"react\";\n\n// Web Speech API types\ninterface SpeechRecognition {\n  continuous: boolean;\n  interimResults: boolean;\n  lang: string;\n  onstart: (() => void) | null;\n  onresult: ((event: SpeechRecognitionEvent) => void) | null;\n  onerror: ((event: SpeechRecognitionErrorEvent) => void) | null;\n  onend: (() => void) | null;\n  start(): void;\n  stop(): void;\n}\n\ninterface SpeechRecognitionEvent {\n  results: SpeechRecognitionResultList;\n  resultIndex: number;\n}\n\ninterface SpeechRecognitionResultList {\n  length: number;\n  item(): SpeechRecognitionResult;\n  [index: number]: SpeechRecognitionResult;\n}\n\ninterface SpeechRecognitionResult {\n  length: number;\n  item(): SpeechRecognitionAlternative;\n  [index: number]: SpeechRecognitionAlternative;\n  isFinal: boolean;\n}\n\ninterface SpeechRecognitionAlternative {\n  transcript: string;\n  confidence: number;\n}\n\ninterface SpeechRecognitionErrorEvent {\n  error: string;\n  message: string;\n}\n\ninterface WindowWithSpeechRecognition extends Window {\n  webkitSpeechRecognition?: new () => SpeechRecognition;\n  SpeechRecognition?: new () => SpeechRecognition;\n}\n\ninterface UseVoiceInputReturn {\n  isListening: boolean;\n  transcript: string;\n  error: string | null;\n  startListening: () => void;\n  stopListening: () => void;\n  resetTranscript: () => void;\n}\n\nexport function useVoiceInput(): UseVoiceInputReturn {\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState(\"\");\n  const [error, setError] = useState<string | null>(null);\n  const [recognition, setRecognition] = useState<SpeechRecognition | null>(null);\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\" && \"webkitSpeechRecognition\" in window) {\n      const windowWithSpeech = window as WindowWithSpeechRecognition;\n      const SpeechRecognition = windowWithSpeech.webkitSpeechRecognition || windowWithSpeech.SpeechRecognition;\n      \n      if (SpeechRecognition) {\n        const recognitionInstance = new SpeechRecognition();\n      \n      recognitionInstance.continuous = false;\n      recognitionInstance.interimResults = true;\n      recognitionInstance.lang = \"en-US\";\n\n      recognitionInstance.onstart = () => {\n        setIsListening(true);\n        setError(null);\n      };\n\n      recognitionInstance.onresult = (event: any) => {\n        let finalTranscript = \"\";\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          if (event.results[i].isFinal) {\n            finalTranscript += event.results[i][0].transcript;\n          }\n        }\n        if (finalTranscript) {\n          setTranscript(finalTranscript);\n        }\n      };\n\n      recognitionInstance.onerror = () => {\n        setError(`Speech recognition error: ${event.error}`);\n        setIsListening(false);\n      };\n\n      recognitionInstance.onend = () => {\n        setIsListening(false);\n      };\n\n        setRecognition(recognitionInstance);\n      }\n    } else {\n      setError(\"Speech recognition not supported in this browser\");\n    }\n\n    return () => {\n      if (recognition) {\n        recognition.stop();\n      }\n    };\n  }, []);\n\n  const startListening = useCallback(() => {\n    if (recognition && !isListening) {\n      setTranscript(\"\");\n      setError(null);\n      recognition.start();\n    }\n  }, [recognition, isListening]);\n\n  const stopListening = useCallback(() => {\n    if (recognition && isListening) {\n      recognition.stop();\n    }\n  }, [recognition, isListening]);\n\n  const resetTranscript = useCallback(() => {\n    setTranscript(\"\");\n  }, []);\n\n  return {\n    isListening,\n    transcript,\n    error,\n    startListening,\n    stopListening,\n    resetTranscript,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/lib/queryClient.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"Imports \"QueryFunction\" are only used as type.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"someImportsAreOnlyTypes","endLine":1,"endColumn":68,"fix":{"range":[0,35],"text":"import type { QueryFunction } from \"@tanstack/react-query\";\nimport { QueryClient"}},{"ruleId":"no-unused-vars","severity":2,"message":"'UnauthorizedBehavior' is defined but never used.","line":26,"column":6,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"UnauthorizedBehavior"},"fix":{"range":[626,646],"text":""},"desc":"Remove unused variable 'UnauthorizedBehavior'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UnauthorizedBehavior' is defined but never used.","line":26,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":30,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":30,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .join on an `any` value.","line":30,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":35,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":35,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'T' is not defined.","line":35,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":35,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":39,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":39,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'T' is not defined.","line":39,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":39,"endColumn":33}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response): Promise<void> {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>() => QueryFunction<T | null> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null as T | null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json() as T;\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/pages/AIAssistant.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":42,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":42,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":56,"column":17,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":56,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `Promise<any>`.","line":60,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":60,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `Promise<any>`.","line":68,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":68,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":73,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":73,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":73,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":73,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":88,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":88,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":99,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":99,"endColumn":34},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":114,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":114,"endColumn":53},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":121,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":121,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":131,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":131,"endColumn":107},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":131,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3543,3546],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3543,3546],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .SpeechRecognition on an `any` value.","line":131,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":131,"endColumn":64},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":131,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":131,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3566,3568],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":131,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3580,3583],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3580,3583],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .webkitSpeechRecognition on an `any` value.","line":131,"column":84,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":131,"endColumn":107},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":132,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":132,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe construction of a(n) `any` typed value.","line":132,"column":25,"nodeType":"NewExpression","messageId":"unsafeNew","endLine":132,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .continuous on an `any` value.","line":134,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":134,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .interimResults on an `any` value.","line":135,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":135,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lang on an `any` value.","line":136,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":136,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .onstart on an `any` value.","line":138,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":138,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":138,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .onresult on an `any` value.","line":142,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":142,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3874,3877],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3874,3877],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":142,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":142,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":143,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":143,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .results on an `any` value.","line":143,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":143,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .onerror on an `any` value.","line":148,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":148,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":148,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":148,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .onend on an `any` value.","line":157,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":157,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":157,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":157,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":161,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":161,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .start on an `any` value.","line":161,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":164,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":164,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":177,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":177,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":329,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11056,11059],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11056,11059],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extractedData on an `any` value.","line":329,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":329,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extractedData on an `any` value.","line":329,"column":86,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":329,"endColumn":99},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":331,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":331,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11203,11206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11203,11206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .startTime on an `any` value.","line":332,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":332,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":337,"column":35,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":337,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":337,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":337,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .summary on an `any` value.","line":342,"column":85,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":342,"endColumn":92},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extractedData on an `any` value.","line":343,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":343,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extractedData on an `any` value.","line":345,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":345,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extractedData on an `any` value.","line":354,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":354,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extractedData on an `any` value.","line":356,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":356,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extractedData on an `any` value.","line":359,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":359,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":361,"column":40,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":361,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":361,"column":40,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":361,"endColumn":78},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extractedData on an `any` value.","line":361,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":361,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .join on an `any` value.","line":361,"column":85,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":361,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extractedData on an `any` value.","line":362,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":362,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .extractedData on an `any` value.","line":362,"column":92,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":362,"endColumn":105}],"suppressedMessages":[],"errorCount":44,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\n\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Bot,\n  Send,\n  Mic,\n  MicOff,\n  Lightbulb,\n  TrendingUp,\n  Users,\n  Calendar,\n  Mail,\n  FileText,\n} from \"lucide-react\";\n\ninterface Message {\n  id: string;\n  content: string;\n  role: \"user\" | \"assistant\";\n  timestamp: Date;\n}\n\ninterface Insight {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  priority: \"high\" | \"medium\" | \"low\";\n  createdAt: string;\n}\n\n\n\nexport default function AIAssistant() {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  // Fetch AI insights\n  const { data: insights } = useQuery({\n    queryKey: [\"/api/ai/insights\"],\n    refetchInterval: 300000, // Refetch every 5 minutes\n  });\n\n  // Fetch upcoming calendar events with AI analysis\n  const { data: upcomingEvents } = useQuery({\n    queryKey: [\"/api/calendar/upcoming\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/calendar/upcoming?limit=10\");\n      return response.json();\n    },\n    refetchInterval: 600000, // Refetch every 10 minutes\n  });\n\n  const chatMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/chat\", { message });\n      return response.json();\n    },\n    onSuccess: (response) => {\n      const assistantMessage: Message = {\n        id: Date.now().toString() + \"_assistant\",\n        content: response.message,\n        role: \"assistant\",\n        timestamp: new Date(),\n      };\n      setMessages((prev) => [...prev, assistantMessage]);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to get AI response. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    // Only scroll to bottom if there are messages and it's not the initial load\n    if (messages.length > 0) {\n      scrollToBottom();\n    }\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      content: inputMessage,\n      role: \"user\",\n      timestamp: new Date(),\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    chatMutation.mutate(inputMessage);\n    setInputMessage(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const startVoiceRecognition = () => {\n    if (!(\"webkitSpeechRecognition\" in window) && !(\"SpeechRecognition\" in window)) {\n      toast({\n        title: \"Voice Recognition Not Supported\",\n        description: \"Your browser doesn't support voice recognition.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n\n    recognition.continuous = false;\n    recognition.interimResults = false;\n    recognition.lang = \"en-US\";\n\n    recognition.onstart = () => {\n      setIsListening(true);\n    };\n\n    recognition.onresult = (event: any) => {\n      const transcript = event.results[0][0].transcript;\n      setInputMessage(transcript);\n      setIsListening(false);\n    };\n\n    recognition.onerror = () => {\n      setIsListening(false);\n      toast({\n        title: \"Voice Recognition Error\",\n        description: \"Failed to recognize speech. Please try again.\",\n        variant: \"destructive\",\n      });\n    };\n\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n\n    recognition.start();\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      case \"medium\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n      case \"low\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category.toLowerCase()) {\n      case \"contacts\":\n        return <Users className=\"h-4 w-4\" />;\n      case \"calendar\":\n        return <Calendar className=\"h-4 w-4\" />;\n      case \"email\":\n        return <Mail className=\"h-4 w-4\" />;\n      case \"analytics\":\n        return <TrendingUp className=\"h-4 w-4\" />;\n      default:\n        return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  const quickPrompts = [\n    \"Summarize my recent client interactions\",\n    \"What are my upcoming client sessions?\",\n    \"Generate a follow-up email template\",\n    \"Analyze my client engagement trends\",\n    \"Suggest next steps for my top clients\",\n    \"Review today's calendar for client sessions\",\n  ];\n\n  return (\n    <div className=\"h-full max-h-[calc(100vh-6rem)] flex flex-col lg:flex-row gap-3 lg:gap-6\">\n      {/* Main Chat Area */}\n      <div className=\"flex-1 flex flex-col min-h-0\">\n        <div className=\"mb-3 lg:mb-6\">\n          <h1 className=\"text-2xl lg:text-3xl font-bold tracking-tight flex items-center gap-2\">\n            <Bot className=\"h-6 w-6 lg:h-8 lg:w-8 text-teal-600\" />\n            AI Assistant\n          </h1>\n          <p className=\"text-muted-foreground text-sm lg:text-base\">\n            Get intelligent insights and assistance for your wellness practice.\n          </p>\n        </div>\n\n        <Card className=\"flex-1 flex flex-col min-h-0\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg\">Chat with AI</CardTitle>\n          </CardHeader>\n          <CardContent className=\"flex-1 flex flex-col p-0 min-h-0\">\n            <ScrollArea className=\"flex-1 px-4 lg:px-6\">\n              <div className=\"space-y-4 pb-4\">\n                {messages.length === 0 && (\n                  <div className=\"text-center py-8\">\n                    <Bot className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium mb-2\">Welcome to AI Assistant</h3>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Ask me anything about your clients, schedule, or get insights about your practice.\n                    </p>\n                    <div className=\"flex flex-wrap gap-2 justify-center\">\n                      {quickPrompts.slice(0, 3).map((prompt, index) => (\n                        <Button\n                          key={index}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setInputMessage(prompt)}\n                          className=\"text-xs\"\n                        >\n                          {prompt}\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {messages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={`flex ${message.role === \"user\" ? \"justify-end\" : \"justify-start\"}`}\n                  >\n                    <div\n                      className={`max-w-[80%] rounded-lg px-4 py-2 ${\n                        message.role === \"user\"\n                          ? \"bg-teal-600 text-white\"\n                          : \"bg-muted text-foreground\"\n                      }`}\n                    >\n                      <p className=\"text-sm\">{message.content}</p>\n                      <p className=\"text-xs opacity-70 mt-1\">\n                        {message.timestamp.toLocaleTimeString()}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n\n                {chatMutation.isPending && (\n                  <div className=\"flex justify-start\">\n                    <div className=\"bg-muted rounded-lg px-4 py-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-teal-600\"></div>\n                        <span className=\"text-sm text-muted-foreground\">AI is thinking...</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n              <div ref={messagesEndRef} />\n            </ScrollArea>\n\n            <div className=\"border-t p-3 lg:p-4\">\n              <div className=\"flex gap-2\">\n                <Input\n                  value={inputMessage}\n                  onChange={(e) => setInputMessage(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  placeholder=\"Ask me anything about your practice...\"\n                  className=\"flex-1\"\n                  disabled={chatMutation.isPending}\n                />\n                <Button\n                  onClick={startVoiceRecognition}\n                  variant=\"outline\"\n                  size=\"icon\"\n                  disabled={isListening}\n                  className={isListening ? \"bg-red-100 dark:bg-red-900\" : \"\"}\n                >\n                  {isListening ? (\n                    <MicOff className=\"h-4 w-4 text-red-600\" />\n                  ) : (\n                    <Mic className=\"h-4 w-4\" />\n                  )}\n                </Button>\n                <Button\n                  onClick={handleSendMessage}\n                  disabled={!inputMessage.trim() || chatMutation.isPending}\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Insights & Events Sidebar */}\n      <div className=\"w-full lg:w-80 lg:shrink-0 lg:max-h-full space-y-4\">\n        {/* Upcoming Events */}\n        <Card className=\"lg:h-auto\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5 text-teal-600\" />\n              Upcoming Client Sessions\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ScrollArea className=\"h-48 lg:h-60\">\n              <div className=\"space-y-3\">\n                {upcomingEvents && Array.isArray(upcomingEvents) && upcomingEvents.length > 0 ? (\n                  upcomingEvents\n                    .filter((event: any) => event.extractedData?.isRelevant && event.extractedData?.isClientRelated)\n                    .slice(0, 5)\n                    .map((event: any) => {\n                      const startTime = new Date(event.startTime);\n                      const isToday = startTime.toDateString() === new Date().toDateString();\n                      const isSoon = startTime.getTime() - Date.now() < 2 * 60 * 60 * 1000; // Within 2 hours\n                      \n                      return (\n                        <div key={event.id} className={`border rounded-lg p-3 ${\n                          isSoon ? 'border-orange-200 bg-orange-50 dark:bg-orange-950' : \n                          isToday ? 'border-teal-200 bg-teal-50 dark:bg-teal-950' : ''\n                        }`}>\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <h4 className=\"font-medium text-sm line-clamp-2\">{event.summary}</h4>\n                            {event.extractedData?.confidence && (\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {Math.round(event.extractedData.confidence * 100)}%\n                              </Badge>\n                            )}\n                          </div>\n                          <div className=\"space-y-1\">\n                            <p className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                              <Calendar className=\"h-3 w-3\" />\n                              {startTime.toLocaleDateString()} at {startTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                            </p>\n                            {event.extractedData?.sessionType && (\n                              <p className=\"text-xs text-teal-600 font-medium capitalize\">\n                                {event.extractedData.sessionType}\n                              </p>\n                            )}\n                            {event.extractedData?.clientEmails?.length > 0 && (\n                              <p className=\"text-xs text-muted-foreground\">\n                                With: {event.extractedData.clientEmails.slice(0, 2).join(', ')}\n                                {event.extractedData.clientEmails.length > 2 && ` +${event.extractedData.clientEmails.length - 2} more`}\n                              </p>\n                            )}\n                          </div>\n                          {isSoon && (\n                            <div className=\"mt-2 text-xs text-orange-600 font-medium flex items-center gap-1\">\n                              <Users className=\"h-3 w-3\" />\n                              Starting soon\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Calendar className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n                    <p className=\"text-sm text-muted-foreground\">\n                      No upcoming client sessions found\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Events are filtered using AI to show only relevant client sessions\n                    </p>\n                  </div>\n                )}\n              </div>\n            </ScrollArea>\n          </CardContent>\n        </Card>\n\n        {/* AI Insights */}\n        <Card className=\"lg:h-auto\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Lightbulb className=\"h-5 w-5 text-yellow-500\" />\n              AI Insights\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ScrollArea className=\"h-48 lg:h-60\">\n              <div className=\"space-y-4\">\n                {insights && Array.isArray(insights) && insights.length > 0 ? (\n                  insights.map((insight: Insight) => (\n                    <div key={insight.id} className=\"border rounded-lg p-3\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <div className=\"flex items-center gap-2\">\n                          {getCategoryIcon(insight.category)}\n                          <h4 className=\"font-medium text-sm\">{insight.title}</h4>\n                        </div>\n                        <Badge className={getPriorityColor(insight.priority)} variant=\"secondary\">\n                          {insight.priority}\n                        </Badge>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mb-2\">\n                        {insight.description}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {new Date(insight.createdAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Lightbulb className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n                    <p className=\"text-sm text-muted-foreground\">\n                      No insights available yet. Start chatting to generate insights!\n                    </p>\n                  </div>\n                )}\n              </div>\n            </ScrollArea>\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        <Card className=\"hidden lg:block\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {quickPrompts.map((prompt, index) => (\n                <Button\n                  key={index}\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setInputMessage(prompt)}\n                  className=\"w-full justify-start text-left h-auto py-2 px-3\"\n                >\n                  <span className=\"text-xs\">{prompt}</span>\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/pages/Contacts.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":21,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":21,"endColumn":33},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":34,"column":66,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":34,"endColumn":68},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":50,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":50,"endColumn":24,"suggestions":[{"fix":{"range":[2372,2445],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":72,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":72,"endColumn":20,"suggestions":[{"fix":{"range":[3083,3136],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3369,3372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3369,3372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":81,"column":67,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":81,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":86,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":86,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":97,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":97,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":97,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":98,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":98,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":98,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":98,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":99,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":99,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `any` value.","line":99,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":99,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":106,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":113,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":113,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":113,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4567,4570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4567,4570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":122,"column":70,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":122,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":127,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":127,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":138,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":138,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":138,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":145,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":145,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":152,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":152,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":152,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":161,"column":73,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":161,"endColumn":75},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":177,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":177,"endColumn":20,"suggestions":[{"fix":{"range":[6203,6243],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":184,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":184,"endColumn":20,"suggestions":[{"fix":{"range":[6407,6451],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":188,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":188,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":214,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":214,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":214,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":214,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":223,"column":61,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":223,"endColumn":63},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":252,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":252,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":252,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":252,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":261,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":261,"endColumn":41},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":270,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":270,"endColumn":20,"suggestions":[{"fix":{"range":[8880,8918],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":276,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":276,"endColumn":45},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":289,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":289,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe spread of an `any` value in an array.","line":338,"column":15,"nodeType":"SpreadElement","messageId":"unsafeArraySpread","endLine":338,"endColumn":26},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":360,"column":26,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[11797,11864],"text":"\n                You haven&apos;t added any contacts yet.\n              "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[11797,11864],"text":"\n                You haven&lsquo;t added any contacts yet.\n              "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[11797,11864],"text":"\n                You haven&#39;t added any contacts yet.\n              "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[11797,11864],"text":"\n                You haven&rsquo;t added any contacts yet.\n              "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":388,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":388,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12979,12982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12979,12982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":390,"column":24,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":390,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":390,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":390,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":392,"column":55,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":392,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":392,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":392,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":396,"column":41,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":396,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatarUrl on an `any` value.","line":396,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":396,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":396,"column":65,"nodeType":"MemberExpression","messageId":"anyAssignment","endLine":396,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":396,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":396,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":397,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":397,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":400,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":400,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":402,"column":86,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":402,"endColumn":92},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":403,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":403,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":421,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":421,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":424,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":424,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .phone on an `any` value.","line":427,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":427,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .phone on an `any` value.","line":430,"column":42,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":430,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastInteraction on an `any` value.","line":435,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":435,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .lastInteraction on an `any` value.","line":438,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":438,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .nextAppointment on an `any` value.","line":441,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":441,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .nextAppointment on an `any` value.","line":444,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":444,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":466,"column":33,"nodeType":"LogicalExpression","messageId":"unsafeReturn","endLine":466,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":466,"column":42,"nodeType":"Identifier","messageId":"unsafeCall","endLine":466,"endColumn":63},{"ruleId":"no-undef","severity":2,"message":"'setPhotoUploadContact' is not defined.","line":466,"column":42,"nodeType":"Identifier","messageId":"undef","endLine":466,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":473,"column":33,"nodeType":"LogicalExpression","messageId":"unsafeReturn","endLine":473,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":473,"column":42,"nodeType":"Identifier","messageId":"unsafeCall","endLine":473,"endColumn":65},{"ruleId":"no-undef","severity":2,"message":"'setAiPhotoReviewContact' is not defined.","line":473,"column":42,"nodeType":"Identifier","messageId":"undef","endLine":473,"endColumn":65},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":497,"column":15,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":497,"endColumn":59,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[17421,17421],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[17421,17421],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":499,"column":15,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":499,"endColumn":62,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[17501,17501],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[17501,17501],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":508,"column":75,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":508,"endColumn":77,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17943,17945],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":54,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Plus, Mail, Phone, Calendar, MessageSquare, Edit } from 'lucide-react';\nimport { enrichSingleContact } from '@/api/photoEnrichmentApi';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport AddContactDialog from '@/components/Contact/AddContactDialog';\nimport ContactDetail from '@/components/Contact/ContactDetail';\nimport { ContactsTable } from '@/components/Contact/ContactsTable';\nimport { ContactPhotoUpload } from '@/components/Contact/ContactPhotoUpload';\nimport { AIPhotoReview } from '@/components/Contact/AIPhotoReview';\nimport { DeleteContactDialog } from '@/components/Contact/DeleteContactDialog';\nimport { EditContactModal } from '@/components/Contact/EditContactModal';\nimport { TagSelectionDialog } from '@/components/Contact/TagSelectionDialog';\nimport { useToast } from '@/hooks/use-toast';\nimport type { Contact } from '@/components/Contact/ContactsTable';\n\nexport default function Contacts() {\n  const [selectedContactId, setSelectedContactId] = useState<string | null>(null);\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  \n  const [deleteContact, setDeleteContact] = useState<Contact | null>(null);\n  const [editContact, setEditContact] = useState<Contact | null>(null);\n  const [tagAction, setTagAction] = useState<{ type: 'add' | 'remove'; contactIds: string[] } | null>(null);\n  const { toast } = useToast();\n\n  const { data: contacts, isLoading } = useQuery({\n    queryKey: ['/api/contacts'],\n  }) as { data: Contact[]; isLoading: boolean };\n\n  const handleBulkPhotoEnrichment = async (contactIds: string[]) => {\n    try {\n      toast({\n        title: 'Photo Enrichment Started',\n        description: `Starting photo enrichment for ${contactIds.length} contact(s)...`,\n      });\n\n      let successCount = 0;\n      let failureCount = 0;\n\n      // Process each contact individually\n      for (const contactId of contactIds) {\n        try {\n          await enrichSingleContact(contactId);\n          successCount++;\n        } catch (error) {\n          console.error(`Failed to enrich photo for contact ${contactId}:`, error);\n          failureCount++;\n        }\n      }\n\n      // Show results\n      if (successCount > 0) {\n        toast({\n          title: 'Photo Enrichment Complete',\n          description: `✅ ${successCount} photo(s) enriched successfully${failureCount > 0 ? `, ❌ ${failureCount} failed` : ''}`,\n        });\n      } else {\n        toast({\n          title: 'Photo Enrichment Failed',\n          description: 'No photos could be enriched. Please check console for details.',\n          variant: 'destructive'\n        });\n      }\n\n      // Refresh the contacts list to show updated photos\n      window.location.reload();\n    } catch (error) {\n      console.error('Bulk photo enrichment error:', error);\n      toast({\n        title: 'Photo Enrichment Error',\n        description: 'An error occurred during photo enrichment. Please try again.',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  const handleBulkAddTag = async (tag: any, contactIds: string[]) => {\n    try {\n      // Show loading state immediately\n      toast({\n        title: 'Adding tag...',\n        description: `Adding \"${tag.name}\" to ${contactIds.length} contact(s)...`,\n      });\n\n      const response = await fetch('/api/contacts/bulk/add-tag', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({\n          contactIds,\n          tagId: tag.id,\n          tagName: tag.name,\n          tagColor: tag.color,\n        }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: 'Tag added',\n          description: `Added \"${tag.name}\" tag to ${contactIds.length} contact(s).`,\n        });\n        // Use React Query to refresh data instead of page reload\n        window.location.reload();\n      } else {\n        throw new Error('Failed to add tag');\n      }\n    } catch (error) {\n      toast({\n        title: 'Error adding tag',\n        description: 'Failed to add tag to contacts. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleBulkRemoveTag = async (tag: any, contactIds: string[]) => {\n    try {\n      // Show loading state immediately\n      toast({\n        title: 'Removing tag...',\n        description: `Removing \"${tag.name}\" from ${contactIds.length} contact(s)...`,\n      });\n\n      const response = await fetch('/api/contacts/bulk/remove-tag', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({\n          contactIds,\n          tagId: tag.id,\n        }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: 'Tag removed',\n          description: `Removed \"${tag.name}\" tag from ${contactIds.length} contact(s).`,\n        });\n        // Refresh contacts data\n        window.location.reload(); \n      } else {\n        throw new Error('Failed to remove tag');\n      }\n    } catch (error) {\n      toast({\n        title: 'Error removing tag',\n        description: 'Failed to remove tag from contacts. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleBulkAction = async (action: string, contactIds: string[]) => {\n    switch (action) {\n      case 'enrich_photos':\n        await handleBulkPhotoEnrichment(contactIds);\n        break;\n      case 'export':\n        await handleExportSelected(contactIds);\n        break;\n      case 'add_tag':\n        setTagAction({ type: 'add', contactIds });\n        break;\n      case 'remove_tag':\n        setTagAction({ type: 'remove', contactIds });\n        break;\n      case 'delete':\n        // TODO: Implement bulk delete with confirmation\n        console.log('Bulk delete:', contactIds);\n        toast({\n          title: 'Bulk Delete',\n          description: 'Bulk delete functionality coming soon.',\n        });\n        break;\n      default:\n        console.log('Unknown bulk action:', action);\n    }\n  };\n\n  const handleExportData = async (format: string) => {\n    try {\n      const response = await fetch(`/api/contacts/export?format=${format}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `contacts.${format}`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n\n        toast({\n          title: 'Export successful',\n          description: `Contacts exported as ${format.toUpperCase()}.`,\n        });\n      } else {\n        throw new Error('Export failed');\n      }\n    } catch (error) {\n      toast({\n        title: 'Export failed',\n        description: 'Failed to export contacts. Please try again.',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  const handleExportSelected = async (contactIds: string[]) => {\n    try {\n      const response = await fetch('/api/contacts/export-selected', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({ contactIds, format: 'json' })\n      });\n\n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `selected-contacts.json`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n\n        toast({\n          title: 'Export successful',\n          description: `${contactIds.length} contacts exported.`,\n        });\n      } else {\n        throw new Error('Export failed');\n      }\n    } catch (error) {\n      toast({\n        title: 'Export failed',\n        description: 'Failed to export selected contacts.',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  const handleAITool = (tool: string) => {\n    switch (tool) {\n      case 'enrich_photos':\n        toast({\n          title: 'AI Photo Enrichment',\n          description: 'Batch photo enrichment coming soon.',\n        });\n        break;\n      default:\n        console.log('Unknown AI tool:', tool);\n    }\n  };\n\n  const allContacts = contacts || [];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100';\n      case 'inactive':\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100';\n      case 'potential':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100';\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return (\n      name\n        ?.split(' ')\n        .map((n) => n[0])\n        .join('')\n        .toUpperCase() || '?'\n    );\n  };\n\n  if (selectedContactId) {\n    return (\n      <div className='space-y-6'>\n        <div className='flex items-center gap-4'>\n          <Button\n            variant='ghost'\n            onClick={() => setSelectedContactId(null)}\n            className='flex items-center gap-2'\n          >\n            ← Back to Contacts\n          </Button>\n        </div>\n        <ContactDetail \n          contactId={selectedContactId} \n          onEditContact={setEditContact}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className='space-y-6'>\n      <div className='flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4'>\n        <div>\n          <div className=\"flex items-center gap-3\">\n            <h1 className='text-3xl font-bold tracking-tight'>Contacts</h1>\n            <Badge variant=\"secondary\" className=\"text-sm\">\n              {allContacts.length}\n            </Badge>\n          </div>\n          <p className='text-muted-foreground mt-1'>\n            Manage your client relationships and interactions\n          </p>\n        </div>\n      </div>\n\n\n      {isLoading ? (\n        <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'>\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className='animate-pulse'>\n                <CardHeader className='flex flex-row items-center space-y-0 pb-2'>\n                  <div className='h-10 w-10 bg-muted rounded-full' />\n                  <div className='ml-3 space-y-1 flex-1'>\n                    <div className='h-4 bg-muted rounded w-3/4' />\n                    <div className='h-3 bg-muted rounded w-1/2' />\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className='space-y-2'>\n                    <div className='h-3 bg-muted rounded w-full' />\n                    <div className='h-3 bg-muted rounded w-2/3' />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n        </div>\n      ) : allContacts.length === 0 ? (\n        <Card className='text-center py-12'>\n            <CardContent>\n              <div className='text-muted-foreground mb-4'>\n                You haven't added any contacts yet.\n              </div>\n              <Button onClick={() => setShowAddDialog(true)} className='flex items-center gap-2'>\n                <Plus className='h-4 w-4' />\n                Add Your First Contact\n              </Button>\n            </CardContent>\n        </Card>\n      ) : (\n        <Tabs defaultValue='table'>\n          <TabsList>\n            <TabsTrigger value='table'>Table View</TabsTrigger>\n            <TabsTrigger value='cards'>Card View</TabsTrigger>\n          </TabsList>\n          <TabsContent value='table'>\n            <ContactsTable \n              contacts={allContacts} \n              onSelectContact={setSelectedContactId}\n              onEditContact={setEditContact}\n              onDeleteContact={setDeleteContact}\n              onBulkAction={handleBulkAction}\n              onExportData={handleExportData}\n              onAddContact={() => setShowAddDialog(true)}\n              onAITool={handleAITool}\n            />\n          </TabsContent>\n          <TabsContent value='cards'>\n            <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'>\n              {allContacts.map((contact: any) => (\n                <Card\n                  key={contact.id}\n                  className='cursor-pointer hover:shadow-md transition-shadow'\n                  onClick={() => setSelectedContactId(contact.id.toString())}\n                >\n                  <CardHeader className='flex flex-row items-center space-y-0 pb-2'>\n                    <Avatar className='h-10 w-10'>\n                      <AvatarImage src={contact.avatarUrl} alt={contact.name} />\n                      <AvatarFallback>{getInitials(contact.name)}</AvatarFallback>\n                    </Avatar>\n                    <div className='ml-3 space-y-1 flex-1'>\n                      <CardTitle className='text-sm font-medium'>{contact.name}</CardTitle>\n                      <div className='flex items-center gap-2'>\n                        <Badge variant='secondary' className={getStatusColor(contact.status)}>\n                          {contact.status}\n                        </Badge>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"h-8 w-8 p-0\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setEditContact(contact);\n                      }}\n                    >\n                      <Edit className=\"h-4 w-4 text-green-500\" />\n                    </Button>\n                  </CardHeader>\n                  <CardContent>\n                    <div className='space-y-2 text-sm text-muted-foreground'>\n                      {contact.email && (\n                        <div className='flex items-center gap-2'>\n                          <Mail className='h-3 w-3' />\n                          <span className='truncate'>{contact.email}</span>\n                        </div>\n                      )}\n                      {contact.phone && (\n                        <div className='flex items-center gap-2'>\n                          <Phone className='h-3 w-3' />\n                          <span>{contact.phone}</span>\n                        </div>\n                      )}\n                      <div className='flex items-center justify-between text-xs pt-2'>\n                        <div className='flex items-center gap-4'>\n                          {contact.lastInteraction && (\n                            <div className='flex items-center gap-1'>\n                              <MessageSquare className='h-3 w-3' />\n                              <span>{new Date(contact.lastInteraction).toLocaleDateString()}</span>\n                            </div>\n                          )}\n                          {contact.nextAppointment && (\n                            <div className='flex items-center gap-1'>\n                              <Calendar className='h-3 w-3' />\n                              <span>{new Date(contact.nextAppointment).toLocaleDateString()}</span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n        </Tabs>\n      )}\n\n      <AddContactDialog open={showAddDialog} onOpenChange={setShowAddDialog} />\n      \n      {/* Photo Upload Dialog */}\n      <ContactPhotoUpload\n        contactId={null}\n        contactName={null}\n        currentPhotoUrl={null}\n        open={false}\n        onOpenChange={(open) => !open && setPhotoUploadContact(null)}\n      />\n      \n      {/* AI Photo Review Dialog */}\n      <AIPhotoReview\n        contact={null}\n        open={false}\n        onOpenChange={(open) => !open && setAiPhotoReviewContact(null)}\n      />\n      \n      {/* Delete Contact Dialog */}\n      <DeleteContactDialog\n        contact={deleteContact}\n        open={!!deleteContact}\n        onOpenChange={(open) => !open && setDeleteContact(null)}\n      />\n      \n      {/* Edit Contact Dialog */}\n      <EditContactModal\n        contact={editContact}\n        open={!!editContact}\n        onOpenChange={(open) => !open && setEditContact(null)}\n      />\n      \n      {/* Tag Selection Dialog */}\n      <TagSelectionDialog\n        open={!!tagAction}\n        onOpenChange={(open) => !open && setTagAction(null)}\n        onTagSelected={(tag) => {\n          if (tagAction) {\n            if (tagAction.type === 'add') {\n              handleBulkAddTag(tag, tagAction.contactIds);\n            } else {\n              handleBulkRemoveTag(tag, tagAction.contactIds);\n            }\n            setTagAction(null);\n          }\n        }}\n        title={tagAction?.type === 'add' ? 'Add Tag to Contacts' : 'Remove Tag from Contacts'}\n        description={\n          tagAction?.type === 'add' \n            ? `Select a tag to add to ${tagAction?.contactIds.length || 0} selected contact(s).`\n            : `Select a tag to remove from ${tagAction?.contactIds.length || 0} selected contact(s).`\n        }\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/pages/Dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":6,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":6,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import StatsCards from \"@/components/Dashboard/StatsCards\";\nimport ContactCards from \"@/components/Dashboard/ContactCards\";\nimport AIAssistant from \"@/components/Dashboard/AIAssistant\";\nimport PhotoEnrichment from \"@/components/Dashboard/PhotoEnrichment\";\n\nexport default function Dashboard() {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Dashboard</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Overview of your client relationships and activities\n        </p>\n      </div>\n      \n      <StatsCards />\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2\">\n          <ContactCards />\n        </div>\n        <div className=\"space-y-6\">\n          <PhotoEnrichment />\n          <AIAssistant />\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/pages/Login.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":8,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useAuth } from '@/contexts/AuthContext';\nimport { useLocation } from 'wouter';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport logoPath from '@assets/logo_1753860249688.png';\n\nexport default function Login() {\n  const { user, isLoading, login } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (user && !isLoading) {\n      setLocation('/');\n    }\n  }, [user, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className='min-h-screen flex items-center justify-center bg-background'>\n        <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-primary'></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className='min-h-screen flex items-center justify-center bg-linear-to-br from-teal-50 to-teal-100 dark:from-teal-900 dark:to-teal-800'>\n      <Card className='bg-linear-to-br from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-600w-full max-w-md mx-4 shadow-xl'>\n        <CardHeader className='space-y-4 text-center'>\n          <div className='flex justify-center'>\n            <img src={logoPath} alt='Wellness Hub Logo' className='w-16 h-16 rounded-lg' />\n          </div>\n          <div>\n            <CardTitle className='text-2xl font-bold text-teal-700 dark:text-teal-300'>\n              OmniCRM\n              <span className='text-sm block text-teal-700 dark:text-teal-300'>\n                by omnipotency.ai\n              </span>\n            </CardTitle>\n            <CardDescription className='text-teal-600 dark:text-teal-400'>\n              AI-Powered Relationship Management\n            </CardDescription>\n          </div>\n        </CardHeader>\n\n        <CardContent className='space-y-6'>\n          <div className='text-center space-y-2'>\n            <h2 className='text-lg font-semibold text-teal-700 dark:text-teal-300'>Welcome Back</h2>\n            <p className='text-sm text-teal-600 dark:text-teal-400'>\n              Sign in with your Google account to access your wellness dashboard\n            </p>\n          </div>\n\n          <Button\n            onClick={login}\n            className='w-full bg-teal-600 hover:bg-teal-700 text-white font-medium py-3 px-4 rounded-lg transition-colors duration-200 flex items-center justify-center space-x-2'\n          >\n            <svg className='w-5 h-5' viewBox='0 0 24 24'>\n              <path\n                fill='currentColor'\n                d='M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z'\n              />\n              <path\n                fill='currentColor'\n                d='M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z'\n              />\n              <path\n                fill='currentColor'\n                d='M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z'\n              />\n              <path\n                fill='currentColor'\n                d='M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z'\n              />\n            </svg>\n            <span>Continue with Google</span>\n          </Button>\n\n          <div className='text-xs text-center text-gray-500 dark:text-gray-400'>\n            By signing in, you agree to access your Gmail, Calendar, and Drive data for client\n            relationship management purposes.\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/pages/Settings.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Camera' is defined but never used.","line":16,"column":105,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":111,"suggestions":[{"messageId":"removeVar","data":{"varName":"Camera"},"fix":{"range":[588,596],"text":""},"desc":"Remove unused variable 'Camera'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Camera' is defined but never used.","line":16,"column":105,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":111},{"ruleId":"no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":16,"column":113,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":118,"suggestions":[{"messageId":"removeVar","data":{"varName":"Users"},"fix":{"range":[596,603],"text":""},"desc":"Remove unused variable 'Users'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":16,"column":113,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":118},{"ruleId":"no-unused-vars","severity":2,"message":"'BarChart3' is defined but never used.","line":16,"column":127,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":136,"suggestions":[{"messageId":"removeVar","data":{"varName":"BarChart3"},"fix":{"range":[610,621],"text":""},"desc":"Remove unused variable 'BarChart3'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart3' is defined but never used.","line":16,"column":127,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":136},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":24,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":37},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":18,"suggestions":[{"fix":{"range":[1650,1688],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":53,"column":32,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":53,"endColumn":34},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":55,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":55,"endColumn":14,"suggestions":[{"fix":{"range":[1828,1863],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":58,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":58,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":68,"column":10,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":68,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2465,2468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2465,2468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":70,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":70,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":77,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":77,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":78,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":78,"endColumn":57},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":80,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":80,"endColumn":31,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2848,2848],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2848,2848],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":81,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":81,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2879,2879],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[2879,2879],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":83,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":83,"endColumn":20,"suggestions":[{"fix":{"range":[2925,2972],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":90,"column":40,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":90,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":96,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":96,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":97,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":97,"endColumn":58},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":99,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":99,"endColumn":31,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3458,3458],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3458,3458],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":100,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":100,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3489,3489],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3489,3489],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":102,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":102,"endColumn":20,"suggestions":[{"fix":{"range":[3535,3577],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":109,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":109,"endColumn":44},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":115,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":115,"endColumn":20,"suggestions":[{"fix":{"range":[3984,4043],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":119,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":119,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":122,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":122,"endColumn":41},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":125,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":125,"endColumn":20,"suggestions":[{"fix":{"range":[4277,4329],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":129,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":129,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":132,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":132,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":133,"column":7,"nodeType":"Identifier","messageId":"unsafeCall","endLine":133,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'setUserProfile' is not defined.","line":133,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":133,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .allowProfilePictureScraping on an `any` value.","line":134,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":134,"endColumn":70},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":134,"column":71,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":134,"endColumn":73,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4597,4599],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":136,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":136,"endColumn":20,"suggestions":[{"fix":{"range":[4636,4690],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":140,"column":60,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":140,"endColumn":62},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":149,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":149,"endColumn":18,"suggestions":[{"fix":{"range":[4990,5047],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":153,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":153,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .allowProfilePictureScraping on an `any` value.","line":154,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":154,"endColumn":77},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":162,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":162,"endColumn":20,"suggestions":[{"fix":{"range":[5565,5620],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":171,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":171,"endColumn":32},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":177,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":177,"endColumn":29,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6007,6007],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[6007,6007],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":178,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":178,"endColumn":24,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6036,6036],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[6036,6036],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":179,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":179,"endColumn":22,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6060,6060],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[6060,6060],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":203,"column":61,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[6894,6928],"text":"You&apos;re signed in with Google OAuth"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[6894,6928],"text":"You&lsquo;re signed in with Google OAuth"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[6894,6928],"text":"You&#39;re signed in with Google OAuth"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[6894,6928],"text":"You&rsquo;re signed in with Google OAuth"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .totalEvents on an `any` value.","line":265,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":265,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .processedEvents on an `any` value.","line":269,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":269,"endColumn":90},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .unprocessedEvents on an `any` value.","line":273,"column":76,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":273,"endColumn":93},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .futureEvents on an `any` value.","line":277,"column":74,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":277,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":367,"column":26,"nodeType":"Identifier","messageId":"anyAssignment","endLine":367,"endColumn":41},{"ruleId":"no-undef","severity":2,"message":"'usePremiumModel' is not defined.","line":367,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":367,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type error.","line":368,"column":47,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":368,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":368,"column":47,"nodeType":"Identifier","messageId":"unsafeCall","endLine":368,"endColumn":65},{"ruleId":"no-undef","severity":2,"message":"'setUsePremiumModel' is not defined.","line":368,"column":47,"nodeType":"Identifier","messageId":"undef","endLine":368,"endColumn":65}],"suppressedMessages":[],"errorCount":37,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\nimport { Key, Zap, CreditCard, Download, Trash2, Shield, Calendar, Brain, RefreshCw, Eye, ExternalLink, Camera, Users, Clock, BarChart3 } from 'lucide-react';\nimport { useState, useEffect } from 'react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\n\nconst handleExportData = async () => {\n  try {\n    const response = await fetch('/api/contacts/export?format=json', {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n\n    if (response.ok) {\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'contacts-export.json';\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      alert('Data exported successfully!');\n    } else {\n      throw new Error('Export failed');\n    }\n  } catch (error) {\n    console.error('Export error:', error);\n    alert('Failed to export data. Please try again.');\n  }\n};\n\nconst handleDeleteAccount = () => {\n  // TODO: Implement account deletion\n  console.log('Deleting account...');\n};\n\nexport default function Settings() {\n  const [isHistoricalSyncLoading, setIsHistoricalSyncLoading] = useState(false);\n  const [isProcessEventsLoading, setIsProcessEventsLoading] = useState(false);\n  const [unprocessedCount, setUnprocessedCount] = useState<number | null>(null);\n  const [allowProfilePictureScraping, setAllowProfilePictureScraping] = useState(false);\n  const [isUpdatingConsent, setIsUpdatingConsent] = useState(false);\n  \n  const [syncMonths, setSyncMonths] = useState(12);\n  const [useFreeModel, setUseFreeModel] = useState(true);\n  \n  const [syncStats, setSyncStats] = useState<any>(null);\n\n  const handleHistoricalSync = async () => {\n    setIsHistoricalSyncLoading(true);\n    try {\n      const response = await apiRequest('POST', '/api/calendar/sync-historical', {\n        months: syncMonths,\n        useFreeModel\n      });\n      const result = await response.json();\n      alert(`Historical sync completed! ${result.message}`);\n      // Refresh counts\n      fetchUnprocessedCount();\n      fetchSyncStats();\n    } catch (error) {\n      console.error('Historical sync error:', error);\n      alert('Failed to sync historical calendar data. Please try again.');\n    } finally {\n      setIsHistoricalSyncLoading(false);\n    }\n  };\n\n  const handleProcessEvents = async () => {\n    setIsProcessEventsLoading(true);\n    try {\n      const response = await apiRequest('POST', '/api/calendar/process-events', {\n        batchSize: 25\n      });\n      const result = await response.json();\n      alert(`Event processing completed! ${result.message}`);\n      // Refresh counts\n      fetchUnprocessedCount();\n      fetchSyncStats();\n    } catch (error) {\n      console.error('Processing error:', error);\n      alert('Failed to process calendar events. Please try again.');\n    } finally {\n      setIsProcessEventsLoading(false);\n    }\n  };\n\n  const fetchUnprocessedCount = async () => {\n    try {\n      const response = await apiRequest('GET', '/api/calendar/unprocessed-count');\n      const data = await response.json() as { count: number };\n      setUnprocessedCount(data.count);\n    } catch (error) {\n      console.error('Failed to fetch unprocessed count:', error);\n    }\n  };\n\n  const fetchSyncStats = async () => {\n    try {\n      const response = await apiRequest('GET', '/api/calendar/sync-stats');\n      const data = await response.json();\n      setSyncStats(data);\n    } catch (error) {\n      console.error('Failed to fetch sync stats:', error);\n    }\n  };\n\n  const fetchUserProfile = async () => {\n    try {\n      const response = await apiRequest('GET', '/api/profile');\n      const data = await response.json();\n      setUserProfile(data);\n      setAllowProfilePictureScraping(data.allowProfilePictureScraping || false);\n    } catch (error) {\n      console.error('Failed to fetch user profile:', error);\n    }\n  };\n\n  const handleGdprConsentChange = async (checked: boolean) => {\n    setIsUpdatingConsent(true);\n    try {\n      const requestBody = {\n        allowProfilePictureScraping: checked,\n        gdprConsentDate: new Date().toISOString(),\n        gdprConsentVersion: '1.0'\n      };\n      \n      console.log('Sending GDPR consent update:', requestBody);\n      \n      const response = await apiRequest('PATCH', '/api/profile/gdpr-consent', requestBody);\n      \n      const updatedUser = await response.json();\n      setAllowProfilePictureScraping(updatedUser.allowProfilePictureScraping);\n      \n      if (checked) {\n        alert('GDPR consent granted. You can now send consent forms to clients and begin profile picture enrichment.');\n      } else {\n        alert('GDPR consent revoked. Profile picture scraping has been disabled.');\n      }\n    } catch (error) {\n      console.error('Failed to update GDPR consent:', error);\n      alert('Failed to update consent settings. Please try again.');\n      // Revert the checkbox state on error\n      setAllowProfilePictureScraping(!checked);\n    } finally {\n      setIsUpdatingConsent(false);\n    }\n  };\n\n  const openConsentForm = () => {\n    window.open('/gdpr-consent-form-template.html', '_blank');\n  };\n\n  // Fetch data on component mount\n  useEffect(() => {\n    fetchUnprocessedCount();\n    fetchUserProfile();\n    fetchSyncStats();\n  }, []);\n\n  return (\n    <div className='space-y-6'>\n  <div>\n    <h1 className='text-3xl font-bold tracking-tight'>Settings</h1>\n    <p className='text-muted-foreground'>Manage your account settings and preferences.</p>\n  </div>\n\n  <div className='grid gap-6'>\n    {/* Password Options */}\n    <Card>\n      <CardHeader>\n        <CardTitle className='flex items-center gap-2'>\n          <Key className='h-5 w-5' />\n          Password Options\n        </CardTitle>\n        <CardDescription>Manage your password and authentication settings.</CardDescription>\n      </CardHeader>\n      <CardContent className='space-y-4'>\n        <div className='flex items-center justify-between'>\n          <div>\n            <p className='font-medium'>Google Authentication</p>\n            <p className='text-sm text-muted-foreground'>You're signed in with Google OAuth</p>\n          </div>\n          <Badge variant='secondary'>Active</Badge>\n        </div>\n        <Separator />\n        <div className='flex items-center justify-between'>\n          <div>\n            <p className='font-medium'>Two-Factor Authentication</p>\n            <p className='text-sm text-muted-foreground'>\n              Add an extra layer of security to your account\n            </p>\n          </div>\n          <Button variant='outline' size='sm'>\n            <Shield className='h-4 w-4 mr-2' />\n            Enable 2FA\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n\n    {/* Integrations */}\n    <Card>\n      <CardHeader>\n        <CardTitle className='flex items-center gap-2'>\n          <Zap className='h-5 w-5' />\n          Integrations\n        </CardTitle>\n        <CardDescription>Connect and manage your third-party integrations.</CardDescription>\n      </CardHeader>\n      <CardContent className='space-y-4'>\n        <div className='flex items-center justify-between'>\n          <div>\n            <p className='font-medium'>Google Workspace</p>\n            <p className='text-sm text-muted-foreground'>Gmail, Calendar, and Drive integration</p>\n          </div>\n          <Badge variant='default'>Connected</Badge>\n        </div>\n        <Separator />\n        <div className='flex items-center justify-between'>\n          <div>\n            <p className='font-medium'>OpenAI Integration</p>\n            <p className='text-sm text-muted-foreground'>AI-powered insights and assistance</p>\n          </div>\n          <Badge variant='default'>Active</Badge>\n        </div>\n      </CardContent>\n    </Card>\n\n    {/* Calendar Data Management */}\n    <Card>\n      <CardHeader>\n        <CardTitle className='flex items-center gap-2'>\n          <Calendar className='h-5 w-5' />\n          Intelligent Calendar Management\n        </CardTitle>\n        <CardDescription>Sync and process your Google Calendar events with AI-powered filtering and deduplication.</CardDescription>\n      </CardHeader>\n      <CardContent className='space-y-6'>\n        {/* Sync Statistics */}\n        {syncStats && (\n          <div className='grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-muted/50 rounded-lg'>\n            <div className='text-center'>\n              <p className='text-2xl font-bold text-teal-600'>{syncStats.totalEvents}</p>\n              <p className='text-xs text-muted-foreground'>Total Events</p>\n            </div>\n            <div className='text-center'>\n              <p className='text-2xl font-bold text-green-600'>{syncStats.processedEvents}</p>\n              <p className='text-xs text-muted-foreground'>Processed</p>\n            </div>\n            <div className='text-center'>\n              <p className='text-2xl font-bold text-orange-600'>{syncStats.unprocessedEvents}</p>\n              <p className='text-xs text-muted-foreground'>Pending</p>\n            </div>\n            <div className='text-center'>\n              <p className='text-2xl font-bold text-blue-600'>{syncStats.futureEvents}</p>\n              <p className='text-xs text-muted-foreground'>Future Events</p>\n            </div>\n          </div>\n        )}\n        \n        {/* Historical Sync */}\n        <div className='space-y-4'>\n          <div className='flex items-start justify-between'>\n            <div className='flex-1'>\n              <p className='font-medium flex items-center gap-2'>\n                <Clock className='h-4 w-4' />\n                Historical Calendar Sync\n              </p>\n              <p className='text-sm text-muted-foreground mt-1'>\n                One-time import of historical calendar events with intelligent filtering\n              </p>\n            </div>\n          </div>\n          \n          <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>\n            <div className='space-y-2'>\n              <Label htmlFor='sync-months'>Time Period (Months)</Label>\n              <Select value={syncMonths.toString()} onValueChange={(value) => setSyncMonths(parseInt(value))}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value='1'>1 Month</SelectItem>\n                  <SelectItem value='3'>3 Months</SelectItem>\n                  <SelectItem value='6'>6 Months</SelectItem>\n                  <SelectItem value='12'>1 Year (Recommended)</SelectItem>\n                  <SelectItem value='18'>18 Months</SelectItem>\n                  <SelectItem value='24'>2 Years (Max)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className='space-y-2'>\n              <Label>Model Selection</Label>\n              <div className='flex items-center space-x-2'>\n                <Checkbox \n                  id='use-free-model'\n                  checked={useFreeModel}\n                  onCheckedChange={(checked) => setUseFreeModel(checked === true)}\n                />\n                <Label htmlFor='use-free-model' className='text-sm'>\n                  Use free model (recommended for bulk processing)\n                </Label>\n              </div>\n            </div>\n          </div>\n          \n          <div className='flex justify-end'>\n            <Button \n              onClick={handleHistoricalSync} \n              disabled={isHistoricalSyncLoading}\n              variant='outline' \n              size='sm'\n            >\n              {isHistoricalSyncLoading ? (\n                <RefreshCw className='h-4 w-4 mr-2 animate-spin' />\n              ) : (\n                <RefreshCw className='h-4 w-4 mr-2' />\n              )}\n              {isHistoricalSyncLoading ? 'Syncing...' : `Sync ${syncMonths} Month${syncMonths !== 1 ? 's' : ''}`}\n            </Button>\n          </div>\n        </div>\n        \n        <Separator />\n        \n        {/* Ongoing Processing */}\n        <div className='flex items-center justify-between'>\n          <div className='flex-1'>\n            <p className='font-medium flex items-center gap-2'>\n              <Brain className='h-4 w-4' />\n              Smart Event Processing\n            </p>\n            <p className='text-sm text-muted-foreground'>\n              Process unprocessed events with premium AI model and intelligent filtering\n              {unprocessedCount !== null && unprocessedCount > 0 && (\n                <span className='block mt-1 font-medium text-orange-600'>\n                  {unprocessedCount} events pending processing\n                </span>\n              )}\n            </p>\n            <div className='flex items-center space-x-2 mt-2'>\n              <Checkbox \n                id='use-premium-model'\n                checked={usePremiumModel}\n                onCheckedChange={(checked) => setUsePremiumModel(checked === true)}\n              />\n              <Label htmlFor='use-premium-model' className='text-sm'>\n                Use premium model (better accuracy, higher cost)\n              </Label>\n            </div>\n          </div>\n          <Button \n            onClick={handleProcessEvents} \n            disabled={isProcessEventsLoading || (unprocessedCount === 0)}\n            variant='outline' \n            size='sm'\n          >\n            {isProcessEventsLoading ? (\n              <Brain className='h-4 w-4 mr-2 animate-spin' />\n            ) : (\n              <Brain className='h-4 w-4 mr-2' />\n            )}\n            {isProcessEventsLoading ? 'Processing...' : 'Process Events'}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n\n    {/* Privacy & GDPR Settings */}\n    <Card>\n      <CardHeader>\n        <CardTitle className='flex items-center gap-2'>\n          <Eye className='h-5 w-5' />\n          Privacy & GDPR Settings\n        </CardTitle>\n        <CardDescription>Manage your privacy settings and consent for data processing.</CardDescription>\n      </CardHeader>\n      <CardContent className='space-y-4'>\n        <div className='space-y-4'>\n          <div className='flex items-start space-x-3'>\n            <Checkbox \n              id='gdpr-consent'\n              checked={allowProfilePictureScraping}\n              onCheckedChange={handleGdprConsentChange}\n              disabled={isUpdatingConsent}\n            />\n            <div className='space-y-1 leading-none'>\n              <Label htmlFor='gdpr-consent' className='text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'>\n                Allow Profile Picture Scraping\n              </Label>\n              <p className='text-xs text-muted-foreground'>\n                I consent to the collection of public profile pictures from social media platforms (LinkedIn, Facebook, X, Instagram, GitHub) for client contact enhancement. This enables sending GDPR consent forms to clients and enriching their profiles with public images.\n              </p>\n            </div>\n          </div>\n          \n          {allowProfilePictureScraping && (\n            <div className='ml-6 p-4 bg-green-50 border border-green-200 rounded-lg'>\n              <div className='flex items-center gap-2 text-green-700 font-medium mb-2'>\n                <Shield className='h-4 w-4' />\n                GDPR Consent Active\n              </div>\n              <p className='text-sm text-green-600 mb-3'>\n                You have enabled profile picture scraping. You can now send consent forms to clients and begin enriching their contact records with public social media profile pictures.\n              </p>\n              <div className='flex gap-2'>\n                <Button\n                  onClick={openConsentForm}\n                  variant='outline'\n                  size='sm'\n                  className='text-green-700 border-green-300 hover:bg-green-100'\n                >\n                  <ExternalLink className='h-4 w-4 mr-2' />\n                  View Consent Form Template\n                </Button>\n              </div>\n            </div>\n          )}\n          \n          {!allowProfilePictureScraping && (\n            <div className='ml-6 p-4 bg-amber-50 border border-amber-200 rounded-lg'>\n              <div className='flex items-center gap-2 text-amber-700 font-medium mb-2'>\n                <Shield className='h-4 w-4' />\n                GDPR Consent Required\n              </div>\n              <p className='text-sm text-amber-600'>\n                To enable profile picture scraping for client contacts, you must first consent to the data processing. This will allow you to:\n              </p>\n              <ul className='text-sm text-amber-600 mt-2 ml-4 list-disc'>\n                <li>Send GDPR consent forms to clients</li>\n                <li>Scrape public profile pictures from social media</li>\n                <li>Enhance client contact records with profile images</li>\n                <li>Use fallback avatars for non-consented clients</li>\n              </ul>\n            </div>\n          )}\n        </div>\n        \n        <Separator />\n        \n        <div className='flex items-center justify-between'>\n          <div>\n            <p className='font-medium'>Data Processing Agreement</p>\n            <p className='text-sm text-muted-foreground'>\n              Review the full GDPR consent form and data processing terms\n            </p>\n          </div>\n          <Button\n            onClick={openConsentForm}\n            variant='outline'\n            size='sm'\n          >\n            <ExternalLink className='h-4 w-4 mr-2' />\n            View Form\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n\n    {/* Subscription Options */}\n    <Card>\n      <CardHeader>\n        <CardTitle className='flex items-center gap-2'>\n          <CreditCard className='h-5 w-5' />\n          Subscription Options\n        </CardTitle>\n        <CardDescription>Manage your subscription and billing information.</CardDescription>\n      </CardHeader>\n      <CardContent className='space-y-4'>\n        <div className='flex items-center justify-between'>\n          <div>\n            <p className='font-medium'>Current Plan</p>\n            <p className='text-sm text-muted-foreground'>\n              Professional Plan - Full access to all features\n            </p>\n          </div>\n          <Badge variant='default'>Active</Badge>\n        </div>\n        <Separator />\n        <div className='flex gap-2'>\n          <Button variant='outline' size='sm'>\n            View Billing\n          </Button>\n          <Button variant='outline' size='sm'>\n            Upgrade Plan\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n\n    {/* GDPR & Data Management */}\n    <Card>\n      <CardHeader>\n        <CardTitle className='flex items-center gap-2'>\n          <Download className='h-5 w-5' />\n          Data Management\n        </CardTitle>\n        <CardDescription>Export your data or delete your account.</CardDescription>\n      </CardHeader>\n      <CardContent className='space-y-4'>\n        <div className='flex items-center justify-between'>\n          <div>\n            <p className='font-medium'>Export Data</p>\n            <p className='text-sm text-muted-foreground'>Download all your data in JSON format</p>\n          </div>\n          <Button variant='outline' size='sm' onClick={handleExportData}>\n            <Download className='h-4 w-4 mr-2' />\n            Export\n          </Button>\n        </div>\n        <Separator />\n        <div className='flex items-center justify-between'>\n          <div>\n            <p className='font-medium'>Delete Account</p>\n            <p className='text-sm text-muted-foreground'>\n              Permanently delete your account and all data\n            </p>\n          </div>\n          <AlertDialog>\n            <AlertDialogTrigger asChild>\n              <Button variant='destructive' size='sm'>\n                <Trash2 className='h-4 w-4 mr-2' />\n                Delete Account\n              </Button>\n            </AlertDialogTrigger>\n            <AlertDialogContent>\n              <AlertDialogHeader>\n                <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n                <AlertDialogDescription>\n                  This action cannot be undone. This will permanently delete your account and remove\n                  all your data from our servers.\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <AlertDialogFooter>\n                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                <AlertDialogAction\n                  onClick={handleDeleteAccount}\n                  className='bg-destructive text-destructive-foreground hover:bg-destructive/90'\n                >\n                  Delete Account\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        </div>\n      </CardContent>\n    </Card>\n  </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/pages/Tasks.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'filter' is defined but never used.","line":61,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"filter"},"fix":{"range":[1721,1735],"text":""},"desc":"Remove unused variable 'filter'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'term' is defined but never used.","line":63,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"term"},"fix":{"range":[1786,1798],"text":""},"desc":"Remove unused variable 'term'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filter' is defined but never used.","line":65,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"filter"},"fix":{"range":[1871,1885],"text":""},"desc":"Remove unused variable 'filter'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'priority' is defined but never used.","line":66,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"priority"},"fix":{"range":[1917,1933],"text":""},"desc":"Remove unused variable 'priority'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'status' is defined but never used.","line":67,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"status"},"fix":{"range":[1965,1979],"text":""},"desc":"Remove unused variable 'status'."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":81,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":81,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":90,"column":17,"nodeType":"AssignmentPattern","messageId":"unsafeArrayPatternFromTuple","endLine":90,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `Promise<any>`.","line":94,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":94,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":98,"column":17,"nodeType":"AssignmentPattern","messageId":"unsafeArrayPatternFromTuple","endLine":98,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `Promise<any>`.","line":102,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":102,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":106,"column":17,"nodeType":"AssignmentPattern","messageId":"unsafeArrayPatternFromTuple","endLine":106,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `Promise<any>`.","line":110,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":110,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe array destructuring of a tuple element with an `any` value.","line":114,"column":17,"nodeType":"Identifier","messageId":"unsafeArrayPatternFromTuple","endLine":114,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `Promise<any>`.","line":118,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":118,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":123,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":132,"endColumn":5},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":123,"column":25,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":123,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `any` value.","line":123,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":123,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":135,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":135,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":151,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":151,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":198,"column":43,"nodeType":"Identifier","messageId":"anyAssignment","endLine":198,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .totalTasks on an `any` value.","line":213,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":213,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .pendingTasks on an `any` value.","line":214,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":214,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .completionRate on an `any` value.","line":224,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":224,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .completionRate on an `any` value.","line":225,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":225,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .overdueTasks on an `any` value.","line":235,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":235,"endColumn":87},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .todaysTasks on an `any` value.","line":236,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":236,"endColumn":82},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .aiTasksInProgress on an `any` value.","line":246,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":246,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":262,"column":14,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":262,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `any` value.","line":262,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":262,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":262,"column":80,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":262,"endColumn":86},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":272,"column":20,"nodeType":"Identifier","messageId":"anyAssignment","endLine":272,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":273,"column":23,"nodeType":"Identifier","messageId":"anyAssignment","endLine":273,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":287,"column":40,"nodeType":"Identifier","messageId":"anyAssignment","endLine":287,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":291,"column":34,"nodeType":"Identifier","messageId":"anyAssignment","endLine":291,"endColumn":42},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":299,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":299,"endColumn":18},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":318,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":318,"endColumn":67,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[10652,10652],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[10652,10652],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":319,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":319,"endColumn":77,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[10719,10719],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[10719,10719],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":324,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":324,"endColumn":43},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":494,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":494,"endColumn":24},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":501,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":501,"endColumn":76,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[17907,17907],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[17907,17907],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":510,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":510,"endColumn":76,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[18302,18302],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[18302,18302],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":583,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":583,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":607,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":607,"endColumn":26},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":621,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":621,"endColumn":67,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[22343,22343],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[22343,22343],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":622,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":622,"endColumn":77,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[22410,22410],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[22410,22410],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":628,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":628,"endColumn":47},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":750,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":750,"endColumn":29},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":761,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":761,"endColumn":70,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[26981,26981],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[26981,26981],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":767,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":767,"endColumn":47}],"suppressedMessages":[],"errorCount":38,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { Task, Project, AiSuggestion, InsertTask } from '@shared/schema';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { toast } from '@/hooks/use-toast';\nimport {\n  Plus,\n  Calendar as CalendarIcon,\n  Clock,\n  User,\n  Bot,\n  CheckCircle,\n  Circle,\n  MoreHorizontal,\n  Lightbulb,\n  Target,\n  TrendingUp,\n  AlertCircle,\n  Search,\n} from 'lucide-react';\nimport { format } from 'date-fns';\n\n// Component-specific interfaces\ninterface TasksTabProps {\n  tasks: Task[];\n  projects: Project[];\n  isLoading: boolean;\n  taskFilter: string;\n  setTaskFilter: (filter: string) => void;\n  searchTerm: string;\n  setSearchTerm: (term: string) => void;\n  selectedProjectFilter: string;\n  setSelectedProjectFilter: (filter: string) => void;\n  getPriorityColor: (priority: string) => string;\n  getStatusColor: (status: string) => string;\n}\n\ninterface TaskUpdateData {\n  status?: string;\n  title?: string;\n  description?: string;\n  priority?: string;\n  dueDate?: string;\n  completedAt?: string;\n}\n\n\n\nexport default function Tasks() {\n  const [selectedTab, setSelectedTab] = useState('tasks');\n  const [taskFilter, setTaskFilter] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showCreateTask, setShowCreateTask] = useState(false);\n  const [showCreateProject, setShowCreateProject] = useState(false);\n  const [selectedProjectFilter, setSelectedProjectFilter] = useState('all');\n\n  // Fetch data\n  const { data: tasks = [], isLoading: tasksLoading } = useQuery({\n    queryKey: ['/api/tasks'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/tasks');\n      return response.json();\n    },\n  });\n\n  const { data: projects = [] } = useQuery({\n    queryKey: ['/api/projects'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/projects');\n      return response.json();\n    },\n  });\n\n  const { data: aiSuggestions = [] } = useQuery({\n    queryKey: ['/api/ai-suggestions'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/ai-suggestions');\n      return response.json();\n    },\n  });\n\n  const { data: analytics } = useQuery({\n    queryKey: ['/api/tasks/analytics'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/tasks/analytics');\n      return response.json();\n    },\n  });\n\n  // Filter tasks\n  const filteredTasks = tasks.filter((task: Task) => {\n    const matchesSearch =\n      task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      task.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = taskFilter === 'all' || task.status === taskFilter;\n    const matchesProject =\n      selectedProjectFilter === 'all' || task.projectId === selectedProjectFilter;\n\n    return matchesSearch && matchesStatus && matchesProject;\n  });\n\n  // Get priority color\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n        return 'bg-red-500';\n      case 'high':\n        return 'bg-orange-500';\n      case 'medium':\n        return 'bg-yellow-500';\n      case 'low':\n        return 'bg-green-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  // Get status color\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'in_progress':\n        return 'bg-blue-100 text-blue-800';\n      case 'pending':\n        return 'bg-gray-100 text-gray-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      case 'waiting_approval':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className='container mx-auto p-6'>\n      <div className='flex justify-between items-center mb-6'>\n        <div>\n          <h1 className='text-3xl font-bold text-gray-900 dark:text-white'>Task Management</h1>\n          <p className='text-gray-600 dark:text-gray-400'>\n            Manage your wellness practice with AI-powered task assistance\n          </p>\n        </div>\n        <div className='flex gap-2'>\n          <Dialog open={showCreateProject} onOpenChange={setShowCreateProject}>\n            <DialogTrigger asChild>\n              <Button variant='outline'>\n                <Plus className='h-4 w-4 mr-2' />\n                New Project\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <CreateProjectDialog onClose={() => setShowCreateProject(false)} />\n            </DialogContent>\n          </Dialog>\n\n          <Dialog open={showCreateTask} onOpenChange={setShowCreateTask}>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className='h-4 w-4 mr-2' />\n                New Task\n              </Button>\n            </DialogTrigger>\n            <DialogContent className='max-w-2xl'>\n              <CreateTaskDialog projects={projects} onClose={() => setShowCreateTask(false)} />\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Analytics Cards */}\n      {analytics && (\n        <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6'>\n          <Card>\n            <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>\n              <CardTitle className='text-sm font-medium'>Total Tasks</CardTitle>\n              <Target className='h-4 w-4 text-muted-foreground' />\n            </CardHeader>\n            <CardContent>\n              <div className='text-2xl font-bold'>{analytics.totalTasks}</div>\n              <p className='text-xs text-muted-foreground'>{analytics.pendingTasks} pending</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>\n              <CardTitle className='text-sm font-medium'>Completion Rate</CardTitle>\n              <TrendingUp className='h-4 w-4 text-muted-foreground' />\n            </CardHeader>\n            <CardContent>\n              <div className='text-2xl font-bold'>{analytics.completionRate}%</div>\n              <Progress value={parseFloat(analytics.completionRate)} className='mt-2' />\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>\n              <CardTitle className='text-sm font-medium'>Overdue Tasks</CardTitle>\n              <AlertCircle className='h-4 w-4 text-red-500' />\n            </CardHeader>\n            <CardContent>\n              <div className='text-2xl font-bold text-red-600'>{analytics.overdueTasks}</div>\n              <p className='text-xs text-muted-foreground'>{analytics.todaysTasks} due today</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>\n              <CardTitle className='text-sm font-medium'>AI Assistant</CardTitle>\n              <Bot className='h-4 w-4 text-blue-500' />\n            </CardHeader>\n            <CardContent>\n              <div className='text-2xl font-bold'>{analytics.aiTasksInProgress}</div>\n              <p className='text-xs text-muted-foreground'>tasks in progress</p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      <Tabs value={selectedTab} onValueChange={setSelectedTab} className='w-full'>\n        <TabsList className='grid w-full grid-cols-3'>\n          <TabsTrigger value='tasks' className='flex items-center gap-2'>\n            <CheckCircle className='h-4 w-4' />\n            Tasks\n          </TabsTrigger>\n          <TabsTrigger value='suggestions' className='flex items-center gap-2'>\n            <Lightbulb className='h-4 w-4' />\n            AI Suggestions (\n            {aiSuggestions.filter((s: AiSuggestion) => s.status === 'pending').length})\n          </TabsTrigger>\n          <TabsTrigger value='projects' className='flex items-center gap-2'>\n            <Target className='h-4 w-4' />\n            Projects\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value='tasks' className='mt-6'>\n          <TasksTab\n            tasks={filteredTasks}\n            projects={projects}\n            isLoading={tasksLoading}\n            taskFilter={taskFilter}\n            setTaskFilter={setTaskFilter}\n            searchTerm={searchTerm}\n            setSearchTerm={setSearchTerm}\n            selectedProjectFilter={selectedProjectFilter}\n            setSelectedProjectFilter={setSelectedProjectFilter}\n            getPriorityColor={getPriorityColor}\n            getStatusColor={getStatusColor}\n          />\n        </TabsContent>\n\n        <TabsContent value='suggestions' className='mt-6'>\n          <SuggestionsTab suggestions={aiSuggestions} />\n        </TabsContent>\n\n        <TabsContent value='projects' className='mt-6'>\n          <ProjectsTab projects={projects} />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\n// Tasks Tab Component\nfunction TasksTab({\n  tasks,\n  projects,\n  isLoading,\n  taskFilter,\n  setTaskFilter,\n  searchTerm,\n  setSearchTerm,\n  selectedProjectFilter,\n  setSelectedProjectFilter,\n  getPriorityColor,\n  getStatusColor,\n}: TasksTabProps) {\n  const queryClient = useQueryClient();\n\n  const updateTaskMutation = useMutation({\n    mutationFn: ({ taskId, updates }: { taskId: string; updates: TaskUpdateData }) =>\n      apiRequest('PATCH', `/api/tasks/${taskId}`, updates),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks/analytics'] });\n      toast({ title: 'Task updated successfully' });\n    },\n  });\n\n  const toggleTaskStatus = (task: Task) => {\n    const newStatus = task.status === 'completed' ? 'pending' : 'completed';\n    const updates: TaskUpdateData = { status: newStatus };\n\n    if (newStatus === 'completed') {\n      updates.completedAt = new Date().toISOString();\n    } else {\n      updates.completedAt = null;\n    }\n\n    updateTaskMutation.mutate({ taskId: task.id, updates });\n  };\n\n  if (isLoading) {\n    return <div className='text-center py-8'>Loading tasks...</div>;\n  }\n\n  return (\n    <div className='space-y-4'>\n      {/* Filters */}\n      <div className='flex flex-wrap gap-4 items-center'>\n        <div className='flex items-center gap-2'>\n          <Search className='h-4 w-4 text-gray-500' />\n          <Input\n            placeholder='Search tasks...'\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className='w-64'\n          />\n        </div>\n\n        <Select value={taskFilter} onValueChange={setTaskFilter}>\n          <SelectTrigger className='w-40'>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value='all'>All Status</SelectItem>\n            <SelectItem value='pending'>Pending</SelectItem>\n            <SelectItem value='in_progress'>In Progress</SelectItem>\n            <SelectItem value='completed'>Completed</SelectItem>\n            <SelectItem value='waiting_approval'>Waiting Approval</SelectItem>\n          </SelectContent>\n        </Select>\n\n        <Select value={selectedProjectFilter} onValueChange={setSelectedProjectFilter}>\n          <SelectTrigger className='w-40'>\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value='all'>All Projects</SelectItem>\n            {projects.map((project: Project) => (\n              <SelectItem key={project.id} value={project.id}>\n                {project.name}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Task List */}\n      <div className='space-y-3'>\n        {tasks.length === 0 ? (\n          <Card>\n            <CardContent className='text-center py-8'>\n              <CheckCircle className='h-12 w-12 text-gray-400 mx-auto mb-4' />\n              <h3 className='text-lg font-medium text-gray-900 dark:text-white mb-2'>\n                No tasks found\n              </h3>\n              <p className='text-gray-600 dark:text-gray-400'>\n                Create your first task or adjust your filters to see existing tasks.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          tasks.map((task: Task) => (\n            <Card key={task.id} className='hover:shadow-md transition-shadow'>\n              <CardContent className='p-4'>\n                <div className='flex items-start justify-between'>\n                  <div className='flex items-start gap-3 flex-1'>\n                    <button\n                      onClick={() => toggleTaskStatus(task)}\n                      className='mt-1 focus:outline-none'\n                    >\n                      {task.status === 'completed' ? (\n                        <CheckCircle className='h-5 w-5 text-green-500' />\n                      ) : (\n                        <Circle className='h-5 w-5 text-gray-400 hover:text-green-500' />\n                      )}\n                    </button>\n\n                    <div className='flex-1'>\n                      <div className='flex items-center gap-2 mb-1'>\n                        <h3\n                          className={`font-medium ${\n                            task.status === 'completed'\n                              ? 'line-through text-gray-500'\n                              : 'text-gray-900 dark:text-white'\n                          }`}\n                        >\n                          {task.title}\n                        </h3>\n                        <div\n                          className={`w-2 h-2 rounded-full ${getPriorityColor(task.priority)}`}\n                        />\n                        {task.owner === 'ai_assistant' && <Bot className='h-4 w-4 text-blue-500' />}\n                        {task.isAiGenerated && (\n                          <Badge variant='secondary' className='text-xs'>\n                            AI\n                          </Badge>\n                        )}\n                      </div>\n\n                      {task.description && (\n                        <p className='text-sm text-gray-600 dark:text-gray-400 mb-2'>\n                          {task.description}\n                        </p>\n                      )}\n\n                      <div className='flex items-center gap-4 text-sm text-gray-500'>\n                        <Badge className={getStatusColor(task.status)}>\n                          {task.status.replace('_', ' ')}\n                        </Badge>\n\n                        {task.dueDate && (\n                          <div className='flex items-center gap-1'>\n                            <CalendarIcon className='h-3 w-3' />\n                            {format(new Date(task.dueDate), 'MMM d')}\n                          </div>\n                        )}\n\n                        {task.assignedContactIds && task.assignedContactIds.length > 0 && (\n                          <div className='flex items-center gap-1'>\n                            <User className='h-3 w-3' />\n                            {task.assignedContactIds.length} contacts\n                          </div>\n                        )}\n\n                        {task.estimatedMinutes && (\n                          <div className='flex items-center gap-1'>\n                            <Clock className='h-3 w-3' />\n                            {task.estimatedMinutes}m\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant='ghost' size='sm'>\n                        <MoreHorizontal className='h-4 w-4' />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align='end'>\n                      <DropdownMenuItem onClick={() => {}}>Edit Task</DropdownMenuItem>\n                      <DropdownMenuItem onClick={() => {}}>View Details</DropdownMenuItem>\n                      <DropdownMenuItem className='text-red-600'>Delete Task</DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\n// AI Suggestions Tab Component\nfunction SuggestionsTab({ suggestions }: { suggestions: AiSuggestion[] }) {\n  const queryClient = useQueryClient();\n\n  const approveSuggestionMutation = useMutation({\n    mutationFn: (suggestionId: string) =>\n      apiRequest('PATCH', `/api/ai-suggestions/${suggestionId}/approve`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/ai-suggestions'] });\n      toast({ title: 'Suggestion approved and executed' });\n    },\n  });\n\n  const rejectSuggestionMutation = useMutation({\n    mutationFn: ({ suggestionId, reason }: { suggestionId: string; reason: string }) =>\n      apiRequest('PATCH', `/api/ai-suggestions/${suggestionId}/reject`, { reason }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/ai-suggestions'] });\n      toast({ title: 'Suggestion rejected' });\n    },\n  });\n\n  const pendingSuggestions = suggestions.filter((s) => s.status === 'pending');\n\n  return (\n    <div className='space-y-4'>\n      {pendingSuggestions.length === 0 ? (\n        <Card>\n          <CardContent className='text-center py-8'>\n            <Lightbulb className='h-12 w-12 text-gray-400 mx-auto mb-4' />\n            <h3 className='text-lg font-medium text-gray-900 dark:text-white mb-2'>\n              No pending suggestions\n            </h3>\n            <p className='text-gray-600 dark:text-gray-400'>\n              Your AI assistant will analyze your data and create suggestions that appear here.\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        pendingSuggestions.map((suggestion: AiSuggestion) => (\n          <Card key={suggestion.id}>\n            <CardHeader>\n              <div className='flex items-start justify-between'>\n                <div>\n                  <CardTitle className='text-lg'>{suggestion.title}</CardTitle>\n                  <CardDescription>{suggestion.description}</CardDescription>\n                </div>\n                <Badge\n                  className={`ml-4 ${\n                    suggestion.priority === 'high'\n                      ? 'bg-red-100 text-red-800'\n                      : suggestion.priority === 'medium'\n                      ? 'bg-yellow-100 text-yellow-800'\n                      : 'bg-green-100 text-green-800'\n                  }`}\n                >\n                  {suggestion.priority}\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className='flex gap-3'>\n                <Button\n                  onClick={() => approveSuggestionMutation.mutate(suggestion.id)}\n                  disabled={approveSuggestionMutation.isPending}\n                >\n                  Approve\n                </Button>\n                <Button\n                  variant='outline'\n                  onClick={() =>\n                    rejectSuggestionMutation.mutate({\n                      suggestionId: suggestion.id,\n                      reason: 'Not needed at this time',\n                    })\n                  }\n                  disabled={rejectSuggestionMutation.isPending}\n                >\n                  Reject\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))\n      )}\n    </div>\n  );\n}\n\n// Projects Tab Component\nfunction ProjectsTab({ projects }: { projects: Project[] }) {\n  return (\n    <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'>\n      {projects.map((project: Project) => (\n        <Card key={project.id}>\n          <CardHeader>\n            <div className='flex items-center gap-2'>\n              <div className='w-4 h-4 rounded-full' style={{ backgroundColor: project.color }} />\n              <CardTitle className='text-lg'>{project.name}</CardTitle>\n            </div>\n            {project.description && <CardDescription>{project.description}</CardDescription>}\n          </CardHeader>\n          <CardContent>\n            <p className='text-sm text-gray-500'>\n              Created {format(new Date(project.createdAt), 'MMM d, yyyy')}\n            </p>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n\n// Create Task Dialog Component\nfunction CreateTaskDialog({ projects, onClose }: { projects: Project[]; onClose: () => void }) {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [priority, setPriority] = useState('medium');\n  const [projectId, setProjectId] = useState('');\n  const [dueDate, setDueDate] = useState<Date>();\n  const [delegateToAI, setDelegateToAI] = useState(false);\n\n  const queryClient = useQueryClient();\n\n  const createTaskMutation = useMutation({\n    mutationFn: (taskData: InsertTask) =>\n      apiRequest('POST', '/api/tasks', taskData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks/analytics'] });\n      toast({ title: 'Task created successfully' });\n      onClose();\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!title.trim()) {\n      toast({ title: 'Please enter a task title', variant: 'destructive' });\n      return;\n    }\n\n    const taskData = {\n      title: title.trim(),\n      description: description.trim(),\n      priority,\n      owner: delegateToAI ? 'ai_assistant' : 'user',\n      projectId: projectId || undefined,\n      dueDate: dueDate?.toISOString(),\n      status: 'pending',\n    };\n\n    createTaskMutation.mutate(taskData);\n  };\n\n  return (\n    <DialogHeader>\n      <DialogTitle>Create New Task</DialogTitle>\n      <DialogDescription>\n        Create a task for yourself or delegate it to the AI assistant for processing.\n      </DialogDescription>\n\n      <form onSubmit={handleSubmit} className='space-y-4 pt-4'>\n        <div>\n          <Label htmlFor='title'>Title *</Label>\n          <Input\n            id='title'\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            placeholder='Enter task title...'\n            required\n          />\n        </div>\n\n        <div>\n          <Label htmlFor='description'>Description</Label>\n          <Textarea\n            id='description'\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            placeholder='Describe the task...'\n            rows={3}\n          />\n        </div>\n\n        <div className='grid grid-cols-2 gap-4'>\n          <div>\n            <Label>Priority</Label>\n            <Select value={priority} onValueChange={setPriority}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value='low'>Low</SelectItem>\n                <SelectItem value='medium'>Medium</SelectItem>\n                <SelectItem value='high'>High</SelectItem>\n                <SelectItem value='urgent'>Urgent</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <Label>Project</Label>\n            <Select value={projectId} onValueChange={setProjectId}>\n              <SelectTrigger>\n                <SelectValue placeholder='Select project...' />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=''>No project</SelectItem>\n                {projects.map((project: Project) => (\n                  <SelectItem key={project.id} value={project.id}>\n                    {project.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <div>\n          <Label>Due Date</Label>\n          <Popover>\n            <PopoverTrigger asChild>\n              <Button variant='outline' className='w-full justify-start text-left font-normal'>\n                <CalendarIcon className='mr-2 h-4 w-4' />\n                {dueDate ? format(dueDate, 'PPP') : 'Pick a date'}\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className='w-auto p-0'>\n              <Calendar mode='single' selected={dueDate} onSelect={setDueDate} />\n            </PopoverContent>\n          </Popover>\n        </div>\n\n        <div className='flex items-center space-x-2'>\n          <Switch id='delegate' checked={delegateToAI} onCheckedChange={setDelegateToAI} />\n          <Label htmlFor='delegate' className='flex items-center gap-2'>\n            <Bot className='h-4 w-4' />\n            Delegate to AI Assistant\n          </Label>\n        </div>\n\n        <div className='flex gap-3 pt-4'>\n          <Button type='submit' disabled={createTaskMutation.isPending} className='flex-1'>\n            {createTaskMutation.isPending ? 'Creating...' : 'Create Task'}\n          </Button>\n          <Button type='button' variant='outline' onClick={onClose}>\n            Cancel\n          </Button>\n        </div>\n      </form>\n    </DialogHeader>\n  );\n}\n\n// Create Project Dialog Component\nfunction CreateProjectDialog({ onClose }: { onClose: () => void }) {\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [color, setColor] = useState('#3b82f6');\n\n  const queryClient = useQueryClient();\n\n  const createProjectMutation = useMutation({\n    mutationFn: (projectData: Omit<Project, 'id' | 'createdAt'>) =>\n      apiRequest('POST', '/api/projects', projectData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n      toast({ title: 'Project created successfully' });\n      onClose();\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!name.trim()) {\n      toast({ title: 'Please enter a project name', variant: 'destructive' });\n      return;\n    }\n\n    createProjectMutation.mutate({\n      name: name.trim(),\n      description: description.trim(),\n      color,\n    });\n  };\n\n  return (\n    <DialogHeader>\n      <DialogTitle>Create New Project</DialogTitle>\n      <DialogDescription>\n        Projects help you organize related tasks and track progress on larger goals.\n      </DialogDescription>\n\n      <form onSubmit={handleSubmit} className='space-y-4 pt-4'>\n        <div>\n          <Label htmlFor='name'>Project Name *</Label>\n          <Input\n            id='name'\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            placeholder='Enter project name...'\n            required\n          />\n        </div>\n\n        <div>\n          <Label htmlFor='description'>Description</Label>\n          <Textarea\n            id='description'\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            placeholder='Describe the project...'\n            rows={3}\n          />\n        </div>\n\n        <div>\n          <Label htmlFor='color'>Color</Label>\n          <div className='flex items-center gap-2'>\n            <input\n              type='color'\n              id='color'\n              value={color}\n              onChange={(e) => setColor(e.target.value)}\n              className='w-10 h-10 rounded border border-gray-300 cursor-pointer'\n            />\n            <span className='text-sm text-gray-600'>{color}</span>\n          </div>\n        </div>\n\n        <div className='flex gap-3 pt-4'>\n          <Button type='submit' disabled={createProjectMutation.isPending} className='flex-1'>\n            {createProjectMutation.isPending ? 'Creating...' : 'Create Project'}\n          </Button>\n          <Button type='button' variant='outline' onClick={onClose}>\n            Cancel\n          </Button>\n        </div>\n      </form>\n    </DialogHeader>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/pages/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/client/src/services/aiPhotoFinder.ts","messages":[{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":139,"column":13,"nodeType":"BlockStatement","messageId":"unexpected","endLine":140,"endColumn":6,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[3604,3609],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":170,"column":13,"nodeType":"BlockStatement","messageId":"unexpected","endLine":171,"endColumn":6,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[4551,4556],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":215,"column":13,"nodeType":"BlockStatement","messageId":"unexpected","endLine":216,"endColumn":6,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[5963,5968],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":241,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":241,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6750,6778],"text":"(error.message ?? error.error)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":241,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":241,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6779,6781],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"interface ContactInfo {\n  name: string\n  email?: string\n  company?: string\n  linkedinUrl?: string\n  jobTitle?: string\n}\n\ninterface PhotoSuggestion {\n  id: string\n  url: string\n  source: 'linkedin' | 'gravatar' | 'clearbit' | 'ai_generated'\n  confidence: number // 0-1 rating\n  thumbnailUrl: string\n  metadata?: {\n    size?: { width: number; height: number }\n    format?: string\n    sourceUrl?: string\n    description?: string\n  }\n}\n\ninterface ClearbitPersonResponse {\n  avatar?: string\n  name?: {\n    fullName?: string\n    givenName?: string\n    familyName?: string\n  }\n  employment?: {\n    name?: string\n    title?: string\n    domain?: string\n  }\n  [key: string]: unknown\n}\n\ninterface PhotoDownloadResponse {\n  avatarUrl?: string\n  success?: boolean\n  message?: string\n  [key: string]: unknown\n}\n\ninterface ErrorResponse {\n  message?: string\n  error?: string\n  [key: string]: unknown\n}\n\ninterface AIPhotoFinderResult {\n  success: boolean\n  suggestions: PhotoSuggestion[]\n  error?: string\n}\n\nclass AIPhotoFinderService {\n  private apiKey?: string\n\n  constructor() {\n    this.apiKey = localStorage.getItem('openai_api_key') ?? undefined\n  }\n\n  /**\n   * Find photo suggestions for a contact using multiple sources\n   */\n  async findPhotoSuggestions(contactInfo: ContactInfo): Promise<AIPhotoFinderResult> {\n    try {\n      const suggestions: PhotoSuggestion[] = []\n\n      // Try Gravatar first (most reliable for email-based lookup)\n      if (contactInfo.email) {\n        const gravatarSuggestion = await this.getGravatarPhoto(contactInfo.email)\n        if (gravatarSuggestion) {\n          suggestions.push(gravatarSuggestion)\n        }\n      }\n\n      // Try Clearbit Logo API for company-based lookup\n      if (contactInfo.email) {\n        const clearbitSuggestion = await this.getClearbitPhoto(contactInfo.email)\n        if (clearbitSuggestion) {\n          suggestions.push(clearbitSuggestion)\n        }\n      }\n\n      // Try LinkedIn search (requires manual review)\n      if (contactInfo.name) {\n        const linkedinSuggestions = await this.searchLinkedInPhotos(contactInfo)\n        suggestions.push(...linkedinSuggestions)\n      }\n\n      // Generate AI avatar if no photos found\n      if (suggestions.length === 0) {\n        const aiSuggestion = await this.generateAIAvatar(contactInfo)\n        if (aiSuggestion) {\n          suggestions.push(aiSuggestion)\n        }\n      }\n\n      return {\n        success: true,\n        suggestions: suggestions.sort((a, b) => b.confidence - a.confidence)\n      }\n    } catch (error) {\n      return {\n        success: false,\n        suggestions: [],\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      }\n    }\n  }\n\n  /**\n   * Get Gravatar photo by email hash\n   */\n  private async getGravatarPhoto(email: string): Promise<PhotoSuggestion | null> {\n    try {\n      const emailHash = await this.md5Hash(email.toLowerCase().trim())\n      const gravatarUrl = `https://www.gravatar.com/avatar/${emailHash}?s=200&d=404`\n      \n      // Check if Gravatar exists\n      const response = await fetch(gravatarUrl, { method: 'HEAD' })\n      if (response.ok) {\n        return {\n          id: `gravatar_${emailHash}`,\n          url: gravatarUrl,\n          source: 'gravatar',\n          confidence: 0.8,\n          thumbnailUrl: `https://www.gravatar.com/avatar/${emailHash}?s=50&d=404`,\n          metadata: {\n            size: { width: 200, height: 200 },\n            format: 'jpeg',\n            sourceUrl: `https://gravatar.com/profiles/${emailHash}`,\n            description: 'Gravatar profile photo'\n          }\n        }\n      }\n    } catch {\n    }\n    return null\n  }\n\n  /**\n   * Get Clearbit person photo by email\n   */\n  private async getClearbitPhoto(email: string): Promise<PhotoSuggestion | null> {\n    try {\n      const clearbitUrl = `https://person.clearbit.com/v1/people/email/${email}`\n      \n      // Note: This is a simplified version. In production, you'd need Clearbit API key\n      const response = await fetch(clearbitUrl)\n      if (response.ok) {\n        const data = await response.json() as ClearbitPersonResponse\n        if (data.avatar && typeof data.avatar === 'string') {\n          return {\n            id: `clearbit_${email}`,\n            url: data.avatar,\n            source: 'clearbit',\n            confidence: 0.7,\n            thumbnailUrl: data.avatar,\n            metadata: {\n              format: 'jpeg',\n              sourceUrl: clearbitUrl,\n              description: 'Clearbit person profile photo'\n            }\n          }\n        }\n      }\n    } catch {\n    }\n    return null\n  }\n\n  /**\n   * Search LinkedIn for potential profile photos\n   * Note: This is a placeholder - actual LinkedIn API integration would require proper authentication\n   */\n  private async searchLinkedInPhotos(): Promise<PhotoSuggestion[]> {\n    // This would integrate with LinkedIn API or a LinkedIn scraping service\n    // For now, return empty array as this requires manual review anyway\n    return []\n  }\n\n  /**\n   * Generate an AI avatar using the contact's name and information\n   */\n  private async generateAIAvatar(contactInfo: ContactInfo): Promise<PhotoSuggestion | null> {\n    if (!this.apiKey) {\n      return null\n    }\n\n    try {\n      // Use a service like DiceBear or generate a professional avatar\n      const initials = contactInfo.name\n        .split(' ')\n        .map(n => n[0])\n        .join('')\n        .toUpperCase()\n\n      // Generate using DiceBear (free avatar generation service)\n      const avatarUrl = `https://api.dicebear.com/7.x/initials/svg?seed=${encodeURIComponent(contactInfo.name)}&backgroundColor=random&fontSize=40`\n      \n      return {\n        id: `ai_generated_${Date.now()}`,\n        url: avatarUrl,\n        source: 'ai_generated',\n        confidence: 0.5,\n        thumbnailUrl: avatarUrl,\n        metadata: {\n          format: 'svg',\n          description: `AI-generated avatar for ${contactInfo.name} (${initials})`\n        }\n      }\n    } catch {\n    }\n    return null\n  }\n\n  /**\n   * Download and process a photo suggestion\n   */\n  async downloadAndProcessPhoto(suggestion: PhotoSuggestion, contactId: string): Promise<{ success: boolean; avatarUrl?: string; error?: string }> {\n    try {\n      const response = await fetch('/api/contacts/ai-photo-download', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify({\n          contactId,\n          photoUrl: suggestion.url,\n          source: suggestion.source,\n          metadata: suggestion.metadata\n        })\n      })\n\n      if (!response.ok) {\n        const error = await response.json() as ErrorResponse\n        const errorMessage = error.message || error.error || 'Download failed'\n        throw new Error(typeof errorMessage === 'string' ? errorMessage : 'Download failed')\n      }\n\n      const result = await response.json() as PhotoDownloadResponse\n      return {\n        success: true,\n        avatarUrl: typeof result.avatarUrl === 'string' ? result.avatarUrl : undefined\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Download failed'\n      }\n    }\n  }\n\n  /**\n   * MD5 hash function for Gravatar\n   */\n  private async md5Hash(text: string): Promise<string> {\n    const encoder = new TextEncoder()\n    const data = encoder.encode(text)\n    const hashBuffer = await crypto.subtle.digest('MD5', data)\n    const hashArray = Array.from(new Uint8Array(hashBuffer))\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('')\n  }\n\n  /**\n   * Batch process photo suggestions for multiple contacts\n   */\n  async batchFindPhotos(contacts: ContactInfo[]): Promise<Map<string, AIPhotoFinderResult>> {\n    const results = new Map<string, AIPhotoFinderResult>()\n    \n    // Process in batches to avoid rate limiting\n    const batchSize = 5\n    for (let i = 0; i < contacts.length; i += batchSize) {\n      const batch = contacts.slice(i, i + batchSize)\n      const batchPromises = batch.map(async (contact) => {\n        const key = `${contact.name}_${contact.email}`\n        const result = await this.findPhotoSuggestions(contact)\n        results.set(key, result)\n      })\n      \n      await Promise.all(batchPromises)\n      \n      // Small delay between batches\n      if (i + batchSize < contacts.length) {\n        await new Promise(resolve => setTimeout(resolve, 1000))\n      }\n    }\n    \n    return results\n  }\n}\n\nexport const aiPhotoFinder = new AIPhotoFinderService()\nexport type { ContactInfo, PhotoSuggestion, AIPhotoFinderResult }","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/drizzle.config.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): drizzle.config.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/eslint.config.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): eslint.config.js"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import js from '@eslint/js';\nimport tseslint from '@typescript-eslint/eslint-plugin';\nimport tsparser from '@typescript-eslint/parser';\nimport react from 'eslint-plugin-react';\nimport reactHooks from 'eslint-plugin-react-hooks';\nimport reactRefresh from 'eslint-plugin-react-refresh';\n\nexport default [\n  {\n    ignores: [\n      'node_modules/**',\n      'dist/**',\n      'build/**',\n      '**/*.test.ts',\n      '**/*.test.tsx',\n      'vite.config.ts',\n      'postcss.config.js',\n      'tailwind.config.js'\n    ]\n  },\n  {\n    files: ['**/*.{js,jsx,ts,tsx}'],\n    languageOptions: {\n      parser: tsparser,\n      parserOptions: {\n        ecmaVersion: 2020,\n        sourceType: 'module',\n        ecmaFeatures: {\n          jsx: true\n        },\n        project: './tsconfig.json'\n      },\n      globals: {\n        React: 'readonly',\n        JSX: 'readonly',\n        // Browser APIs\n        window: 'readonly',\n        document: 'readonly',\n        console: 'readonly',\n        fetch: 'readonly',\n        localStorage: 'readonly',\n        sessionStorage: 'readonly',\n        navigator: 'readonly',\n        alert: 'readonly',\n        confirm: 'readonly',\n        prompt: 'readonly',\n        setTimeout: 'readonly',\n        clearTimeout: 'readonly',\n        setInterval: 'readonly',\n        clearInterval: 'readonly',\n        Image: 'readonly',\n        URL: 'readonly',\n        URLSearchParams: 'readonly',\n        FormData: 'readonly',\n        Request: 'readonly',\n        Response: 'readonly',\n        Headers: 'readonly',\n        crypto: 'readonly',\n        atob: 'readonly',\n        btoa: 'readonly',\n        location: 'readonly',\n        history: 'readonly'\n      }\n    },\n    plugins: {\n      '@typescript-eslint': tseslint,\n      'react': react,\n      'react-hooks': reactHooks,\n      'react-refresh': reactRefresh\n    },\n    rules: {\n      // Base ESLint rules\n      ...js.configs.recommended.rules,\n      \n      // TypeScript strict rules as specified\n      '@typescript-eslint/no-explicit-any': 'error',\n      '@typescript-eslint/no-floating-promises': 'error',\n      '@typescript-eslint/consistent-type-imports': 'error',\n      '@typescript-eslint/no-unused-vars': 'error',\n      \n      // Prevent direct Prisma exposure in UI\n      'no-restricted-imports': [\n        'error',\n        {\n          patterns: [\n            {\n              group: ['**/server/**', '**/db/**', '**/database/**'],\n              message: 'Server-side imports are not allowed in client code'\n            }\n          ]\n        }\n      ],\n      \n      // React rules\n      ...react.configs.recommended.rules,\n      ...react.configs['jsx-runtime'].rules,\n      ...reactHooks.configs.recommended.rules,\n      \n      // React Refresh\n      'react-refresh/only-export-components': [\n        'warn',\n        { allowConstantExport: true }\n      ],\n      \n      // Additional strict TypeScript rules\n      '@typescript-eslint/no-unsafe-assignment': 'error',\n      '@typescript-eslint/no-unsafe-call': 'error',\n      '@typescript-eslint/no-unsafe-member-access': 'error',\n      '@typescript-eslint/no-unsafe-return': 'error',\n      '@typescript-eslint/explicit-function-return-type': 'warn',\n      '@typescript-eslint/prefer-nullish-coalescing': 'error',\n      '@typescript-eslint/prefer-optional-chain': 'error',\n      \n      // General code quality\n      'no-console': 'warn',\n      'prefer-const': 'error',\n      'no-var': 'error',\n      'object-shorthand': 'error',\n      'prefer-arrow-callback': 'error'\n    },\n    settings: {\n      react: {\n        version: 'detect'\n      }\n    }\n  },\n  {\n    // Server-side specific rules\n    files: ['server/**/*.{js,ts}'],\n    languageOptions: {\n      globals: {\n        // Node.js globals\n        process: 'readonly',\n        Buffer: 'readonly',\n        __dirname: 'readonly',\n        __filename: 'readonly',\n        global: 'readonly',\n        console: 'readonly',\n        setTimeout: 'readonly',\n        clearTimeout: 'readonly',\n        setInterval: 'readonly',\n        clearInterval: 'readonly',\n        setImmediate: 'readonly',\n        clearImmediate: 'readonly'\n      }\n    },\n    rules: {\n      // Allow console in server code\n      'no-console': 'off',\n      // Server doesn't need React rules\n      'react-refresh/only-export-components': 'off'\n    }\n  },\n  {\n    // Configuration files\n    files: ['*.config.{js,ts}', '*.config.*.{js,ts}'],\n    rules: {\n      // Configuration files can be more lenient\n      '@typescript-eslint/no-explicit-any': 'warn',\n      'no-console': 'off'\n    }\n  }\n];\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/list-tables.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/list-tables.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): list-tables.js"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Pool } from 'pg';\nimport dotenv from 'dotenv';\ndotenv.config();\n\nasync function listTables() {\n  const pool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n  });\n\n  try {\n    const result = await pool.query(`\n      SELECT table_name \n      FROM information_schema.tables \n      WHERE table_schema = 'public' \n      ORDER BY table_name;\n    `);\n\n    console.log(`Found ${result.rows.length} tables in your Railway database:`);\n    result.rows.forEach((row, index) => {\n      console.log(`${index + 1}. ${row.table_name}`);\n    });\n  } catch (error) {\n    console.error('Error listing tables:', error);\n  } finally {\n    await pool.end();\n  }\n}\n\nlistTables();\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/list-tables.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/scripts/seed-test-data.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): scripts/seed-test-data.ts"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n\nimport dotenv from 'dotenv';\nimport { db } from '../server/db';\nimport * as schema from '@shared/schema';\nimport { eq } from 'drizzle-orm';\n\ndotenv.config();\n\n// Test user info - replace with your actual Google account\nconst TEST_USER_EMAIL = 'peterjamesblizzard@gmail.com';\nconst TEST_USER_GOOGLE_ID = 'test-google-id-123';\n\n// Sample wellness client data\nconst SAMPLE_CLIENTS = [\n  {\n    name: 'Sarah Johnson',\n    email: 'sarah.johnson@example.com',\n    phone: '+1-555-0101',\n    lifecycleStage: 'core_client' as const,\n    notes: 'Long-term client focused on stress management and work-life balance. Responds well to mindfulness techniques.',\n  },\n  {\n    name: 'Michael Chen',\n    email: 'michael.chen@example.com', \n    phone: '+1-555-0102',\n    lifecycleStage: 'new_client' as const,\n    notes: 'Recently started wellness journey. Interested in nutrition and fitness coaching.',\n  },\n  {\n    name: 'Emily Rodriguez',\n    email: 'emily.rodriguez@example.com',\n    phone: '+1-555-0103', \n    lifecycleStage: 'curious' as const,\n    notes: 'Exploring wellness options. Had initial consultation, considering package options.',\n  },\n  {\n    name: 'David Thompson',\n    email: 'david.thompson@example.com',\n    phone: '+1-555-0104',\n    lifecycleStage: 'needs_reconnecting' as const,\n    notes: 'Former regular client who has been inactive for 3 months. Last session was focused on anxiety management.',\n  },\n  {\n    name: 'Lisa Wang',\n    email: 'lisa.wang@example.com',\n    phone: '+1-555-0105',\n    lifecycleStage: 'ambassador' as const,\n    notes: 'Excellent progress with meditation practice. Has referred 3 new clients. Very engaged and positive.',\n  },\n];\n\n// Sample calendar events that would come from Google Calendar sync\nconst SAMPLE_CALENDAR_EVENTS = [\n  {\n    googleEventId: 'wellness-session-001',\n    summary: 'Wellness Coaching Session - Sarah Johnson',\n    description: 'Weekly check-in session focusing on stress management techniques and mindfulness practice. Sarah mentioned feeling overwhelmed at work this week.',\n    startTime: new Date('2024-01-15T10:00:00Z'),\n    endTime: new Date('2024-01-15T11:00:00Z'),\n    attendees: [{ email: 'sarah.johnson@example.com', name: 'Sarah Johnson' }],\n    location: 'Wellness Studio - Room 1',\n    meetingType: 'in-person',\n  },\n  {\n    googleEventId: 'consultation-002', \n    summary: 'Initial Consultation - Michael Chen',\n    description: 'First meeting with potential new client. Interested in nutrition coaching and fitness guidance. Discussed goals and created preliminary wellness plan.',\n    startTime: new Date('2024-01-16T14:00:00Z'),\n    endTime: new Date('2024-01-16T15:30:00Z'),\n    attendees: [{ email: 'michael.chen@example.com', name: 'Michael Chen' }],\n    location: 'Virtual - Zoom',\n    meetingType: 'video',\n  },\n  {\n    googleEventId: 'follow-up-003',\n    summary: 'Follow-up Session - Emily Rodriguez',\n    description: 'Second consultation to discuss wellness package options. Emily expressed interest in the 3-month mindfulness program.',\n    startTime: new Date('2024-01-17T09:00:00Z'),\n    endTime: new Date('2024-01-17T10:00:00Z'),\n    attendees: [{ email: 'emily.rodriguez@example.com', name: 'Emily Rodriguez' }],\n    location: 'Phone Call',\n    meetingType: 'phone',\n  },\n  {\n    googleEventId: 'group-session-004',\n    summary: 'Group Meditation Workshop',\n    description: 'Monthly group meditation session. Focus on breathing techniques and stress relief. Great energy from the group today!',\n    startTime: new Date('2024-01-18T18:00:00Z'),\n    endTime: new Date('2024-01-18T19:30:00Z'),\n    attendees: [\n      { email: 'sarah.johnson@example.com', name: 'Sarah Johnson' },\n      { email: 'lisa.wang@example.com', name: 'Lisa Wang' },\n      { email: 'group.participant1@example.com', name: 'Alex Smith' },\n      { email: 'group.participant2@example.com', name: 'Maya Patel' },\n    ],\n    location: 'Wellness Studio - Main Room',\n    meetingType: 'in-person',\n  },\n  {\n    googleEventId: 'crisis-session-005',\n    summary: 'Urgent Check-in - David Thompson',\n    description: 'Emergency session requested by David. Experiencing high anxiety levels and panic attacks. Focused on immediate coping strategies and breathing exercises.',\n    startTime: new Date('2024-01-19T16:00:00Z'),\n    endTime: new Date('2024-01-19T17:00:00Z'),\n    attendees: [{ email: 'david.thompson@example.com', name: 'David Thompson' }],\n    location: 'Virtual - Emergency Session',\n    meetingType: 'video',\n  },\n  {\n    googleEventId: 'celebration-006',\n    summary: 'Progress Celebration - Lisa Wang',\n    description: 'Celebrating Lisa\\'s 6-month meditation milestone! She\\'s made incredible progress and wants to discuss becoming a wellness ambassador.',\n    startTime: new Date('2024-01-20T11:00:00Z'),\n    endTime: new Date('2024-01-20T12:00:00Z'),\n    attendees: [{ email: 'lisa.wang@example.com', name: 'Lisa Wang' }],\n    location: 'Wellness Studio - Room 2', \n    meetingType: 'in-person',\n  },\n  {\n    googleEventId: 'admin-007',\n    summary: 'Admin Time - Client Notes Review',\n    description: 'Weekly admin block for updating client files, reviewing progress notes, and planning upcoming sessions.',\n    startTime: new Date('2024-01-21T13:00:00Z'),\n    endTime: new Date('2024-01-21T14:00:00Z'),\n    attendees: [],\n    location: 'Home Office',\n    meetingType: 'in-person',\n  },\n  {\n    googleEventId: 'personal-008',\n    summary: 'Personal Appointment - Dentist',\n    description: 'Regular dental checkup and cleaning.',\n    startTime: new Date('2024-01-22T15:00:00Z'),\n    endTime: new Date('2024-01-22T16:00:00Z'),\n    attendees: [],\n    location: 'Dr. Smith Dental Office',\n    meetingType: 'in-person',\n  },\n];\n\n// Sample interactions (emails/communications)\nconst SAMPLE_INTERACTIONS = [\n  {\n    type: 'email',\n    subject: 'Thank you for today\\'s session!',\n    content: 'Hi! I wanted to reach out and thank you for the session today. The breathing techniques you taught me really helped when I had that stressful meeting this afternoon. I\\'m already feeling more centered. Looking forward to our next session!',\n    timestamp: new Date('2024-01-15T12:30:00Z'),\n    source: 'gmail',\n    sourceId: 'gmail-msg-001',\n    clientEmail: 'sarah.johnson@example.com',\n  },\n  {\n    type: 'email',\n    subject: 'Question about nutrition plan',\n    content: 'Hey there! I\\'ve been following the nutrition guidelines you gave me, but I\\'m wondering if I can substitute quinoa for brown rice? Also, I\\'ve been having more energy in the mornings - is that normal? Thanks!',\n    timestamp: new Date('2024-01-16T19:00:00Z'),\n    source: 'gmail',\n    sourceId: 'gmail-msg-002',\n    clientEmail: 'michael.chen@example.com',\n  },\n  {\n    type: 'email',\n    subject: 'Concerned about my progress',\n    content: 'I\\'ve been thinking a lot since our last conversation. I\\'m still not sure if I\\'m ready to commit to the full program. Can we schedule another call to discuss? I want to make sure this is the right time for me.',\n    timestamp: new Date('2024-01-17T21:00:00Z'),\n    source: 'gmail',\n    sourceId: 'gmail-msg-003',\n    clientEmail: 'emily.rodriguez@example.com',\n  },\n  {\n    type: 'email',\n    subject: 'Really struggling lately',\n    content: 'I know it\\'s been a while since we\\'ve talked, but I\\'m going through a really tough time right now. Work is overwhelming and I\\'m having trouble sleeping again. The anxiety is back and worse than before. Can we set up a session soon?',\n    timestamp: new Date('2024-01-18T22:45:00Z'),\n    source: 'gmail',\n    sourceId: 'gmail-msg-004',\n    clientEmail: 'david.thompson@example.com',\n  },\n  {\n    type: 'email',\n    subject: 'Amazing breakthrough!',\n    content: 'I had to share this with you immediately! I used the meditation technique you taught me during a really difficult conversation with my boss today, and I stayed completely calm and centered. I think I\\'m finally \\'getting it\\'! This wellness journey has been life-changing. Thank you so much!',\n    timestamp: new Date('2024-01-19T14:20:00Z'),\n    source: 'gmail',\n    sourceId: 'gmail-msg-005',\n    clientEmail: 'lisa.wang@example.com',\n  },\n];\n\nasync function seedTestData(): Promise<void> {\n  try {\n    console.log('🌱 Starting test data seeding...');\n\n    // 1. Create or get test user\n    console.log('👤 Creating test user...');\n    let user = await db.query.users.findFirst({\n      where: eq(schema.users.email, TEST_USER_EMAIL),\n    });\n\n    if (!user) {\n      const [newUser] = await db\n        .insert(schema.users)\n        .values({\n          googleId: TEST_USER_GOOGLE_ID,\n          email: TEST_USER_EMAIL,\n          name: 'Test Wellness Practitioner',\n          picture: 'https://via.placeholder.com/150',\n          accessToken: 'test-access-token',\n          refreshToken: 'test-refresh-token',\n        })\n        .returning();\n      user = newUser;\n    }\n\n    console.log(`✅ User ready: ${user.email}`);\n\n    // 2. Create sample contacts\n    console.log('👥 Creating sample contacts...');\n    const contacts = [];\n    for (const clientData of SAMPLE_CLIENTS) {\n      // Check if contact already exists\n      const existingContact = await db.query.contacts.findFirst({\n        where: eq(schema.contacts.email, clientData.email),\n      });\n\n      if (!existingContact) {\n        const [newContact] = await db\n          .insert(schema.contacts)\n          .values({\n            userId: user.id,\n            name: clientData.name,\n            email: clientData.email,\n            phone: clientData.phone,\n            lifecycleStage: clientData.lifecycleStage,\n            notes: clientData.notes,\n            status: 'active',\n            sentiment: Math.floor(Math.random() * 3) + 3, // 3-5 rating\n            lastContact: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000), // Within last week\n          })\n          .returning();\n        contacts.push(newContact);\n      } else {\n        contacts.push(existingContact);\n      }\n    }\n\n    console.log(`✅ Created ${contacts.length} contacts`);\n\n    // 3. Create calendar events (simulating Google Calendar sync)\n    console.log('📅 Creating calendar events...');\n    for (const eventData of SAMPLE_CALENDAR_EVENTS) {\n      // Check if event already exists\n      const existingEvent = await db.query.calendarEvents.findFirst({\n        where: eq(schema.calendarEvents.googleEventId, eventData.googleEventId),\n      });\n\n      if (!existingEvent) {\n        await db.insert(schema.calendarEvents).values({\n          userId: user.id,\n          googleEventId: eventData.googleEventId,\n          rawData: eventData,\n          summary: eventData.summary,\n          description: eventData.description,\n          startTime: eventData.startTime,\n          endTime: eventData.endTime,\n          attendees: eventData.attendees,\n          location: eventData.location,\n          meetingType: eventData.meetingType,\n          processed: false, // This will trigger LLM processing\n          calendarId: 'primary',\n          calendarName: 'Primary Calendar',\n        });\n      }\n    }\n\n    console.log(`✅ Created ${SAMPLE_CALENDAR_EVENTS.length} calendar events`);\n\n    // 4. Create sample interactions\n    console.log('💬 Creating sample interactions...');\n    for (const interactionData of SAMPLE_INTERACTIONS) {\n      // Find the contact for this interaction\n      const contact = contacts.find(c => c.email === interactionData.clientEmail);\n      if (contact) {\n        // Check if interaction already exists\n        const existingInteraction = await db.query.interactions.findFirst({\n          where: eq(schema.interactions.sourceId, interactionData.sourceId),\n        });\n\n        if (!existingInteraction) {\n          await db.insert(schema.interactions).values({\n            contactId: contact.id,\n            type: interactionData.type,\n            subject: interactionData.subject,\n            content: interactionData.content,\n            timestamp: interactionData.timestamp,\n            source: interactionData.source,\n            sourceId: interactionData.sourceId,\n            sentiment: Math.floor(Math.random() * 5) + 1, // 1-5 rating\n          });\n        }\n      }\n    }\n\n    console.log(`✅ Created ${SAMPLE_INTERACTIONS.length} interactions`);\n\n    console.log('🎉 Test data seeding completed successfully!');\n    console.log('\\n📋 Summary:');\n    console.log(`   • User: ${user.email}`);\n    console.log(`   • Contacts: ${contacts.length}`);\n    console.log(`   • Calendar Events: ${SAMPLE_CALENDAR_EVENTS.length}`);\n    console.log(`   • Interactions: ${SAMPLE_INTERACTIONS.length}`);\n    console.log('\\n🤖 Ready to test LLM processing!');\n    console.log('   Run the server and trigger calendar event processing to see OpenRouter/Gemini in action.');\n\n  } catch (error) {\n    console.error('❌ Seeding failed:', error);\n    process.exit(1);\n  }\n}\n\n// Run the seeding\nseedTestData().then(() => {\n  console.log('\\n✨ Seeding complete - you can now test your LLM integration!');\n  process.exit(0);\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/db.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[434,437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[434,437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":18,"column":14,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":18,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":19,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":19,"endColumn":36},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":42,"column":1,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":70,"endColumn":6,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1076,1076],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1076,1076],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":42,"column":11,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":42,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1152,1155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1152,1155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":46,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":46,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":46,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .statusCode on an `any` value.","line":46,"column":38,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":47,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":47,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":47,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":49,"column":31,"nodeType":"Property","messageId":"anyAssignment","endLine":49,"endColumn":38}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import dotenv from 'dotenv';\ndotenv.config();\n\nimport express, { type Request, type Response } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response) => {\n    const status = err.status ?? err.statusCode ?? 500;\n    const message = err.message ?? \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT ?? '8080', 10);\n  server.listen(port, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/migrate-gdpr.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: \"parserOptions.project\" has been provided for @typescript-eslint/parser.\nThe file was not found in any of the provided project(s): server/migrate-gdpr.js"}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import pkg from 'pg';\nconst { Pool } = pkg;\nimport fs from 'fs';\nimport path from 'path';\nimport dotenv from 'dotenv';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ndotenv.config();\n\nasync function runMigration() {\n  if (!process.env.DATABASE_URL) {\n    throw new Error('DATABASE_URL must be set');\n  }\n\n  const pool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false\n  });\n\n  try {\n    const client = await pool.connect();\n    \n    // Read the migration SQL file\n    const migrationSQL = fs.readFileSync(\n      path.join(__dirname, 'migrations', 'add-gdpr-consent-columns.sql'),\n      'utf8'\n    );\n\n    console.log('Running GDPR consent columns migration...');\n    \n    // Execute the migration\n    await client.query(migrationSQL);\n    \n    console.log('✅ Migration completed successfully!');\n    \n    client.release();\n  } catch (error) {\n    console.error('❌ Migration failed:', error);\n    throw error;\n  } finally {\n    await pool.end();\n  }\n}\n\nrunMigration().catch(console.error);\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/routes.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":85,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":85,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2649,2652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2649,2652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":87,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":105,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":105,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3158,3161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3158,3161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":106,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":108,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":108,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":108,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":108,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":121,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":121,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3752,3755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3752,3755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":122,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":122,"endColumn":92},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":125,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":125,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":125,"column":22,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":125,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":126,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":126,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":127,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":127,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":128,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":128,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":150,"column":68,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":150,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":153,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":153,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":167,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":167,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5309,5312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5309,5312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":168,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":168,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":169,"column":49,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":169,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5769,5772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5769,5772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5779,5782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5779,5782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":183,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":183,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":183,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":183,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5830,5833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5830,5833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":184,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":184,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":185,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":185,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":185,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":185,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":186,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":186,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":186,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":187,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":187,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":187,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":187,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":187,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":187,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":187,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":187,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":191,"column":114,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":117,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6161,6164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6161,6164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":191,"column":124,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":127,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6171,6174],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6171,6174],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .params on an `any` value.","line":193,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":193,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":195,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":195,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":195,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":195,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":195,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":195,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":195,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":195,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":195,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":195,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":204,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":204,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":204,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":204,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":210,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":210,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":210,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":210,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":211,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":211,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":211,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":211,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":211,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":211,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":211,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":211,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":215,"column":133,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":136,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6952,6955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6952,6955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":215,"column":143,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":146,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6962,6965],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6962,6965],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":217,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":217,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":217,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":217,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":217,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7013,7016],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7013,7016],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":218,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":218,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .body on an `any` value.","line":218,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":218,"column":42,"nodeType":"Property","messageId":"anyAssignment","endLine":218,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":218,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":218,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":220,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":220,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":220,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":220,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":221,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":221,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":221,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":221,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":222,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":222,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":222,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":222,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":222,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":222,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":222,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":222,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":132,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":135,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7400,7403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7400,7403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":142,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":145,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7410,7413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7410,7413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":228,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":228,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .body on an `any` value.","line":228,"column":44,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":228,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'contact' is assigned a value but never used.","line":231,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":231,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"contact"},"fix":{"range":[7532,7604],"text":""},"desc":"Remove unused variable 'contact'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'contact' is assigned a value but never used.","line":231,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":231,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .params on an `any` value.","line":231,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":231,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .params on an `any` value.","line":236,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":236,"endColumn":67},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":237,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":237,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7856,7858],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .params on an `any` value.","line":241,"column":50,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":241,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":249,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":249,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":249,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":249,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":252,"column":15,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":252,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":252,"column":19,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":252,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":255,"column":47,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":255,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":255,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":255,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":262,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":262,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .name on an `any` value.","line":262,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":262,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":263,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":263,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .color on an `any` value.","line":263,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":263,"endColumn":33},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":263,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":263,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8812,8814],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .params on an `any` value.","line":271,"column":47,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":271,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .params on an `any` value.","line":283,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":283,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":284,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":284,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":284,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":284,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":287,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":287,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":287,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":287,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":287,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":287,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":287,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":287,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":291,"column":133,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":291,"endColumn":136,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9843,9846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9843,9846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":291,"column":143,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":291,"endColumn":146,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9853,9856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9853,9856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .params on an `any` value.","line":293,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":293,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":295,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":295,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":295,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":295,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":297,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":297,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":297,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":297,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":297,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":297,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":297,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":297,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":299,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":299,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":299,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":299,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":300,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":300,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":300,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":300,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":300,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":300,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":300,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":300,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":321,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":321,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":321,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":321,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":347,"column":144,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":347,"endColumn":147,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11612,11615],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11612,11615],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":347,"column":154,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":347,"endColumn":157,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11622,11625],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11622,11625],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .file on an `any` value.","line":349,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":349,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":350,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":350,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":350,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":350,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":350,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":350,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":350,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":350,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":350,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":350,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":353,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":353,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .body on an `any` value.","line":353,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":353,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":355,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":355,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":355,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":355,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":355,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":355,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":355,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":355,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":355,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":355,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .file on an `any` value.","line":362,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":362,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .file on an `any` value.","line":363,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":363,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":365,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":365,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":365,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":365,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":365,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":365,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":365,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":365,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":365,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":365,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":369,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":369,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":369,"column":29,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":369,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .replace on an `any` value.","line":369,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":369,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .file on an `any` value.","line":375,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":375,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .file on an `any` value.","line":376,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":376,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":378,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":378,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":378,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":378,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":378,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":378,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":378,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":378,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":378,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":378,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .file on an `any` value.","line":382,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":382,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .file on an `any` value.","line":391,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":391,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .file on an `any` value.","line":392,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":392,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":412,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":412,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":425,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":425,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":425,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":425,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .file on an `any` value.","line":435,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":435,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .file on an `any` value.","line":435,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":435,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .file on an `any` value.","line":435,"column":77,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":435,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .file on an `any` value.","line":436,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":436,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":439,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":439,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":439,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":439,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":439,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":439,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":439,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":439,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":447,"column":101,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":447,"endColumn":104,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14814,14817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14814,14817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":447,"column":111,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":447,"endColumn":114,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14824,14827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14824,14827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":450,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":450,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":450,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":450,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":450,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":450,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":450,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":450,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":451,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":451,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":451,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":451,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":452,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":452,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":452,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":452,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":452,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":452,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":452,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":452,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":457,"column":139,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":457,"endColumn":142,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15248,15251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15248,15251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":457,"column":149,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":457,"endColumn":152,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15258,15261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15258,15261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .params on an `any` value.","line":459,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":459,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":463,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":463,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":463,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":463,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":465,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":465,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":465,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":465,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":465,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":465,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":465,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":465,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":467,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":467,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":467,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":467,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":468,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":468,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":468,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":468,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":468,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":468,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":468,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":468,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":476,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":476,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15857,15860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15857,15860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":476,"column":107,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":476,"endColumn":110,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15867,15870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15867,15870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":478,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":478,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":478,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":478,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":478,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":478,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15918,15921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15918,15921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":479,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":479,"endColumn":77},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":480,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":480,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":480,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":480,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":483,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":483,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":483,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":483,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":483,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":483,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":483,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":483,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":491,"column":132,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":491,"endColumn":135,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16483,16486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16483,16486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":491,"column":142,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":491,"endColumn":145,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16493,16496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16493,16496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .params on an `any` value.","line":493,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":493,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":495,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":495,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":495,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":495,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":495,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":495,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":495,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":495,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":495,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":495,"endColumn":36},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":503,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":503,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16871,16873],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":504,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":504,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16974,16976],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":518,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":518,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":518,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":518,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":521,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":521,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":521,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":521,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":521,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":521,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":521,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":521,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":526,"column":143,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":526,"endColumn":146,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18122,18125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18122,18125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":526,"column":153,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":526,"endColumn":156,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18132,18135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18132,18135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .params on an `any` value.","line":528,"column":75,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":528,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":529,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":529,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":529,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":529,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":532,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":532,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":532,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":532,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":532,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":532,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":532,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":532,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":537,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":537,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18556,18559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18556,18559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":537,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":537,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18566,18569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18566,18569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":539,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":539,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":539,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":539,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":539,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":539,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18617,18620],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18617,18620],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":540,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":540,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":550,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":550,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":550,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":550,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":553,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":553,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":553,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":553,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":553,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":553,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":553,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":553,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":558,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":558,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19318,19321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19318,19321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":558,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":558,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19328,19331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19328,19331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":560,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":560,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":560,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":560,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":560,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":560,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19379,19382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19379,19382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .query on an `any` value.","line":561,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":561,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":562,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":562,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":565,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":565,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .setHeader on an `any` value.","line":565,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":565,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":566,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":566,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .setHeader on an `any` value.","line":566,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":566,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":567,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":567,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":567,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":567,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":570,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":570,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":570,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":570,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":570,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":570,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":570,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":570,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":572,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":572,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":572,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":572,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":572,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":572,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":572,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":572,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":574,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":574,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":574,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":574,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":575,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":575,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":575,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":575,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":575,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":575,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":575,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":575,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":582,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":582,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":583,"column":42,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":583,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `any` value.","line":583,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":583,"endColumn":56},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":593,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":593,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":593,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":593,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":599,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":599,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20893,20896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20893,20896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":599,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":599,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20903,20906],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20903,20906],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":601,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":601,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":601,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":601,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":601,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":601,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20954,20957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20954,20957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .query on an `any` value.","line":602,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":602,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":603,"column":69,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":603,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":604,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":604,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":604,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":604,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":605,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":605,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":605,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":605,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":606,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":606,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":606,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":606,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":606,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":606,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":606,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":606,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":611,"column":141,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":611,"endColumn":144,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21456,21459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21456,21459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":611,"column":151,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":611,"endColumn":154,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21466,21469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21466,21469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .body on an `any` value.","line":613,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":613,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":614,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":617,"endColumn":8},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .body on an `any` value.","line":615,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":615,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .body on an `any` value.","line":616,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":616,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":619,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":619,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":619,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":619,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":622,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":622,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":622,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":622,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":622,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":622,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":622,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":622,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":632,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":632,"endColumn":35},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":632,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":632,"endColumn":17,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[22159,22188],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is assigned a value but never used.","line":632,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":632,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":632,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":632,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22184,22187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22184,22187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":671,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":671,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":671,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":671,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":680,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":680,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":680,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":680,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":686,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":686,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24058,24061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24058,24061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":686,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":686,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24068,24071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24068,24071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":688,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":688,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .body on an `any` value.","line":688,"column":40,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":688,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":690,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":690,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":690,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":690,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":691,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":691,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":691,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":691,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":692,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":692,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":692,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":692,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":692,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":692,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":692,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":692,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":696,"column":140,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":696,"endColumn":143,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24511,24514],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24511,24514],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":696,"column":150,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":696,"endColumn":153,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24521,24524],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24521,24524],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .params on an `any` value.","line":698,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":698,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":700,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":700,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":700,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":700,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":700,"column":16,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":700,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":700,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":700,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":700,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":700,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":714,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":714,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":714,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":714,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":715,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":715,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":715,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":715,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":716,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":716,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":716,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":716,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":716,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":716,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":716,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":716,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":721,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":721,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25224,25227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25224,25227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":721,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":721,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25234,25237],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25234,25237],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":723,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":723,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":723,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":723,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":723,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":723,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25285,25288],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25285,25288],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":724,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":724,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":725,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":725,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":726,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":726,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":726,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":726,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":729,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":729,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":729,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":729,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":729,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":729,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":729,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":729,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":736,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":736,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25792,25795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25792,25795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":736,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":736,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25802,25805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25802,25805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":738,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":738,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":738,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":738,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":738,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":738,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25853,25856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25853,25856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":739,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":739,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":740,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":740,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":740,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":740,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":741,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":741,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":741,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":741,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":742,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":742,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":742,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":742,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":742,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":742,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":742,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":742,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":748,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":748,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":748,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":748,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26164,26167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26164,26167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":752,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":752,"endColumn":72},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":769,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":769,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":769,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":769,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":777,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":777,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":777,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":777,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27148,27151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27148,27151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":781,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":781,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":799,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":799,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":799,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":799,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27973,27976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27973,27976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":800,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":800,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":800,"column":40,"nodeType":"Property","messageId":"anyAssignment","endLine":800,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":800,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":800,"endColumn":55},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":803,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":803,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":803,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":803,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":810,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":810,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":810,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":810,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[28343,28346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[28343,28346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":811,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":811,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":814,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":814,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":818,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":818,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":819,"column":81,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":819,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":828,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":828,"endColumn":18},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":836,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":836,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[29385,29387],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":841,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":841,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":866,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":866,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":866,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":866,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30331,30334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30331,30334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":868,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":868,"endColumn":69},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":870,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":870,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":870,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":870,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":877,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":877,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":877,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":877,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30732,30735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30732,30735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":878,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":878,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":880,"column":83,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":880,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":901,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":901,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":902,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":902,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":905,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":905,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":923,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":923,"endColumn":18},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":932,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":932,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[32858,32860],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":942,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":942,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":952,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":952,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":952,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":952,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[33483,33486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[33483,33486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":953,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":953,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":955,"column":72,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":955,"endColumn":74},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":958,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":958,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":959,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":959,"endColumn":72},{"ruleId":"no-unused-vars","severity":2,"message":"'usageStats' is assigned a value but never used.","line":969,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":969,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'usageStats' is assigned a value but never used.","line":969,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":969,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":969,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":969,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":985,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":985,"endColumn":18},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":994,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":994,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[34900,34902],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1014,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1014,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1014,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1014,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[35554,35557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[35554,35557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1015,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1015,"endColumn":72},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":1017,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":1017,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":1017,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":1017,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1024,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1024,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1024,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1024,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[35905,35908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[35905,35908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1027,"column":70,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1027,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1028,"column":81,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1028,"endColumn":83},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1063,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1063,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1063,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1063,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[37512,37515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[37512,37515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1064,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1064,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1075,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1075,"endColumn":56},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":1077,"column":20,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":1077,"endColumn":22,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[38026,38028],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":1078,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":1078,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[38057,38059],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1096,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1096,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38716,38719],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38716,38719],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1096,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1096,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38726,38729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38726,38729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1098,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1098,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":1098,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1098,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1098,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1098,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[38777,38780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[38777,38780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .query on an `any` value.","line":1099,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1099,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1100,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1100,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1103,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1103,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":1103,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1103,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":1104,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":1104,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":1104,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":1104,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1105,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1105,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1105,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1105,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":1105,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1105,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":1105,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1105,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1109,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1109,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39333,39336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39333,39336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1109,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1109,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39343,39346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39343,39346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1111,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1111,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":1111,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1111,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1111,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1111,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39394,39397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39394,39397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1112,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1112,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1113,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1113,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":1113,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1113,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":1114,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":1114,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":1114,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":1114,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1115,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1115,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1115,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1115,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":1115,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1115,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":1115,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1115,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1119,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1119,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39720,39723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39720,39723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1119,"column":112,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1119,"endColumn":115,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[39730,39733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[39730,39733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1121,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1121,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .body on an `any` value.","line":1121,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1121,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .params on an `any` value.","line":1122,"column":58,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1122,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1123,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1123,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1124,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1124,"endColumn":23},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1125,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1125,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1127,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1127,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":1127,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1127,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":1128,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":1128,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":1128,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":1128,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1129,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1129,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1129,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1129,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":1129,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1129,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":1129,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1129,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1133,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1133,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[40208,40211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[40208,40211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1133,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1133,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[40218,40221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[40218,40221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1135,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1135,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .user on an `any` value.","line":1135,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1135,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1135,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1135,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[40269,40272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[40269,40272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1136,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1136,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1137,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1137,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":1137,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1137,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":1138,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":1138,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":1138,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":1138,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1139,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1139,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1139,"column":7,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1139,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .status on an `any` value.","line":1139,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1139,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .json on an `any` value.","line":1139,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1139,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":1148,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":1148,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":1148,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":1148,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1155,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1155,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1156,"column":38,"nodeType":"Property","messageId":"anyAssignment","endLine":1156,"endColumn":42},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1156,"column":44,"nodeType":"Property","messageId":"anyAssignment","endLine":1156,"endColumn":49},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":2,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":1158,"column":11,"nodeType":null,"messageId":"preferOptionalChain","endLine":1158,"endColumn":32,"fix":{"range":[40871,40892],"text":"!name?.trim()"}},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1158,"column":21,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1158,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .trim on an `any` value.","line":1158,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1158,"endColumn":30},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1163,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1163,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":1163,"column":15,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":1163,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .trim on an `any` value.","line":1163,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1163,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1164,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1164,"endColumn":34},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":1164,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":1164,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[41069,41071],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1183,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1183,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1185,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1185,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1190,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":1190,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1191,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":1191,"endColumn":39},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":1191,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":1191,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[41994,41996],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1201,"column":46,"nodeType":"Property","messageId":"anyAssignment","endLine":1201,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1210,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1210,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":1213,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":1213,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":1213,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":1213,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1223,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1223,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1223,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1223,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43000,43003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43000,43003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1224,"column":63,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1224,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1234,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1234,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1234,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1234,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43355,43358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43355,43358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1235,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1235,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1235,"column":42,"nodeType":"Property","messageId":"anyAssignment","endLine":1235,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1235,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1235,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1267,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1267,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1267,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1267,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[44438,44441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[44438,44441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1295,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1295,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1327,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1327,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1327,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1327,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[46579,46582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[46579,46582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1328,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1328,"endColumn":56},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1328,"column":39,"nodeType":"Property","messageId":"anyAssignment","endLine":1328,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1328,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1328,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1336,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1336,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1336,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1336,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1351,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1351,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1351,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1351,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[47301,47304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[47301,47304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1352,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1352,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":1359,"column":69,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1359,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":1360,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1360,"endColumn":76},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [key] on an `any` value.","line":1361,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1361,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1369,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1369,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1369,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1369,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1372,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1372,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1395,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1395,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1395,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1395,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[48696,48699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[48696,48699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1396,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1396,"endColumn":88},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1398,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1398,"endColumn":57},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1399,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1399,"endColumn":14},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1400,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1400,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1401,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1401,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1403,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1403,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1404,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1404,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1421,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1421,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1421,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1421,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[49489,49492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[49489,49492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1422,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1422,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1426,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1426,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1427,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":1427,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1428,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":1428,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1429,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":1429,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1431,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":1431,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1442,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":1442,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1442,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1442,"endColumn":26},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1443,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":1443,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1444,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":1444,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1445,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":1445,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1447,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":1447,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1454,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":1454,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1454,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1454,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":1456,"column":60,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1456,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1457,"column":23,"nodeType":"Property","messageId":"anyAssignment","endLine":1457,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":1457,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1457,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1471,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1471,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1471,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1471,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[50987,50990],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[50987,50990],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1474,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1474,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1507,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1507,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1511,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":1511,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1524,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1524,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1524,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1524,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[52714,52717],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[52714,52717],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1525,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1525,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1527,"column":66,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1527,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1542,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1542,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1542,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1542,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[53268,53271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[53268,53271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1543,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1543,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1545,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1545,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1560,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1560,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1560,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1560,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[53787,53790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[53787,53790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1561,"column":69,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1561,"endColumn":71},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1572,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1572,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1572,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1572,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[54225,54228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[54225,54228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1573,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1573,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1588,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1588,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1588,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1588,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[54740,54743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[54740,54743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1591,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1591,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1592,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1592,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .id on an `any` value.","line":1593,"column":39,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1593,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1626,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1626,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[56166,56169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[56166,56169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":1629,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":1634,"endColumn":10},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .completedAt on an `any` value.","line":1630,"column":16,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1630,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createdAt on an `any` value.","line":1630,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1630,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":1631,"column":9,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":1631,"endColumn":98},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .completedAt on an `any` value.","line":1631,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1631,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .createdAt on an `any` value.","line":1631,"column":76,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":1631,"endColumn":85},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":1633,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":1633,"endColumn":18}],"suppressedMessages":[],"errorCount":592,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import type { Express } from 'express';\nimport express from 'express';\nimport { createServer, type Server } from 'http';\nimport cookieParser from 'cookie-parser';\nimport session from 'express-session';\nimport path from 'path';\nimport fs from 'fs';\nimport multer from 'multer';\nimport sharp from 'sharp';\nimport passport from './services/auth';\nimport { storage } from './storage';\nimport { syncService } from './services/sync';\nimport { geminiService } from './services/gemini';\nimport { openRouterService, createOpenRouterService } from './services/openrouter';\nimport { rateLimiter } from './services/rate-limiter';\nimport { googleService } from './services/google';\nimport { PhotoEnrichmentService } from './services/photo-enrichment';\nimport { taskAI } from './services/task-ai';\nimport { taskScheduler } from './services/task-scheduler';\nimport { requireAuth, setAuthCookie, clearAuthCookie } from './services/jwt-auth';\nimport {\n  generalRateLimit,\n  authRateLimit,\n  apiRateLimit,\n  uploadRateLimit,\n  aiRateLimit,\n  csrfProtection,\n  generateCSRFToken,\n  validateContactId,\n  validateContactCreation,\n  validateInteractionCreation,\n  handleValidationErrors,\n  securityHeaders,\n  validateFileUpload,\n  safeFileOperation,\n  sanitizeResponse\n} from './services/security';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Security headers\n  app.use(securityHeaders);\n  \n  // General rate limiting\n  app.use(generalRateLimit);\n  \n  // Serve static files for uploaded photos\n  app.use('/uploads', express.static(path.join(process.cwd(), 'uploads')));\n\n  // Cookie parser for JWT tokens\n  app.use(cookieParser());\n\n  // Session middleware (only needed for Passport OAuth flow)\n  app.use(\n    session({\n      secret: process.env.JWT_SECRET ?? 'your-super-secret-jwt-key-change-in-production',\n      resave: false,\n      saveUninitialized: false,\n      cookie: {\n        secure: process.env.NODE_ENV === 'production',\n        maxAge: 10 * 60 * 1000, // 10 minutes - just for OAuth flow\n      },\n    })\n  );\n\n  // Passport configuration (for OAuth only)\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Start sync service and task scheduler\n  syncService.start();\n  taskScheduler.start();\n\n  // CSRF token endpoint\n  app.get('/api/csrf-token', generateCSRFToken);\n\n  // Auth routes with rate limiting\n  app.get('/auth/google', authRateLimit, passport.authenticate('google'));\n\n  app.get(\n    '/auth/google/callback',\n    authRateLimit,\n    passport.authenticate('google', { failureRedirect: '/login' }),\n    (req, res) => {\n      // Set JWT cookie after successful OAuth\n      const user = req.user as any;\n      if (user) {\n        setAuthCookie(res, user.id);\n      }\n      res.redirect('/');\n    }\n  );\n\n  app.post('/api/auth/logout', authRateLimit, csrfProtection, (req, res) => {\n    clearAuthCookie(res);\n    res.json({ success: true });\n  });\n\n  app.get('/api/auth/user', apiRateLimit, requireAuth, (req, res) => {\n    res.json(sanitizeResponse(req.user));\n  });\n\n  // Profile management\n  app.get('/api/profile', apiRateLimit, requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const userProfile = await storage.getUserById(user.id);\n      console.log('Profile fetch successful:', {\n        userId: user.id,\n        allowProfilePictureScraping: userProfile?.allowProfilePictureScraping,\n        hasProfile: !!userProfile,\n      });\n      res.json(userProfile);\n    } catch (error) {\n      console.error('Profile fetch error:', error);\n      res.status(500).json({ error: 'Failed to fetch profile' });\n    }\n  });\n\n  app.patch('/api/profile/gdpr-consent', apiRateLimit, csrfProtection, requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { allowProfilePictureScraping, gdprConsentDate, gdprConsentVersion } = req.body;\n\n      console.log('GDPR consent update request:', {\n        userId: user.id,\n        allowProfilePictureScraping,\n        gdprConsentDate,\n        gdprConsentVersion,\n      });\n\n      // Validate required fields\n      if (typeof allowProfilePictureScraping !== 'boolean') {\n        return res.status(400).json({ error: 'allowProfilePictureScraping must be a boolean' });\n      }\n\n      if (!gdprConsentDate) {\n        return res.status(400).json({ error: 'gdprConsentDate is required' });\n      }\n\n      if (!gdprConsentVersion) {\n        return res.status(400).json({ error: 'gdprConsentVersion is required' });\n      }\n\n      // Parse and validate the date\n      const consentDate = new Date(gdprConsentDate);\n      if (isNaN(consentDate.getTime())) {\n        return res.status(400).json({ error: 'gdprConsentDate must be a valid date' });\n      }\n\n      const updatedUser = await storage.updateUserGdprConsent(user.id, {\n        allowProfilePictureScraping,\n        gdprConsentDate: consentDate,\n        gdprConsentVersion,\n      });\n\n      console.log('GDPR consent update successful:', updatedUser.allowProfilePictureScraping);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error('GDPR consent update error:', error);\n      res.status(500).json({ error: 'Failed to update GDPR consent' });\n    }\n  });\n\n  // Dashboard stats\n  app.get('/api/dashboard/stats', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      console.log('Fetching stats for user:', user.id);\n      const stats = await storage.getStats(user.id);\n      res.json(stats);\n    } catch (error) {\n      console.error('Dashboard stats error:', error);\n      res.status(500).json({\n        error: 'Failed to fetch stats',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  // Contacts\n  app.get('/api/contacts', apiRateLimit, requireAuth, async (req: any, res: any) => {\n    try {\n      const user = req.user as any;\n      const contacts = await storage.getContactsByUserId(user.id);\n      res.json(sanitizeResponse(contacts));\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch contacts' });\n    }\n  });\n\n  app.get('/api/contacts/:id', apiRateLimit, requireAuth, validateContactId, handleValidationErrors, async (req: any, res: any) => {\n    try {\n      const contact = await storage.getContact(req.params.id);\n      if (!contact) {\n        return res.status(404).json({ error: 'Contact not found' });\n      }\n\n      const [interactions, goals, documents] = await Promise.all([\n        storage.getInteractionsByContactId(contact.id),\n        storage.getGoalsByContactId(contact.id),\n        storage.getDocumentsByContactId(contact.id),\n      ]);\n\n      res.json(sanitizeResponse({\n        ...contact,\n        interactions,\n        goals,\n        documents,\n      }));\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch contact details' });\n    }\n  });\n\n  app.post('/api/contacts', apiRateLimit, csrfProtection, requireAuth, validateContactCreation, handleValidationErrors, async (req: any, res: any) => {\n    try {\n      const user = req.user as any;\n      const contactData = { ...req.body, userId: user.id };\n      const contact = await storage.createContact(contactData);\n      res.json(contact);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to create contact' });\n    }\n  });\n\n  app.patch('/api/contacts/:id', apiRateLimit, csrfProtection, requireAuth, validateContactId, handleValidationErrors, async (req: any, res: any) => {\n    try {\n      const { tags, ...contactData } = req.body;\n\n      // Update the basic contact information\n      const contact = await storage.updateContact(req.params.id, contactData);\n\n      // Handle tags if provided\n      if (tags && Array.isArray(tags)) {\n        // Get current contact to see what tags it has\n        const currentContact = await storage.getContact(req.params.id);\n        const currentTags = currentContact?.tags || [];\n\n        // Remove all current tags from this contact\n        for (const currentTag of currentTags) {\n          await storage.removeTagFromContact(req.params.id, currentTag.id);\n        }\n\n        // Get all existing tags for reference\n        const existingTags = await storage.getAllTags();\n\n        // Then add the new tags\n        for (const tag of tags) {\n          let tagId = tag.id;\n\n          // If it's a temporary tag (starts with 'temp_'), create it first\n          if (tag.id.startsWith('temp_')) {\n            // Check if a tag with this name already exists\n            const existingTag = existingTags.find(\n              (t) => t.name.toLowerCase() === tag.name.toLowerCase()\n            );\n            if (existingTag) {\n              tagId = existingTag.id;\n            } else {\n              // Create new tag\n              const newTag = await storage.createTag({\n                name: tag.name,\n                color: tag.color || '#3b82f6',\n              });\n              tagId = newTag.id;\n            }\n          }\n\n          // Add tag to contact (only if not already present)\n          try {\n            await storage.addTagToContact(req.params.id, tagId);\n          } catch (error) {\n            // Ignore duplicate key errors - tag already exists for this contact\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            if (!errorMessage.includes('duplicate') && !errorMessage.includes('unique')) {\n              throw error;\n            }\n          }\n        }\n      }\n\n      // Return the updated contact with tags\n      const updatedContact = await storage.getContact(req.params.id);\n      res.json(updatedContact);\n    } catch (error) {\n      console.error('Contact update error:', error);\n      res.status(500).json({ error: 'Failed to update contact' });\n    }\n  });\n\n  app.delete('/api/contacts/:id', apiRateLimit, csrfProtection, requireAuth, validateContactId, handleValidationErrors, async (req: any, res: any) => {\n    try {\n      const success = await storage.deleteContact(req.params.id);\n      if (success) {\n        res.json({ success: true });\n      } else {\n        res.status(404).json({ error: 'Contact not found' });\n      }\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to delete contact' });\n    }\n  });\n\n  app.get('/api/contacts/:id/cascade-info', requireAuth, async (req, res) => {\n    try {\n      const contactId = req.params.id;\n      const [interactions, goals, documents, calendarEvents] =\n        await Promise.all([\n          storage.getInteractionsByContactId(contactId),\n          storage.getGoalsByContactId(contactId),\n          storage.getDocumentsByContactId(contactId),\n          storage.getCalendarEventsByContactId(contactId),\n        ]);\n\n      res.json({\n        interactions: interactions.length,\n        goals: goals.length,\n        documents: documents.length,\n        calendarEvents: calendarEvents.length,\n      });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to get cascade info' });\n    }\n  });\n\n  // Configure multer for file uploads\n  const uploadDir = path.join(process.cwd(), 'uploads', 'contact-photos');\n  if (!fs.existsSync(uploadDir)) {\n    fs.mkdirSync(uploadDir, { recursive: true });\n  }\n\n  const upload = multer({\n    dest: 'temp/',\n    limits: {\n      fileSize: 10 * 1024 * 1024, // 10MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      if (file.mimetype.startsWith('image/')) {\n        cb(null, true);\n      } else {\n        cb(new Error('Only image files are allowed'));\n      }\n    },\n  });\n\n  // Photo upload endpoint\n  app.post('/api/contacts/upload-photo', uploadRateLimit, csrfProtection, requireAuth, upload.single('image'), validateFileUpload, async (req: any, res: any) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: 'No image file provided' });\n      }\n\n      const contactId = req.body.contactId;\n      if (!contactId) {\n        return res.status(400).json({ error: 'Contact ID is required' });\n      }\n\n      // Verify contact exists\n      const contact = await storage.getContact(contactId);\n      if (!contact) {\n        // Clean up uploaded file safely\n        if (safeFileOperation(req.file.path, 'temp/')) {\n          fs.unlinkSync(req.file.path);\n        }\n        return res.status(404).json({ error: 'Contact not found' });\n      }\n\n      // Generate unique filename with safe characters\n      const safeContactId = contactId.replace(/[^a-zA-Z0-9-_]/g, '');\n      const fileName = `${safeContactId}_${Date.now()}.webp`;\n      const outputPath = path.join(uploadDir, fileName);\n      \n      // Validate output path is safe\n      if (!safeFileOperation(outputPath, uploadDir)) {\n        if (safeFileOperation(req.file.path, 'temp/')) {\n          fs.unlinkSync(req.file.path);\n        }\n        return res.status(400).json({ error: 'Invalid file path' });\n      }\n\n      // Process image with Sharp: convert to WebP, resize, and optimize\n      await sharp(req.file.path)\n        .resize(400, 400, {\n          fit: 'cover',\n          position: 'center',\n        })\n        .webp({ quality: 85 })\n        .toFile(outputPath);\n\n      // Clean up temp file safely\n      if (safeFileOperation(req.file.path, 'temp/')) {\n        fs.unlinkSync(req.file.path);\n      }\n\n      // Check final file size\n      const stats = fs.statSync(outputPath);\n      if (stats.size > 250 * 1024) {\n        // 250KB\n        // Re-process with lower quality if still too large\n        const tempPath = outputPath + '.tmp';\n        await sharp(outputPath)\n          .webp({ quality: 60 })\n          .toFile(tempPath);\n\n        if (safeFileOperation(tempPath, uploadDir)) {\n          fs.renameSync(tempPath, outputPath);\n        }\n      }\n\n      // Create contact photo record\n      const photoRecord = await storage.createContactPhoto({\n        contactId,\n        fileName,\n        filePath: `/uploads/contact-photos/${fileName}`,\n        fileSize: fs.statSync(outputPath).size,\n        mimeType: 'image/webp',\n        source: 'manual',\n        isActive: true,\n      });\n\n      // Update contact avatar URL\n      const avatarUrl = `/uploads/contact-photos/${fileName}`;\n      await storage.updateContact(contactId, { avatarUrl });\n\n      res.json({\n        success: true,\n        avatarUrl,\n        photoId: photoRecord.id,\n        fileSize: photoRecord.fileSize,\n      });\n    } catch (error) {\n      console.error('Photo upload error:', error);\n\n      // Clean up uploaded file if it exists\n      if (req.file && fs.existsSync(req.file.path) && safeFileOperation(req.file.path, 'temp/')) {\n        fs.unlinkSync(req.file.path);\n      }\n\n      res.status(500).json({\n        error: 'Failed to upload photo',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  // AI photo download endpoint\n  app.post('/api/contacts/ai-photo-download', aiRateLimit, csrfProtection, requireAuth, async (req: any, res: any) => {\n    try {\n      // TODO: Implement AI photo download and processing\n      res.status(501).json({ error: 'AI photo download not yet implemented' });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to download photo' });\n    }\n  });\n\n  // Remove contact photo\n  app.delete('/api/contacts/:id/photo', apiRateLimit, csrfProtection, requireAuth, validateContactId, handleValidationErrors, async (req: any, res: any) => {\n    try {\n      const success = await storage.updateContact(req.params.id, {\n        avatarUrl: null,\n      });\n      if (success) {\n        res.json({ success: true });\n      } else {\n        res.status(404).json({ error: 'Contact not found' });\n      }\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to remove photo' });\n    }\n  });\n\n  // Photo Enrichment Service\n  const photoEnrichmentService = new PhotoEnrichmentService(storage);\n\n  // Batch enrich all contact photos\n  app.post('/api/photo-enrichment/batch', aiRateLimit, csrfProtection, requireAuth, async (req: any, res: any) => {\n    try {\n      const user = req.user as any;\n      const results = await photoEnrichmentService.batchEnrichPhotos(user.id);\n      res.json(sanitizeResponse(results));\n    } catch (error) {\n      console.error('Batch photo enrichment error:', error);\n      res.status(500).json({\n        error: 'Failed to batch enrich photos',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  // Find photo suggestions for a single contact\n  app.get('/api/contacts/:id/photo-suggestions', apiRateLimit, requireAuth, validateContactId, handleValidationErrors, async (req: any, res: any) => {\n    try {\n      const contact = await storage.getContact(req.params.id);\n      if (!contact) {\n        return res.status(404).json({ error: 'Contact not found' });\n      }\n\n      // Convert database contact to ContactInfo format\n      const contactInfo = {\n        id: contact.id,\n        name: contact.name,\n        email: contact.email,\n        phone: contact.phone || undefined, // Convert null to undefined\n        allowProfilePictureScraping: contact.hasGdprConsent || undefined, // Convert null to undefined\n        // Add other fields if available from JSON fields\n        company: contact.extractedFields && typeof contact.extractedFields === 'object' \n          ? (contact.extractedFields as { company?: string }).company \n          : undefined,\n        linkedinUrl: contact.socialMediaHandles && typeof contact.socialMediaHandles === 'object'\n          ? (contact.socialMediaHandles as { linkedin?: string }).linkedin\n          : undefined,\n        jobTitle: contact.extractedFields && typeof contact.extractedFields === 'object'\n          ? (contact.extractedFields as { jobTitle?: string }).jobTitle\n          : undefined,\n      };\n      \n      const suggestions = await photoEnrichmentService.findPhotoSuggestions(contactInfo);\n      res.json({ suggestions });\n    } catch (error) {\n      console.error('Photo suggestions error:', error);\n      res.status(500).json({ error: 'Failed to find photo suggestions' });\n    }\n  });\n\n  // Enrich a single contact's photo\n  app.post('/api/contacts/:id/enrich-photo', aiRateLimit, csrfProtection, requireAuth, validateContactId, handleValidationErrors, async (req: any, res: any) => {\n    try {\n      const result = await photoEnrichmentService.enrichSingleContact(req.params.id);\n      res.json(sanitizeResponse(result));\n    } catch (error) {\n      console.error('Single photo enrichment error:', error);\n      res.status(500).json({ error: 'Failed to enrich contact photo' });\n    }\n  });\n\n  // Get enrichment stats\n  app.get('/api/photo-enrichment/stats', apiRateLimit, requireAuth, async (req: any, res: any) => {\n    try {\n      const user = req.user as any;\n      const contacts = await storage.getContactsByUserId(user.id);\n\n      const stats = {\n        totalContacts: contacts.length,\n        contactsWithPhotos: contacts.filter((c) => c.avatarUrl).length,\n        contactsConsented: contacts.filter((c) => c.hasGdprConsent).length,\n        contactsEligible: contacts.filter((c) => c.hasGdprConsent && !c.avatarUrl)\n          .length,\n      };\n\n      res.json(sanitizeResponse(stats));\n    } catch (error) {\n      console.error('Photo enrichment stats error:', error);\n      res.status(500).json({ error: 'Failed to fetch enrichment stats' });\n    }\n  });\n\n  // Export contacts\n  app.get('/api/contacts/export', apiRateLimit, requireAuth, async (req: any, res: any) => {\n    try {\n      const user = req.user as any;\n      const format = (req.query.format as string) || 'json';\n      const contacts = await storage.getContactsByUserId(user.id);\n\n      if (format === 'json') {\n        res.setHeader('Content-Type', 'application/json');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"contacts.json\"');\n        res.json(contacts);\n      } else if (format === 'csv') {\n        // TODO: Implement CSV export\n        res.status(501).json({ error: 'CSV export not yet implemented' });\n      } else {\n        res.status(400).json({ error: 'Unsupported format' });\n      }\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to export contacts' });\n    }\n  });\n\n  // Export selected contacts\n  app.post('/api/contacts/export-selected', requireAuth, async (req, res) => {\n    try {\n      const { contactIds, format } = req.body;\n      const contacts = await Promise.all(contactIds.map((id: string) => storage.getContact(id)));\n      const validContacts = contacts.filter(Boolean);\n\n      if (format === 'json') {\n        res.setHeader('Content-Type', 'application/json');\n        res.setHeader('Content-Disposition', 'attachment; filename=\"selected-contacts.json\"');\n        res.json(validContacts);\n      } else {\n        res.status(400).json({ error: 'Unsupported format' });\n      }\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to export selected contacts' });\n    }\n  });\n\n  // Recent interactions\n  app.get('/api/interactions/recent', apiRateLimit, requireAuth, async (req: any, res: any) => {\n    try {\n      const user = req.user as any;\n      const limit = Math.min(parseInt(req.query.limit as string) || 10, 100); // Cap at 100\n      const interactions = await storage.getRecentInteractions(user.id, limit);\n      res.json(sanitizeResponse(interactions));\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch recent interactions' });\n    }\n  });\n\n  // Create interaction\n  app.post('/api/interactions', apiRateLimit, csrfProtection, requireAuth, validateInteractionCreation, handleValidationErrors, async (req: any, res: any) => {\n    try {\n      console.log('Creating interaction with data:', req.body);\n      const interactionData = {\n        ...req.body,\n        timestamp: new Date(req.body.timestamp),\n      };\n      const interaction = await storage.createInteraction(interactionData);\n      res.json(interaction);\n    } catch (error) {\n      console.error('Create interaction error:', error);\n      res.status(500).json({\n        error: 'Failed to create interaction',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  // Get contact calendar context\n  app.get('/api/contacts/:contactId/calendar-context', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { contactId } = req.params;\n\n      // Get calendar events for this contact\n      const events = await storage.getCalendarEventsByContactId(contactId);\n\n      const now = new Date();\n      const lastEvent = events\n        .filter((event) => event.startTime && new Date(event.startTime) < now)\n        .sort((a, b) => new Date(b.startTime!).getTime() - new Date(a.startTime!).getTime())[0];\n\n      const nextEvent = events\n        .filter((event) => event.startTime && new Date(event.startTime) > now)\n        .sort((a, b) => new Date(a.startTime!).getTime() - new Date(b.startTime!).getTime())[0];\n\n      const last90Days = events.filter((event) => {\n        if (!event.startTime) return false;\n        const eventDate = new Date(event.startTime);\n        const ninetyDaysAgo = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);\n        return eventDate >= ninetyDaysAgo && eventDate <= now;\n      });\n\n      res.json({\n        lastEvent,\n        nextEvent,\n        sessionCount90Days: last90Days.length,\n        totalSessions: events.length,\n      });\n    } catch (error) {\n      console.error('Error fetching contact calendar context:', error);\n      res.status(500).json({ error: 'Failed to fetch calendar context' });\n    }\n  });\n\n  // Goals\n  app.post('/api/goals', requireAuth, async (req, res) => {\n    try {\n      const goal = await storage.createGoal(req.body);\n      res.json(goal);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to create goal' });\n    }\n  });\n\n  app.patch('/api/goals/:id', requireAuth, async (req, res) => {\n    try {\n      const goal = await storage.updateGoal(req.params.id, req.body);\n      res.json(goal);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update goal' });\n    }\n  });\n\n  // AI Assistant\n  app.post('/api/ai/chat', aiRateLimit, csrfProtection, requireAuth, async (req: any, res: any) => {\n    try {\n      const { message, context } = req.body;\n      const response = await geminiService.generateChatResponse(message, context);\n      res.json(sanitizeResponse({ response }));\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to generate AI response' });\n    }\n  });\n\n  app.post('/api/ai/insights/:contactId', aiRateLimit, csrfProtection, requireAuth, validateContactId, handleValidationErrors, async (req: any, res: any) => {\n    try {\n      const contact = await storage.getContact(req.params.contactId);\n      if (!contact) {\n        return res.status(404).json({ error: 'Contact not found' });\n      }\n\n      const [interactions, goals] = await Promise.all([\n        storage.getInteractionsByContactId(contact.id),\n        storage.getGoalsByContactId(contact.id),\n      ]);\n\n      const insights = await openRouterService.generateInsights({\n        contact,\n        interactions,\n        goals,\n      });\n\n      res.json(insights);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to generate insights' });\n    }\n  });\n\n  // Sync\n  app.get('/api/sync/status', apiRateLimit, requireAuth, async (req: any, res: any) => {\n    try {\n      const user = req.user as any;\n      console.log('Fetching sync status for user:', user.id);\n      const syncStatus = await storage.getSyncStatus(user.id);\n      res.json(sanitizeResponse(syncStatus));\n    } catch (error) {\n      console.error('Sync status error:', error);\n      res.status(500).json({\n        error: 'Failed to fetch sync status',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  });\n\n  app.post('/api/sync/manual', apiRateLimit, csrfProtection, requireAuth, async (req: any, res: any) => {\n    try {\n      const user = req.user as any;\n      await syncService.manualSync(user.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: 'Manual sync failed' });\n    }\n  });\n  // Calendar Events\n  app.get('/api/calendar/events', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const month = req.query.month as string;\n      \n      // Get all events for the user\n      const allEvents = await storage.getCalendarEventsByUserId(user.id);\n      \n      // Filter by month if specified\n      let events = allEvents;\n      if (month) {\n        const targetDate = new Date(month);\n        const targetYear = targetDate.getFullYear();\n        const targetMonth = targetDate.getMonth();\n        \n        events = allEvents.filter(event => {\n          if (!event.startTime) return false;\n          const eventDate = new Date(event.startTime);\n          return eventDate.getFullYear() === targetYear && eventDate.getMonth() === targetMonth;\n        });\n      }\n      \n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch calendar events' });\n    }\n  });\n\n  // Get upcoming calendar events for dashboard\n  app.get('/api/calendar/upcoming', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const limit = parseInt(req.query.limit as string) || 5;\n\n      // Get all events for the user\n      const allEvents = await storage.getCalendarEventsByUserId(user.id, 100);\n\n      // Filter for future events and sort by start time\n      const now = new Date();\n      const upcomingEvents = allEvents\n        .filter((event) => event.startTime && new Date(event.startTime) > now)\n        .sort((a, b) => new Date(a.startTime!).getTime() - new Date(b.startTime!).getTime())\n        .slice(0, limit);\n\n      res.json(upcomingEvents);\n    } catch (error) {\n      console.error('Error fetching upcoming events:', error);\n      res.status(500).json({ error: 'Failed to fetch upcoming events' });\n    }\n  });\n\n  app.post('/api/calendar/events', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const eventData = { ...req.body, userId: user.id };\n      const event = await storage.createCalendarEvent(eventData);\n      res.json(event);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to create calendar event' });\n    }\n  });\n\n  app.post('/api/calendar/sync', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      console.log(`Starting ongoing calendar sync for user ${user.id}`);\n\n      // Sync only recent changes (last 7 days + future events)\n      await syncService.syncCalendar(user.id);\n\n      // Process new events with intelligent model selection\n      const openRouterWithStorage = createOpenRouterService(storage);\n      const contacts = await storage.getContactsByUserId(user.id);\n      const unprocessedEvents = await storage.getUnprocessedCalendarEvents(user.id);\n\n      if (unprocessedEvents.length > 0) {\n        console.log(`Processing ${unprocessedEvents.length} new events`);\n\n        // For ongoing sync, use premium model for better accuracy\n        const results = await openRouterWithStorage.processCalendarEvents(\n          unprocessedEvents,\n          contacts,\n          user.id,\n          false\n        );\n\n        // Mark processed events\n        for (const event of unprocessedEvents) {\n          await storage.markCalendarEventProcessed(\n            event.id,\n            results.find((r) => r.eventId === event.id) || null\n          );\n        }\n\n        // Get updated usage stats\n        const usageStats = await rateLimiter.getUsageStats(user.id);\n\n        res.json({\n          success: true,\n          message: `Sync completed. Processed ${results.length} relevant events from ${unprocessedEvents.length} new events.`,\n          newEvents: unprocessedEvents.length,\n          relevantEvents: results.length,\n          usageStats,\n          recommendations: usageStats.recommendations,\n        });\n      } else {\n        res.json({\n          success: true,\n          message: 'Sync completed. No new events to process.',\n        });\n      }\n    } catch (error) {\n      console.error('Calendar sync error:', error);\n      res.status(500).json({ error: 'Failed to sync calendar' });\n    }\n  });\n\n  // Enhanced Calendar Routes for Raw Google Data\n  app.get('/api/calendar/raw-events', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const limit = parseInt(req.query.limit as string) || 100;\n      const events = await storage.getCalendarEventsByUserId(user.id, limit);\n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch raw calendar events' });\n    }\n  });\n\n  app.post('/api/calendar/sync-initial', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { months = 12, useFreeModel = true } = req.body; // Default to 1 year, use free model for bulk\n\n      console.log(`Starting initial ${months}-month calendar sync for user ${user.id}`);\n\n      // Validate months parameter\n      if (months < 1 || months > 24) {\n        return res.status(400).json({ error: 'Months must be between 1 and 24' });\n      }\n\n      // Calculate date range for initial sync\n      const now = new Date();\n      const startDate = new Date(now.getTime() - months * 30 * 24 * 60 * 60 * 1000);\n      const endDate = new Date(now.getTime() + 6 * 30 * 24 * 60 * 60 * 1000); // 6 months forward\n\n      // Sync historical data with custom date range\n      await googleService.syncCalendar(user, {\n        startDate,\n        endDate,\n        syncType: 'initial'\n      });\n\n      // Process events with intelligent rate limiting and model selection\n      const openRouterWithStorage = createOpenRouterService(storage);\n      const contacts = await storage.getContactsByUserId(user.id);\n      const events = await storage.getUnprocessedCalendarEvents(user.id);\n\n      // Get usage stats and recommendations\n      const usageStats = await rateLimiter.getUsageStats(user.id);\n      console.log('Current usage stats:', usageStats);\n\n      // Process in batches with rate limiting\n      const batchSize = 25; // Smaller batches for better rate limit management\n      let processedCount = 0;\n\n      for (let i = 0; i < events.length; i += batchSize) {\n        const batch = events.slice(i, i + batchSize);\n        console.log(\n          `Processing batch ${Math.floor(i / batchSize) + 1} of ${Math.ceil(\n            events.length / batchSize\n          )}`\n        );\n\n        const results = await openRouterWithStorage.processCalendarEvents(\n          batch,\n          contacts,\n          user.id,\n          useFreeModel\n        );\n        processedCount += results.length;\n\n        // Mark processed events in calendar_events table\n        for (const event of batch) {\n          await storage.markCalendarEventProcessed(\n            event.id,\n            results.find((r) => r.eventId === event.id) || null\n          );\n        }\n      }\n\n      res.json({\n        success: true,\n        message: `Historical sync completed. Processed ${processedCount} relevant events from ${events.length} total events.`,\n        totalEvents: events.length,\n        relevantEvents: processedCount,\n        monthsProcessed: months,\n      });\n    } catch (error) {\n      console.error('Historical calendar sync error:', error);\n      res.status(500).json({ error: 'Failed to sync historical calendar data' });\n    }\n  });\n\n  app.post('/api/calendar/process-events', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { usePremiumModel = true, batchSize = 25 } = req.body;\n\n      console.log(`Starting intelligent LLM processing for user ${user.id}`);\n\n      const openRouterWithStorage = createOpenRouterService(storage);\n      const contacts = await storage.getContactsByUserId(user.id);\n      const events = await storage.getUnprocessedCalendarEvents(user.id);\n\n      if (events.length === 0) {\n        return res.json({\n          success: true,\n          message: 'No unprocessed events found',\n        });\n      }\n\n      // Check current usage and get recommendations\n      const usageStats = await rateLimiter.getUsageStats(user.id);\n\n      let processedCount = 0;\n\n      // Process in smaller batches for ongoing processing\n      for (let i = 0; i < events.length; i += batchSize) {\n        const batch = events.slice(i, i + batchSize);\n        console.log(\n          `Processing batch ${Math.floor(i / batchSize) + 1} of ${Math.ceil(\n            events.length / batchSize\n          )}`\n        );\n\n        const results = await openRouterWithStorage.processCalendarEvents(\n          batch,\n          contacts,\n          user.id,\n          !usePremiumModel\n        );\n        processedCount += results.length;\n\n        // Mark processed events\n        for (const event of batch) {\n          await storage.markCalendarEventProcessed(\n            event.id,\n            results.find((r) => r.eventId === event.id) || null\n          );\n        }\n      }\n\n      res.json({\n        success: true,\n        message: `Event processing completed. Processed ${processedCount} relevant events from ${events.length} total events.`,\n        totalEvents: events.length,\n        relevantEvents: processedCount,\n        modelUsed: usePremiumModel ? 'qwen3-235b' : 'llama-3.1-8b-free',\n      });\n    } catch (error) {\n      console.error('Event processing error:', error);\n      res.status(500).json({ error: 'Failed to process calendar events' });\n    }\n  });\n\n  app.get('/api/calendar/unprocessed-count', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const events = await storage.getUnprocessedCalendarEvents(user.id);\n      res.json({ count: events.length });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to get unprocessed events count' });\n    }\n  });\n\n  app.get('/api/calendar/sync-stats', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n\n      // Get total events\n      const allEvents = await storage.getCalendarEventsByUserId(user.id, 1000);\n      const unprocessedEvents = await storage.getUnprocessedCalendarEvents(user.id);\n\n      // Calculate date ranges\n      const now = new Date();\n      const oneYearAgo = new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000);\n      const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n      // Filter events by date ranges\n      const eventsLastYear = allEvents.filter(\n        (e) => e.startTime && new Date(e.startTime) >= oneYearAgo\n      );\n      const eventsLastMonth = allEvents.filter(\n        (e) => e.startTime && new Date(e.startTime) >= oneMonthAgo\n      );\n      const futureEvents = allEvents.filter((e) => e.startTime && new Date(e.startTime) > now);\n\n      res.json({\n        totalEvents: allEvents.length,\n        processedEvents: allEvents.length - unprocessedEvents.length,\n        unprocessedEvents: unprocessedEvents.length,\n        eventsLastYear: eventsLastYear.length,\n        eventsLastMonth: eventsLastMonth.length,\n        futureEvents: futureEvents.length,\n        oldestEvent: allEvents.length > 0 ? allEvents[allEvents.length - 1]?.startTime : null,\n        newestEvent: allEvents.length > 0 ? allEvents[0]?.startTime : null,\n      });\n    } catch (error) {\n      console.error('Sync stats error:', error);\n      res.status(500).json({ error: 'Failed to get sync statistics' });\n    }\n  });\n\n  // Rate limiting and usage stats endpoint\n  app.get('/api/rate-limit/usage', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const usageStats = await rateLimiter.getUsageStats(user.id);\n      res.json(usageStats);\n    } catch (error) {\n      console.error('Usage stats error:', error);\n      res.status(500).json({ error: 'Failed to get usage statistics' });\n    }\n  });\n\n  // Get model recommendations\n  app.post('/api/rate-limit/recommend', requireAuth, async (req, res) => {\n    try {\n      const { eventCount, isHistoricalSync } = req.body;\n      const recommendedModel = rateLimiter.getRecommendedModel(\n        eventCount || 0,\n        isHistoricalSync || false\n      );\n\n      res.json({\n        recommendedModel,\n        isFreeModel: recommendedModel.includes('free'),\n        reason:\n          isHistoricalSync || eventCount > 50\n            ? 'Free model recommended for bulk processing to manage costs'\n            : 'Premium model recommended for better accuracy on smaller batches',\n      });\n    } catch (error) {\n      console.error('Model recommendation error:', error);\n      res.status(500).json({ error: 'Failed to get model recommendation' });\n    }\n  });\n\n  // Email Data Processing (for AI insights, not email management)\n  app.get('/api/emails/processed', apiRateLimit, requireAuth, async (req: any, res: any) => {\n    try {\n      const user = req.user as any;\n      const limit = Math.min(parseInt(req.query.limit as string) || 50, 200); // Cap at 200\n      const emails = await storage.getEmailsByUserId(user.id, limit);\n      // Only return processed emails with extracted data\n      const processedEmails = emails.filter(email => email.processed && email.extractedData);\n      res.json(sanitizeResponse(processedEmails));\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch processed emails' });\n    }\n  });\n\n  app.get('/api/emails/unprocessed', apiRateLimit, requireAuth, async (req: any, res: any) => {\n    try {\n      const user = req.user as any;\n      const emails = await storage.getUnprocessedEmails(user.id);\n      res.json(sanitizeResponse(emails));\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch unprocessed emails' });\n    }\n  });\n\n  app.patch('/api/emails/:id/mark-processed', apiRateLimit, csrfProtection, requireAuth, async (req: any, res: any) => {\n    try {\n      const { extractedData, relevanceScore, filterReason } = req.body;\n      const email = await storage.markEmailProcessed(req.params.id, {\n        extractedData,\n        relevanceScore,\n        filterReason\n      });\n      res.json(sanitizeResponse(email));\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to mark email as processed' });\n    }\n  });\n\n  app.post('/api/emails/sync', apiRateLimit, csrfProtection, requireAuth, async (req: any, res: any) => {\n    try {\n      const user = req.user as any;\n      await syncService.syncEmails(user.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to sync emails' });\n    }\n  });\n\n  // Tags\n  app.get('/api/tags', requireAuth, async (req, res) => {\n    try {\n      const tags = await storage.getAllTags();\n      res.json(tags);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch tags' });\n    }\n  });\n\n  app.post('/api/tags', requireAuth, async (req, res) => {\n    try {\n      const { name, color } = req.body;\n      console.log('Creating tag:', { name, color });\n\n      if (!name || !name.trim()) {\n        return res.status(400).json({ error: 'Tag name is required' });\n      }\n\n      const tag = await storage.createTag({\n        name: name.trim(),\n        color: color || '#3b82f6',\n      });\n      console.log('Tag created successfully:', tag);\n      res.json(tag);\n    } catch (error) {\n      console.error('Tag creation error:', error);\n\n      // Handle specific database errors\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      if (errorMessage.includes('duplicate') || errorMessage.includes('unique')) {\n        return res.status(409).json({ error: 'A tag with this name already exists' });\n      }\n\n      res.status(500).json({ error: 'Failed to create tag' });\n    }\n  });\n\n  app.post('/api/contacts/bulk/add-tag', requireAuth, async (req, res) => {\n    try {\n      const { contactIds, tagId, tagName, tagColor } = req.body;\n\n      let finalTagId = tagId;\n\n      // Create new tag if tagName is provided but no tagId\n      if (!tagId && tagName) {\n        const newTag = await storage.createTag({\n          name: tagName,\n          color: tagColor || '#3b82f6',\n        });\n        finalTagId = newTag.id;\n      }\n\n      if (!finalTagId) {\n        return res.status(400).json({ error: 'Tag ID or tag name is required' });\n      }\n\n      const contactTags = await storage.addTagToContacts(contactIds, finalTagId);\n      res.json({ success: true, contactTags, tagId: finalTagId });\n    } catch (error) {\n      console.error('Bulk add tag error:', error);\n      res.status(500).json({ error: 'Failed to add tag to contacts' });\n    }\n  });\n\n  app.post('/api/contacts/bulk/remove-tag', requireAuth, async (req, res) => {\n    try {\n      const { contactIds, tagId } = req.body;\n      const success = await storage.removeTagFromContacts(contactIds, tagId);\n      res.json({ success });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to remove tag from contacts' });\n    }\n  });\n\n  // ===== TASK MANAGEMENT API ROUTES =====\n\n  // Projects\n  app.get('/api/projects', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const projects = await storage.getProjectsByUserId(user.id);\n      res.json(projects);\n    } catch (error) {\n      console.error('Get projects error:', error);\n      res.status(500).json({ error: 'Failed to fetch projects' });\n    }\n  });\n\n  app.post('/api/projects', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const projectData = { ...req.body, userId: user.id };\n      const project = await storage.createProject(projectData);\n      res.json(project);\n    } catch (error) {\n      console.error('Create project error:', error);\n      res.status(500).json({ error: 'Failed to create project' });\n    }\n  });\n\n  app.patch('/api/projects/:id', requireAuth, async (req, res) => {\n    try {\n      const project = await storage.updateProject(req.params.id, req.body);\n      res.json(project);\n    } catch (error) {\n      console.error('Update project error:', error);\n      res.status(500).json({ error: 'Failed to update project' });\n    }\n  });\n\n  app.delete('/api/projects/:id', requireAuth, async (req, res) => {\n    try {\n      const success = await storage.deleteProject(req.params.id);\n      res.json({ success });\n    } catch (error) {\n      console.error('Delete project error:', error);\n      res.status(500).json({ error: 'Failed to delete project' });\n    }\n  });\n\n  // Tasks\n  app.get('/api/tasks', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { status, project, owner } = req.query;\n\n      let tasks;\n      if (project) {\n        tasks = await storage.getTasksByProjectId(project as string);\n      } else if (status && owner) {\n        // Validate enum values\n        const validStatuses = ['pending', 'in_progress', 'completed', 'cancelled', 'waiting_approval'] as const;\n        const validOwners = ['user', 'ai_assistant'] as const;\n        \n        const statusStr = status as string;\n        const ownerStr = owner as string;\n        \n        if (!validStatuses.includes(statusStr as typeof validStatuses[number])) {\n          return res.status(400).json({ error: `Invalid status. Must be one of: ${validStatuses.join(', ')}` });\n        }\n        \n        if (!validOwners.includes(ownerStr as typeof validOwners[number])) {\n          return res.status(400).json({ error: `Invalid owner. Must be one of: ${validOwners.join(', ')}` });\n        }\n        \n        tasks = await storage.getTasksByStatus(\n          statusStr as typeof validStatuses[number],\n          ownerStr as typeof validOwners[number]\n        );\n      } else {\n        const statuses = status ? (status as string).split(',') : undefined;\n        tasks = await storage.getTasksByUserId(user.id, statuses);\n      }\n\n      res.json(tasks);\n    } catch (error) {\n      console.error('Get tasks error:', error);\n      res.status(500).json({ error: 'Failed to fetch tasks' });\n    }\n  });\n\n  app.get('/api/tasks/:id', requireAuth, async (req, res) => {\n    try {\n      const task = await storage.getTask(req.params.id);\n      if (!task) {\n        return res.status(404).json({ error: 'Task not found' });\n      }\n\n      // Get subtasks and activities\n      const [subtasks, activities] = await Promise.all([\n        storage.getSubtasks(task.id),\n        storage.getTaskActivities(task.id),\n      ]);\n\n      res.json({ ...task, subtasks, activities });\n    } catch (error) {\n      console.error('Get task error:', error);\n      res.status(500).json({ error: 'Failed to fetch task' });\n    }\n  });\n\n  app.post('/api/tasks', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const taskData = { ...req.body, userId: user.id };\n\n      const task = await storage.createTask(taskData);\n\n      // Create activity log for task creation\n      await storage.createTaskActivity({\n        taskId: task.id,\n        actorType: 'user',\n        actorId: user.id,\n        actionType: 'created',\n        description: `Task created: ${task.title}`,\n        metadata: { priority: task.priority, owner: task.owner },\n      });\n\n      res.json(task);\n    } catch (error) {\n      console.error('Create task error:', error);\n      res.status(500).json({ error: 'Failed to create task' });\n    }\n  });\n\n  app.patch('/api/tasks/:id', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const updates = req.body;\n\n      const task = await storage.updateTask(req.params.id, updates);\n\n      // Create activity log for task update\n      const activityDescription = Object.keys(updates)\n        .map((key) => {\n          if (key === 'status') return `Status changed to ${updates[key]}`;\n          if (key === 'priority') return `Priority changed to ${updates[key]}`;\n          if (key === 'completedAt' && updates[key]) return 'Task completed';\n          return `${key} updated`;\n        })\n        .join(', ');\n\n      await storage.createTaskActivity({\n        taskId: task.id,\n        actorType: 'user',\n        actorId: user.id,\n        actionType: 'updated',\n        description: activityDescription,\n        metadata: updates,\n      });\n\n      res.json(task);\n    } catch (error) {\n      console.error('Update task error:', error);\n      res.status(500).json({ error: 'Failed to update task' });\n    }\n  });\n\n  app.delete('/api/tasks/:id', requireAuth, async (req, res) => {\n    try {\n      const success = await storage.deleteTask(req.params.id);\n      res.json({ success });\n    } catch (error) {\n      console.error('Delete task error:', error);\n      res.status(500).json({ error: 'Failed to delete task' });\n    }\n  });\n\n  // Task delegation to AI\n  app.post('/api/tasks/delegate-to-ai', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { title, description, contactIds, dueDate, projectId, priority } = req.body;\n\n      const task = await taskAI.delegateTaskToAI(user.id, {\n        title,\n        description,\n        contactIds,\n        dueDate: dueDate ? new Date(dueDate) : undefined,\n        projectId,\n        priority,\n      });\n\n      res.json({\n        success: true,\n        task,\n        message: 'Task successfully delegated to AI assistant. Processing will begin shortly.',\n      });\n    } catch (error) {\n      console.error('Delegate task to AI error:', error);\n      res.status(500).json({ error: 'Failed to delegate task to AI' });\n    }\n  });\n\n  // Bulk task creation from contacts\n  app.post('/api/tasks/bulk-create', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { title, description, contactIds, dueDate, projectId, owner } = req.body;\n\n      if (owner === 'ai_assistant') {\n        // Delegate to AI for processing\n        const task = await taskAI.delegateTaskToAI(user.id, {\n          title,\n          description,\n          contactIds,\n          dueDate: dueDate ? new Date(dueDate) : undefined,\n          projectId,\n        });\n\n        res.json({\n          success: true,\n          task,\n          message: 'Bulk task delegated to AI for processing',\n        });\n      } else {\n        // Create regular user task\n        const task = await storage.createTask({\n          userId: user.id,\n          title,\n          description,\n          assignedContactIds: contactIds,\n          dueDate: dueDate ? new Date(dueDate) : undefined,\n          projectId,\n          owner: 'user',\n        });\n\n        await storage.createTaskActivity({\n          taskId: task.id,\n          actorType: 'user',\n          actorId: user.id,\n          actionType: 'created',\n          description: `Bulk task created for ${contactIds.length} contacts`,\n          metadata: { contactCount: contactIds.length },\n        });\n\n        res.json({ success: true, task });\n      }\n    } catch (error) {\n      console.error('Bulk create task error:', error);\n      res.status(500).json({ error: 'Failed to create bulk task' });\n    }\n  });\n\n  // AI Suggestions\n  app.get('/api/ai-suggestions', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { status } = req.query;\n\n      const suggestions = await storage.getAiSuggestionsByUserId(user.id, status as string);\n      res.json(suggestions);\n    } catch (error) {\n      console.error('Get AI suggestions error:', error);\n      res.status(500).json({ error: 'Failed to fetch AI suggestions' });\n    }\n  });\n\n  app.patch('/api/ai-suggestions/:id/approve', requireAuth, async (req, res) => {\n    try {\n      const suggestion = await storage.updateAiSuggestion(req.params.id, {\n        status: 'approved',\n        reviewedAt: new Date(),\n      });\n\n      // Execute the approved suggestion\n      const success = await taskAI.executeAISuggestion(req.params.id);\n\n      res.json({\n        success,\n        suggestion,\n        message: success\n          ? 'Suggestion approved and executed'\n          : 'Suggestion approved but execution failed',\n      });\n    } catch (error) {\n      console.error('Approve AI suggestion error:', error);\n      res.status(500).json({ error: 'Failed to approve AI suggestion' });\n    }\n  });\n\n  app.patch('/api/ai-suggestions/:id/reject', requireAuth, async (req, res) => {\n    try {\n      const { reason } = req.body;\n      const suggestion = await storage.updateAiSuggestion(req.params.id, {\n        status: 'rejected',\n        reviewedAt: new Date(),\n        rejectionReason: reason,\n      });\n\n      res.json({ success: true, suggestion });\n    } catch (error) {\n      console.error('Reject AI suggestion error:', error);\n      res.status(500).json({ error: 'Failed to reject AI suggestion' });\n    }\n  });\n\n  // Data Processing and Background Jobs\n  app.post('/api/data-processing/attendance-csv', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { csvData, fileName } = req.body;\n\n      const suggestions = await taskAI.processAttendanceCSV(user.id, csvData, fileName);\n\n      res.json({\n        success: true,\n        suggestionsCreated: suggestions.length,\n        suggestions,\n      });\n    } catch (error) {\n      console.error('Process attendance CSV error:', error);\n      res.status(500).json({ error: 'Failed to process attendance CSV' });\n    }\n  });\n\n  app.post('/api/data-processing/photo-gdpr', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { photoData } = req.body;\n\n      const suggestions = await taskAI.processNewPhotos(user.id, photoData);\n\n      res.json({\n        success: true,\n        suggestionsCreated: suggestions.length,\n        suggestions,\n      });\n    } catch (error) {\n      console.error('Process photo GDPR error:', error);\n      res.status(500).json({ error: 'Failed to process photo data' });\n    }\n  });\n\n  app.get('/api/data-processing/jobs', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const jobs = await storage.getDataProcessingJobsByUserId(user.id);\n      res.json(jobs);\n    } catch (error) {\n      console.error('Get data processing jobs error:', error);\n      res.status(500).json({ error: 'Failed to fetch data processing jobs' });\n    }\n  });\n\n  // Manual trigger for immediate AI analysis\n  app.post('/api/ai/trigger-analysis', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      await taskScheduler.triggerImmediateAnalysis(user.id);\n\n      res.json({\n        success: true,\n        message: 'AI analysis triggered successfully. Check AI suggestions for results.',\n      });\n    } catch (error) {\n      console.error('Trigger AI analysis error:', error);\n      res.status(500).json({ error: 'Failed to trigger AI analysis' });\n    }\n  });\n\n  // Task analytics and insights\n  app.get('/api/tasks/analytics', requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n\n      const [allTasks, pendingTasks, completedTasks, aiTasks] = await Promise.all([\n        storage.getTasksByUserId(user.id),\n        storage.getTasksByUserId(user.id, ['pending']),\n        storage.getTasksByUserId(user.id, ['completed']),\n        storage.getTasksByStatus('in_progress', 'ai_assistant'),\n      ]);\n\n      const overdueTasks = allTasks.filter(\n        (task) => task.dueDate && new Date(task.dueDate) < new Date() && task.status !== 'completed'\n      );\n\n      const todaysTasks = allTasks.filter(\n        (task) =>\n          task.dueDate && new Date(task.dueDate).toDateString() === new Date().toDateString()\n      );\n\n      const analytics = {\n        totalTasks: allTasks.length,\n        pendingTasks: pendingTasks.length,\n        completedTasks: completedTasks.length,\n        overdueTasks: overdueTasks.length,\n        todaysTasks: todaysTasks.length,\n        aiTasksInProgress: aiTasks.length,\n        completionRate:\n          allTasks.length > 0 ? ((completedTasks.length / allTasks.length) * 100).toFixed(1) : '0',\n        averageCompletionTime: calculateAverageCompletionTime(completedTasks),\n      };\n\n      res.json(analytics);\n    } catch (error) {\n      console.error('Get task analytics error:', error);\n      res.status(500).json({ error: 'Failed to fetch task analytics' });\n    }\n  });\n\n  // Helper function for task analytics\n  function calculateAverageCompletionTime(completedTasks: any[]): string {\n    if (completedTasks.length === 0) return '0 days';\n\n    const totalTime = completedTasks.reduce((sum, task) => {\n      if (task.completedAt && task.createdAt) {\n        return sum + (new Date(task.completedAt).getTime() - new Date(task.createdAt).getTime());\n      }\n      return sum;\n    }, 0);\n\n    const avgMilliseconds = totalTime / completedTasks.length;\n    const avgDays = Math.round(avgMilliseconds / (1000 * 60 * 60 * 24));\n\n    return `${avgDays} days`;\n  }\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/scripts/seed-test-data.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'contactIds' is defined but never used.","line":64,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":64,"suggestions":[{"messageId":"removeVar","data":{"varName":"contactIds"},"fix":{"range":[1755,1777],"text":""},"desc":"Remove unused variable 'contactIds'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'contactIds' is defined but never used.","line":64,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":54},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":64,"column":66,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":64,"endColumn":68},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":240,"column":72,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":240,"endColumn":74},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":294,"column":60,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":294,"endColumn":62},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":327,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":327,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":391,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":391,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":391,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":391,"endColumn":28}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n\nimport dotenv from 'dotenv';\ndotenv.config();\n\nimport { db } from '../db';\nimport { users, contacts, calendarEvents, interactions, goals } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\n\n// Realistic wellness practitioner test data\nconst testUser = {\n  googleId: 'test-google-id-12345',\n  email: 'wellness.coach@example.com',\n  name: 'Sarah Johnson',\n  picture: 'https://example.com/avatar.jpg',\n  accessToken: 'test-access-token',\n  refreshToken: 'test-refresh-token',\n};\n\nconst testContacts = [\n  {\n    name: 'Emily Chen',\n    email: 'emily.chen@email.com',\n    phone: '+1-555-0123',\n    lifecycleStage: 'core_client' as const,\n    status: 'active',\n    notes: 'Regular yoga sessions, working on stress management'\n  },\n  {\n    name: 'Michael Rodriguez',\n    email: 'mike.rodriguez@email.com',\n    phone: '+1-555-0124',\n    lifecycleStage: 'new_client' as const,\n    status: 'active',\n    notes: 'New client, interested in mindfulness coaching'\n  },\n  {\n    name: 'Jessica Williams',\n    email: 'jessica.williams@email.com',\n    phone: '+1-555-0125',\n    lifecycleStage: 'needs_reconnecting' as const,\n    status: 'active',\n    notes: 'Missed last few sessions, may need follow-up'\n  },\n  {\n    name: 'David Kim',\n    email: 'david.kim@email.com',\n    phone: '+1-555-0126',\n    lifecycleStage: 'curious' as const,\n    status: 'active',\n    notes: 'Interested in meditation programs'\n  },\n  {\n    name: 'Amanda Foster',\n    email: 'amanda.foster@email.com',\n    phone: '+1-555-0127',\n    lifecycleStage: 'ambassador' as const,\n    status: 'active',\n    notes: 'Long-term client, refers others regularly'\n  }\n];\n\n// Realistic calendar events that would come from Google Calendar sync\nconst getCalendarEvents = (userId: string, contactIds: string[]) => [\n  {\n    userId,\n    googleEventId: 'event_001_' + Date.now(),\n    summary: '1:1 Wellness Session - Emily Chen',\n    description: 'Weekly wellness session focusing on stress reduction techniques and mindfulness practices. Emily mentioned feeling overwhelmed at work this week.',\n    startTime: new Date('2025-01-28T10:00:00Z'),\n    endTime: new Date('2025-01-28T11:00:00Z'),\n    location: 'Wellness Center - Room 2',\n    meetingType: 'in-person',\n    attendees: [{ email: 'emily.chen@email.com', name: 'Emily Chen' }],\n    calendarId: 'primary',\n    calendarName: 'Business',\n    calendarColor: '#3174ad',\n    processed: false,\n    rawData: {\n      kind: 'calendar#event',\n      etag: '\"test_etag_001\"',\n      id: 'event_001_' + Date.now(),\n      status: 'confirmed',\n      created: '2025-01-20T12:00:00.000Z',\n      updated: '2025-01-20T12:00:00.000Z',\n      summary: '1:1 Wellness Session - Emily Chen',\n      description: 'Weekly wellness session focusing on stress reduction techniques and mindfulness practices. Emily mentioned feeling overwhelmed at work this week.',\n      location: 'Wellness Center - Room 2',\n      creator: { email: 'wellness.coach@example.com' },\n      organizer: { email: 'wellness.coach@example.com' },\n      start: { dateTime: '2025-01-28T10:00:00Z', timeZone: 'America/New_York' },\n      end: { dateTime: '2025-01-28T11:00:00Z', timeZone: 'America/New_York' },\n      attendees: [\n        { email: 'wellness.coach@example.com', responseStatus: 'accepted' },\n        { email: 'emily.chen@email.com', responseStatus: 'accepted' }\n      ]\n    }\n  },\n  {\n    userId,\n    googleEventId: 'event_002_' + Date.now(),\n    summary: 'Initial Consultation - Michael Rodriguez',\n    description: 'First consultation with new client Michael. Discussed goals: reducing anxiety, improving sleep quality, building healthy morning routine.',\n    startTime: new Date('2025-01-29T14:00:00Z'),\n    endTime: new Date('2025-01-29T15:30:00Z'),\n    location: 'Virtual - Zoom',\n    meetingType: 'video',\n    attendees: [{ email: 'mike.rodriguez@email.com', name: 'Michael Rodriguez' }],\n    calendarId: 'primary',\n    calendarName: 'Business',\n    calendarColor: '#3174ad',\n    processed: false,\n    rawData: {\n      kind: 'calendar#event',\n      etag: '\"test_etag_002\"',\n      id: 'event_002_' + Date.now(),\n      status: 'confirmed',\n      created: '2025-01-22T09:00:00.000Z',\n      updated: '2025-01-22T09:00:00.000Z',\n      summary: 'Initial Consultation - Michael Rodriguez',\n      description: 'First consultation with new client Michael. Discussed goals: reducing anxiety, improving sleep quality, building healthy morning routine.',\n      location: 'Virtual - Zoom',\n      creator: { email: 'wellness.coach@example.com' },\n      organizer: { email: 'wellness.coach@example.com' },\n      start: { dateTime: '2025-01-29T14:00:00Z', timeZone: 'America/New_York' },\n      end: { dateTime: '2025-01-29T15:30:00Z', timeZone: 'America/New_York' },\n      attendees: [\n        { email: 'wellness.coach@example.com', responseStatus: 'accepted' },\n        { email: 'mike.rodriguez@email.com', responseStatus: 'accepted' }\n      ]\n    }\n  },\n  {\n    userId,\n    googleEventId: 'event_003_' + Date.now(),\n    summary: 'Follow-up Call - Jessica Williams',\n    description: 'Check-in call with Jessica who has missed recent sessions. Want to understand any challenges and see how to better support her wellness journey.',\n    startTime: new Date('2025-01-30T16:00:00Z'),\n    endTime: new Date('2025-01-30T16:30:00Z'),\n    location: 'Phone call',\n    meetingType: 'phone',\n    attendees: [{ email: 'jessica.williams@email.com', name: 'Jessica Williams' }],\n    calendarId: 'primary',\n    calendarName: 'Business',\n    calendarColor: '#3174ad',\n    processed: false,\n    rawData: {\n      kind: 'calendar#event',\n      etag: '\"test_etag_003\"',\n      id: 'event_003_' + Date.now(),\n      status: 'confirmed',\n      created: '2025-01-25T11:00:00.000Z',\n      updated: '2025-01-25T11:00:00.000Z',\n      summary: 'Follow-up Call - Jessica Williams',\n      description: 'Check-in call with Jessica who has missed recent sessions. Want to understand any challenges and see how to better support her wellness journey.'\n    }\n  },\n  {\n    userId,\n    googleEventId: 'event_004_' + Date.now(),\n    summary: 'Group Meditation Session',\n    description: 'Weekly group meditation session. Focus on breath work and body awareness. Expecting 8-10 participants.',\n    startTime: new Date('2025-01-31T18:00:00Z'),\n    endTime: new Date('2025-01-31T19:00:00Z'),\n    location: 'Wellness Center - Main Hall',\n    meetingType: 'in-person',\n    attendees: [\n      { email: 'emily.chen@email.com', name: 'Emily Chen' },\n      { email: 'david.kim@email.com', name: 'David Kim' },\n      { email: 'amanda.foster@email.com', name: 'Amanda Foster' }\n    ],\n    calendarId: 'primary',\n    calendarName: 'Business',\n    calendarColor: '#3174ad',\n    processed: false,\n    rawData: {\n      kind: 'calendar#event',\n      etag: '\"test_etag_004\"',\n      id: 'event_004_' + Date.now(),\n      status: 'confirmed',\n      created: '2025-01-15T10:00:00.000Z',\n      updated: '2025-01-15T10:00:00.000Z',\n      summary: 'Group Meditation Session',\n      description: 'Weekly group meditation session. Focus on breath work and body awareness. Expecting 8-10 participants.',\n      location: 'Wellness Center - Main Hall',\n      recurrence: ['RRULE:FREQ=WEEKLY;BYDAY=FR']\n    }\n  },\n  {\n    userId,\n    googleEventId: 'event_005_' + Date.now(),\n    summary: 'Administrative Time - Client Notes',\n    description: 'Time blocked for updating client notes, treatment plans, and preparing for upcoming sessions.',\n    startTime: new Date('2025-02-01T09:00:00Z'),\n    endTime: new Date('2025-02-01T10:00:00Z'),\n    location: 'Home Office',\n    meetingType: 'other',\n    attendees: [],\n    calendarId: 'primary',\n    calendarName: 'Business',\n    calendarColor: '#3174ad',\n    processed: false,\n    rawData: {\n      kind: 'calendar#event',\n      etag: '\"test_etag_005\"',\n      id: 'event_005_' + Date.now(),\n      status: 'confirmed',\n      created: '2025-01-28T08:00:00.000Z',\n      updated: '2025-01-28T08:00:00.000Z',\n      summary: 'Administrative Time - Client Notes'\n    }\n  },\n  {\n    userId,\n    googleEventId: 'event_006_' + Date.now(),\n    summary: 'Personal: Yoga Class',\n    description: 'My own yoga practice at the local studio. Important for maintaining my own wellness.',\n    startTime: new Date('2025-02-01T07:00:00Z'),\n    endTime: new Date('2025-02-01T08:00:00Z'),\n    location: 'Downtown Yoga Studio',\n    meetingType: 'in-person',\n    attendees: [],\n    calendarId: 'personal',\n    calendarName: 'Personal',\n    calendarColor: '#42d692',\n    processed: false,\n    rawData: {\n      kind: 'calendar#event',\n      etag: '\"test_etag_006\"',\n      id: 'event_006_' + Date.now(),\n      status: 'confirmed',\n      created: '2025-01-20T20:00:00.000Z',\n      updated: '2025-01-20T20:00:00.000Z',\n      summary: 'Personal: Yoga Class'\n    }\n  }\n];\n\n// Sample email interactions that would come from Gmail sync  \nconst getEmailInteractions = (contactIds: { [email: string]: string }) => [\n  {\n    contactId: contactIds['emily.chen@email.com'],\n    type: 'email',\n    subject: 'Re: This week\\'s session',\n    content: 'Hi Sarah, Thank you for today\\'s session. The breathing techniques you showed me really helped when I had that stressful meeting yesterday. I\\'ve been practicing them daily. Looking forward to our session next week! Best, Emily',\n    timestamp: new Date('2025-01-28T15:30:00Z'),\n    source: 'gmail',\n    sourceId: 'gmail_msg_001_' + Date.now(),\n    sentiment: 4\n  },\n  {\n    contactId: contactIds['mike.rodriguez@email.com'],\n    type: 'email', \n    subject: 'Questions before our consultation',\n    content: 'Hi Sarah, I\\'m excited about our consultation tomorrow. I wanted to ask - should I prepare anything specific? Also, I\\'ve been having trouble sleeping lately (2-3 hours per night) and my anxiety levels are quite high. I\\'m hoping we can work on this together. Thanks, Michael',\n    timestamp: new Date('2025-01-28T20:00:00Z'),\n    source: 'gmail',\n    sourceId: 'gmail_msg_002_' + Date.now(),\n    sentiment: 2\n  },\n  {\n    contactId: contactIds['jessica.williams@email.com'],\n    type: 'email',\n    subject: 'Sorry I missed our session',\n    content: 'Sarah, I\\'m really sorry I had to cancel our last two sessions. Work has been absolutely crazy and I\\'ve been traveling a lot. I know consistency is important for my wellness journey but I\\'m struggling to balance everything. Can we talk about this in our call tomorrow? I don\\'t want to give up on this. Jessica',\n    timestamp: new Date('2025-01-29T22:00:00Z'),\n    source: 'gmail',\n    sourceId: 'gmail_msg_003_' + Date.now(),\n    sentiment: 2\n  },\n  {\n    contactId: contactIds['david.kim@email.com'],\n    type: 'email',\n    subject: 'Meditation program inquiry',\n    content: 'Hello Sarah, I attended your group meditation session last Friday and found it incredibly peaceful. I\\'m interested in learning more about your individual meditation coaching programs. Could we schedule a time to discuss? I\\'m particularly interested in techniques for focus and productivity. Thanks, David',\n    timestamp: new Date('2025-01-26T10:00:00Z'),\n    source: 'gmail',\n    sourceId: 'gmail_msg_004_' + Date.now(),\n    sentiment: 4\n  },\n  {\n    contactId: contactIds['amanda.foster@email.com'],\n    type: 'email',\n    subject: 'Thank you + referral',\n    content: 'Sarah, I can\\'t thank you enough for the transformation I\\'ve experienced over the past year. My stress levels are at an all-time low and I feel more centered than ever. I\\'ve referred my colleague Lisa Martinez (lisa.martinez@company.com) to you - she\\'s dealing with burnout and I think your approach would really help her. She\\'ll be reaching out soon. Gratefully, Amanda',\n    timestamp: new Date('2025-01-27T14:20:00Z'),\n    source: 'gmail',\n    sourceId: 'gmail_msg_005_' + Date.now(),\n    sentiment: 5\n  }\n];\n\n// Sample wellness goals\nconst getGoals = (contactIds: { [email: string]: string }) => [\n  {\n    contactId: contactIds['emily.chen@email.com'],\n    title: 'Daily Meditation Practice',\n    description: 'Establish consistent daily meditation practice of at least 10 minutes',\n    targetValue: 30,\n    currentValue: 18,\n    unit: 'days',\n    status: 'active',\n    deadline: new Date('2025-03-01T00:00:00Z')\n  },\n  {\n    contactId: contactIds['mike.rodriguez@email.com'],\n    title: 'Improve Sleep Quality',\n    description: 'Achieve 7-8 hours of quality sleep per night using relaxation techniques',\n    targetValue: 8,\n    currentValue: 4,\n    unit: 'hours',\n    status: 'active',\n    deadline: new Date('2025-04-01T00:00:00Z')\n  },\n  {\n    contactId: contactIds['jessica.williams@email.com'],\n    title: 'Weekly Session Attendance',\n    description: 'Attend weekly wellness sessions consistently',\n    targetValue: 4,\n    currentValue: 1,\n    unit: 'sessions',\n    status: 'active',\n    deadline: new Date('2025-02-28T00:00:00Z')\n  }\n];\n\nexport async function seedTestData() {\n  console.log('🌱 Starting seed data insertion...');\n\n  try {\n    // Clean up existing test data\n    console.log('🧹 Cleaning up existing test data...');\n    await db.delete(interactions).where(eq(interactions.source, 'gmail'));\n    await db.delete(calendarEvents).where(eq(calendarEvents.googleEventId, 'test'));\n    await db.delete(goals);\n    await db.delete(contacts).where(eq(contacts.email, 'emily.chen@email.com'));\n    await db.delete(users).where(eq(users.email, testUser.email));\n\n    // Insert test user\n    console.log('👤 Creating test user...');\n    const [user] = await db.insert(users).values(testUser).returning();\n    \n    // Insert test contacts\n    console.log('👥 Creating test contacts...');\n    const insertedContacts = await db.insert(contacts).values(\n      testContacts.map(contact => ({...contact, userId: user.id}))\n    ).returning();\n    \n    // Create contact email to ID mapping\n    const contactEmailToId: { [email: string]: string } = {};\n    insertedContacts.forEach(contact => {\n      contactEmailToId[contact.email] = contact.id;\n    });\n    \n    // Insert calendar events\n    console.log('📅 Creating calendar events...');\n    const calendarEventData = getCalendarEvents(user.id, insertedContacts.map(c => c.id));\n    await db.insert(calendarEvents).values(calendarEventData);\n    \n    // Insert email interactions\n    console.log('📧 Creating email interactions...');\n    const emailInteractionData = getEmailInteractions(contactEmailToId);\n    await db.insert(interactions).values(emailInteractionData);\n    \n    // Insert goals\n    console.log('🎯 Creating wellness goals...');\n    const goalData = getGoals(contactEmailToId);\n    await db.insert(goals).values(goalData);\n    \n    console.log('✅ Seed data insertion completed successfully!');\n    console.log(`📊 Created:`);\n    console.log(`   • 1 test user (${user.email})`);\n    console.log(`   • ${insertedContacts.length} contacts`);\n    console.log(`   • ${calendarEventData.length} calendar events`);\n    console.log(`   • ${emailInteractionData.length} email interactions`);\n    console.log(`   • ${goalData.length} wellness goals`);\n    \n    return {\n      user,\n      contacts: insertedContacts,\n      success: true\n    };\n    \n  } catch (error) {\n    console.error('❌ Error seeding test data:', error);\n    throw error;\n  }\n}\n\n// Allow running as script\nif (require.main === module) {\n  seedTestData()\n    .then(() => {\n      console.log('✨ Test data seeding complete!');\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error('💥 Seeding failed:', error);\n      process.exit(1);\n    });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/seed-test-data.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":325,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":325,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n\nimport dotenv from 'dotenv';\ndotenv.config();\n\nimport { db } from './db';\nimport {\n  users,\n  contacts,\n  calendarEvents,\n  interactions,\n  \n  type InsertUser,\n  type InsertContact,\n  type InsertCalendarEvent,\n  type InsertInteraction,\n} from '@shared/schema';\nimport { eq } from 'drizzle-orm';\n\n// Test user data\nconst testUser: InsertUser = {\n  googleId: 'test-google-id-12345',\n  email: 'wellness.coach@example.com',\n  name: 'Dr. Sarah Thompson',\n  picture: 'https://example.com/avatar.jpg',\n  accessToken: 'test-access-token',\n  refreshToken: 'test-refresh-token',\n};\n\n// Realistic client contacts\nconst testContacts: Omit<InsertContact, 'userId'>[] = [\n  {\n    name: 'Emma Rodriguez',\n    email: 'emma.rodriguez@email.com',\n    phone: '+1-555-0123',\n    lifecycleStage: 'core_client',\n    status: 'active',\n    sentiment: 4,\n    engagementTrend: 'improving',\n    notes: 'Making excellent progress with anxiety management. Very engaged.',\n    lastContact: new Date('2025-01-30T10:00:00Z'),\n    referralCount: 2,\n  },\n  {\n    name: 'Michael Chen',\n    email: 'michael.chen@techcorp.com',\n    phone: '+1-555-0124',\n    lifecycleStage: 'new_client',\n    status: 'active',\n    sentiment: 3,\n    engagementTrend: 'stable',\n    notes: 'Recently started stress management program. Works in tech.',\n    lastContact: new Date('2025-01-29T14:30:00Z'),\n    referralCount: 0,\n  },\n  {\n    name: 'Lisa Williams',\n    email: 'lisa.williams@gmail.com',\n    phone: '+1-555-0125',\n    lifecycleStage: 'needs_reconnecting',\n    status: 'active',\n    sentiment: 2,\n    engagementTrend: 'declining',\n    notes: 'Missed last two appointments. Going through difficult time.',\n    lastContact: new Date('2025-01-15T09:00:00Z'),\n    referralCount: 1,\n  },\n  {\n    name: 'James Parker',\n    email: 'james.parker@consulting.biz',\n    phone: '+1-555-0126',\n    lifecycleStage: 'ambassador',\n    status: 'active',\n    sentiment: 5,\n    engagementTrend: 'improving',\n    notes: 'Transformation success story. Refers many clients.',\n    lastContact: new Date('2025-01-28T16:00:00Z'),\n    referralCount: 5,\n  },\n  {\n    name: 'Rachel Davis',\n    email: 'rachel.davis@university.edu',\n    phone: '+1-555-0127',\n    lifecycleStage: 'curious',\n    status: 'active',\n    sentiment: 3,\n    engagementTrend: 'stable',\n    notes: 'Professor interested in mindfulness program. Scheduling consultation.',\n    lastContact: new Date('2025-01-31T11:00:00Z'),\n    referralCount: 0,\n  },\n];\n\n// Generate realistic calendar events that would come from Google Calendar sync\nfunction generateCalendarEvents(): Omit<InsertCalendarEvent, 'userId'>[] {\n  const events: Omit<InsertCalendarEvent, 'userId'>[] = [];\n  \n  \n  // Client session events\n  events.push({\n    googleEventId: 'event-001-emma-session',\n    summary: 'Emma Rodriguez - Anxiety Management Session',\n    description: 'Weekly session focusing on breathing techniques and cognitive restructuring. Emma has been making great progress with her social anxiety.',\n    startTime: new Date('2025-02-03T10:00:00Z'),\n    endTime: new Date('2025-02-03T11:00:00Z'),\n    location: 'Wellness Center - Room 2',\n    meetingType: 'in-person',\n    attendees: [{ email: 'emma.rodriguez@email.com', name: 'Emma Rodriguez' }],\n    calendarId: 'primary',\n    calendarName: 'Business Calendar',\n    processed: false,\n    rawData: {\n      id: 'event-001-emma-session',\n      summary: 'Emma Rodriguez - Anxiety Management Session',\n      description: 'Weekly session focusing on breathing techniques and cognitive restructuring. Emma has been making great progress with her social anxiety.',\n      start: { dateTime: '2025-02-03T10:00:00Z' },\n      end: { dateTime: '2025-02-03T11:00:00Z' },\n      location: 'Wellness Center - Room 2',\n      attendees: [{ email: 'emma.rodriguez@email.com', displayName: 'Emma Rodriguez' }],\n    },\n  });\n\n  events.push({\n    googleEventId: 'event-002-michael-consultation',\n    summary: 'Michael Chen - Initial Consultation',\n    description: 'First consultation to assess stress levels and develop personalized wellness plan. Michael mentioned high work pressure and burnout symptoms.',\n    startTime: new Date('2025-02-04T14:30:00Z'),\n    endTime: new Date('2025-02-04T15:30:00Z'),\n    location: 'Virtual - Zoom',\n    meetingType: 'video',\n    attendees: [{ email: 'michael.chen@techcorp.com', name: 'Michael Chen' }],\n    calendarId: 'primary',\n    calendarName: 'Business Calendar',\n    processed: false,\n    rawData: {\n      id: 'event-002-michael-consultation',\n      summary: 'Michael Chen - Initial Consultation',\n      description: 'First consultation to assess stress levels and develop personalized wellness plan. Michael mentioned high work pressure and burnout symptoms.',\n      start: { dateTime: '2025-02-04T14:30:00Z' },\n      end: { dateTime: '2025-02-04T15:30:00Z' },\n      location: 'Virtual - Zoom',\n      attendees: [{ email: 'michael.chen@techcorp.com', displayName: 'Michael Chen' }],\n    },\n  });\n\n  events.push({\n    googleEventId: 'event-003-lisa-followup',\n    summary: 'Lisa Williams - Check-in Call',\n    description: 'Follow-up call to check on Lisa after missed appointments. Concerned about her recent challenges and want to offer support.',\n    startTime: new Date('2025-02-05T09:00:00Z'),\n    endTime: new Date('2025-02-05T09:30:00Z'),\n    location: 'Phone Call',\n    meetingType: 'phone',\n    attendees: [{ email: 'lisa.williams@gmail.com', name: 'Lisa Williams' }],\n    calendarId: 'primary',\n    calendarName: 'Business Calendar',\n    processed: false,\n    rawData: {\n      id: 'event-003-lisa-followup',\n      summary: 'Lisa Williams - Check-in Call',\n      description: 'Follow-up call to check on Lisa after missed appointments. Concerned about her recent challenges and want to offer support.',\n      start: { dateTime: '2025-02-05T09:00:00Z' },\n      end: { dateTime: '2025-02-05T09:30:00Z' },\n      location: 'Phone Call',\n      attendees: [{ email: 'lisa.williams@gmail.com', displayName: 'Lisa Williams' }],\n    },\n  });\n\n  events.push({\n    googleEventId: 'event-004-group-mindfulness',\n    summary: 'Mindfulness Workshop - Group Session',\n    description: 'Monthly group mindfulness workshop. Focus on meditation techniques and stress reduction. Regular attendees include James and Rachel.',\n    startTime: new Date('2025-02-06T18:00:00Z'),\n    endTime: new Date('2025-02-06T19:30:00Z'),\n    location: 'Community Center - Main Hall',\n    meetingType: 'in-person',\n    attendees: [\n      { email: 'james.parker@consulting.biz', name: 'James Parker' },\n      { email: 'rachel.davis@university.edu', name: 'Rachel Davis' },\n      { email: 'participant1@example.com', name: 'Workshop Participant' },\n    ],\n    calendarId: 'primary',\n    calendarName: 'Business Calendar',\n    processed: false,\n    rawData: {\n      id: 'event-004-group-mindfulness',\n      summary: 'Mindfulness Workshop - Group Session',\n      description: 'Monthly group mindfulness workshop. Focus on meditation techniques and stress reduction. Regular attendees include James and Rachel.',\n      start: { dateTime: '2025-02-06T18:00:00Z' },\n      end: { dateTime: '2025-02-06T19:30:00Z' },\n      location: 'Community Center - Main Hall',\n      attendees: [\n        { email: 'james.parker@consulting.biz', displayName: 'James Parker' },\n        { email: 'rachel.davis@university.edu', displayName: 'Rachel Davis' },\n        { email: 'participant1@example.com', displayName: 'Workshop Participant' },\n      ],\n    },\n  });\n\n  // Personal/admin events to test filtering\n  events.push({\n    googleEventId: 'event-005-personal-appointment',\n    summary: 'Doctor Appointment',\n    description: 'Personal medical checkup',\n    startTime: new Date('2025-02-07T10:00:00Z'),\n    endTime: new Date('2025-02-07T11:00:00Z'),\n    location: 'Medical Center',\n    meetingType: 'in-person',\n    attendees: [],\n    calendarId: 'personal',\n    calendarName: 'Personal',\n    processed: false,\n    rawData: {\n      id: 'event-005-personal-appointment',\n      summary: 'Doctor Appointment',\n      description: 'Personal medical checkup',\n      start: { dateTime: '2025-02-07T10:00:00Z' },\n      end: { dateTime: '2025-02-07T11:00:00Z' },\n      location: 'Medical Center',\n    },\n  });\n\n  events.push({\n    googleEventId: 'event-006-admin-planning',\n    summary: 'Business Planning Session',\n    description: 'Monthly business review and planning. Review client progress, update programs, and plan marketing activities.',\n    startTime: new Date('2025-02-08T09:00:00Z'),\n    endTime: new Date('2025-02-08T11:00:00Z'),\n    location: 'Home Office',\n    meetingType: 'in-person',\n    attendees: [],\n    calendarId: 'primary',\n    calendarName: 'Business Calendar',\n    processed: false,\n    rawData: {\n      id: 'event-006-admin-planning',\n      summary: 'Business Planning Session',\n      description: 'Monthly business review and planning. Review client progress, update programs, and plan marketing activities.',\n      start: { dateTime: '2025-02-08T09:00:00Z' },\n      end: { dateTime: '2025-02-08T11:00:00Z' },\n      location: 'Home Office',\n    },\n  });\n\n  return events;\n}\n\n// Generate email-like interactions that would come from Gmail sync\nfunction generateInteractions(contactIds: { id: string; email: string }[]): Omit<InsertInteraction, 'contactId'>[] {\n  const interactions: Omit<InsertInteraction, 'contactId'>[] = [];\n\n  // Emma's interactions - positive progress\n  const emmaContact = contactIds.find(c => c.email === 'emma.rodriguez@email.com');\n  if (emmaContact) {\n    interactions.push({\n      type: 'email',\n      subject: 'Thank you for today\\'s session!',\n      content: 'Hi Dr. Thompson, I wanted to thank you for today\\'s session. The breathing exercises you taught me really helped during my presentation at work yesterday. I\\'m feeling much more confident about managing my anxiety. Looking forward to our next session!',\n      timestamp: new Date('2025-01-30T15:30:00Z'),\n      source: 'gmail',\n      sourceId: 'gmail-msg-001',\n      sentiment: 5,\n    });\n  }\n\n  // Michael's interaction - neutral/concerned\n  const michaelContact = contactIds.find(c => c.email === 'michael.chen@techcorp.com');\n  if (michaelContact) {\n    interactions.push({\n      type: 'email',\n      subject: 'Question about stress management techniques',\n      content: 'Dr. Thompson, I\\'ve been trying the mindfulness exercises you suggested, but I\\'m finding it hard to focus during meditation. My mind keeps racing about work deadlines. Is this normal? Should I be worried that it\\'s not working for me?',\n      timestamp: new Date('2025-01-29T20:45:00Z'),\n      source: 'gmail',\n      sourceId: 'gmail-msg-002',\n      sentiment: 2,\n    });\n  }\n\n  // Lisa's interaction - concerning\n  const lisaContact = contactIds.find(c => c.email === 'lisa.williams@gmail.com');\n  if (lisaContact) {\n    interactions.push({\n      type: 'email',\n      subject: 'Sorry for missing appointments',\n      content: 'Dr. Thompson, I\\'m really sorry for missing our last two sessions. Things have been incredibly difficult at home - my mom was diagnosed with dementia and I\\'ve been overwhelmed trying to coordinate her care while working full time. I know I need the support now more than ever, but I just can\\'t seem to manage everything.',\n      timestamp: new Date('2025-01-15T22:15:00Z'),\n      source: 'gmail',\n      sourceId: 'gmail-msg-003',\n      sentiment: 1,\n    });\n  }\n\n  // James's interaction - very positive\n  const jamesContact = contactIds.find(c => c.email === 'james.parker@consulting.biz');\n  if (jamesContact) {\n    interactions.push({\n      type: 'email',\n      subject: 'Amazing transformation - thank you!',\n      content: 'Dr. Thompson, I can\\'t thank you enough for the incredible journey we\\'ve been on together. Six months ago I was burned out, anxious, and frankly miserable. Today I gave a presentation to 200 people and felt completely at peace. My wife says I\\'m like a different person. I\\'ve already referred three colleagues to you - they desperately need what you offer.',\n      timestamp: new Date('2025-01-28T19:00:00Z'),\n      source: 'gmail',\n      sourceId: 'gmail-msg-004',\n      sentiment: 5,\n    });\n  }\n\n  // Rachel's interaction - curious but hesitant\n  const rachelContact = contactIds.find(c => c.email === 'rachel.davis@university.edu');\n  if (rachelContact) {\n    interactions.push({\n      type: 'email',\n      subject: 'Questions about your mindfulness program',\n      content: 'Dr. Thompson, James Parker recommended your services. As a psychology professor, I\\'m familiar with mindfulness research but have never tried it personally. I\\'m dealing with academic stress and would like to learn more about your approach. Do you offer any programs specifically for academics? What would be involved in getting started?',\n      timestamp: new Date('2025-01-31T14:20:00Z'),\n      source: 'gmail',\n      sourceId: 'gmail-msg-005',\n      sentiment: 3,\n    });\n  }\n\n  return interactions;\n}\n\nasync function seedTestData() {\n  console.log('🌱 Starting test data seeding...');\n\n  try {\n    // Check if test user already exists\n    const existingUser = await db\n      .select()\n      .from(users)\n      .where(eq(users.email, testUser.email))\n      .limit(1);\n\n    let user;\n    if (existingUser.length === 0) {\n      console.log('Creating test user...');\n      const [newUser] = await db.insert(users).values(testUser).returning();\n      user = newUser;\n    } else {\n      console.log('Test user already exists, using existing user');\n      user = existingUser[0];\n    }\n\n    // Clear existing test data for this user\n    console.log('Clearing existing test data...');\n    // Get all contacts for this user first\n    const existingContacts = await db.select({ id: contacts.id }).from(contacts).where(eq(contacts.userId, user.id));\n    \n    // Delete interactions first (they reference contacts)\n    for (const contact of existingContacts) {\n      await db.delete(interactions).where(eq(interactions.contactId, contact.id));\n    }\n    \n    // Then delete calendar events and contacts\n    await db.delete(calendarEvents).where(eq(calendarEvents.userId, user.id));\n    await db.delete(contacts).where(eq(contacts.userId, user.id));\n\n    // Insert test contacts\n    console.log('Creating test contacts...');\n    const contactsWithUserId = testContacts.map(contact => ({\n      ...contact,\n      userId: user.id,\n    }));\n    \n    const insertedContacts = await db\n      .insert(contacts)\n      .values(contactsWithUserId)\n      .returning({ id: contacts.id, email: contacts.email });\n\n    console.log(`Created ${insertedContacts.length} contacts`);\n\n    // Insert calendar events\n    console.log('Creating calendar events...');\n    const contactEmails = insertedContacts.map(c => c.email);\n    const calendarEventsData = generateCalendarEvents(user.id, contactEmails).map(event => ({\n      ...event,\n      userId: user.id,\n    }));\n    \n    await db.insert(calendarEvents).values(calendarEventsData);\n    console.log(`Created ${calendarEventsData.length} calendar events`);\n\n    // Insert interactions\n    console.log('Creating interactions...');\n    const interactionsData = generateInteractions(insertedContacts);\n    \n    for (const interaction of interactionsData) {\n      const contact = insertedContacts.find(() => {\n        // Find contact by checking which interactions belong to which contact\n        // This is a simple mapping - in real implementation you'd have proper relations\n        return true; // We'll assign based on order for simplicity\n      });\n      \n      if (contact) {\n        await db.insert(interactions).values({\n          ...interaction,\n          contactId: contact.id,\n        });\n      }\n    }\n\n    // Assign interactions to contacts properly\n    const allInteractions = generateInteractions(insertedContacts);\n    for (let i = 0; i < allInteractions.length && i < insertedContacts.length; i++) {\n      await db.insert(interactions).values({\n        ...allInteractions[i],\n        contactId: insertedContacts[i].id,\n      });\n    }\n\n    console.log(`Created ${allInteractions.length} interactions`);\n\n    console.log('✅ Test data seeding completed successfully!');\n    console.log('\\n📊 Summary:');\n    console.log(`- User: ${user.email}`);\n    console.log(`- Contacts: ${insertedContacts.length}`);\n    console.log(`- Calendar Events: ${calendarEventsData.length}`);\n    console.log(`- Interactions: ${allInteractions.length}`);\n    console.log('\\n🤖 Ready to test LLM processing!');\n    console.log('\\nNext steps:');\n    console.log('1. Run the LLM processor to analyze calendar events');\n    console.log('2. Check the frontend to see processed insights');\n    console.log('3. Test OpenRouter/Gemini integration');\n\n  } catch (error) {\n    console.error('❌ Error seeding test data:', error);\n    throw error;\n  }\n}\n\n// Check if this file is being run directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedTestData()\n    .then(() => {\n      console.log('Seeding completed!');\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error('Seeding failed:', error);\n      process.exit(1);\n    });\n}\n\nexport { seedTestData };\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/services/auth.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":5,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":5,"endColumn":78,"fix":{"range":[191,191],"text":" type"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":7,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":7,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[324,326],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":8,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":8,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[425,427],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":9,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":9,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[515,517],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":9,"column":102,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":9,"endColumn":104,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[563,565],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":53,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"err"},"fix":{"range":[1885,1898],"text":""},"desc":"Remove unused variable 'err'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":53,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":69,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[1897,1910],"text":""},"desc":"Remove unused variable 'id'."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import passport from 'passport';\nimport { Strategy as GoogleStrategy } from 'passport-google-oauth20';\nimport { storage } from '../storage';\nimport type { User } from '@shared/schema';\nimport { GoogleAuthProfile, PassportDoneCallback } from '../types/llm-types';\n\nconst GOOGLE_CLIENT_ID = process.env.GOOGLE_OAUTH_CLIENT_ID || process.env.GOOGLE_CLIENT_ID;\nconst GOOGLE_CLIENT_SECRET = process.env.GOOGLE_OAUTH_CLIENT_SECRET || process.env.GOOGLE_CLIENT_SECRET;\nconst CALLBACK_URL = process.env.GOOGLE_CALLBACK_URL || `${process.env.REPLIT_DOMAINS?.split(',')[0] || 'http://localhost:8080'}/auth/google/callback`;\n\nif (!GOOGLE_CLIENT_ID || !GOOGLE_CLIENT_SECRET) {\n  console.warn('Google OAuth credentials not configured. Authentication will not work.');\n}\n\npassport.use(new GoogleStrategy({\n  clientID: GOOGLE_CLIENT_ID!,\n  clientSecret: GOOGLE_CLIENT_SECRET!,\n  callbackURL: CALLBACK_URL,\n  scope: [\n    'email',\n    'profile',\n    'https://www.googleapis.com/auth/gmail.readonly',\n    'https://www.googleapis.com/auth/calendar',\n    'https://www.googleapis.com/auth/drive.readonly'\n  ]\n}, async (accessToken: string, refreshToken: string, profile: GoogleAuthProfile, done: PassportDoneCallback) => {\n  try {\n    let user = await storage.getUserByGoogleId(profile.id);\n    \n    if (!user) {\n      user = await storage.createUser({\n        googleId: profile.id,\n        email: profile.emails?.[0]?.value || '',\n        name: profile.displayName || '',\n        picture: profile.photos?.[0]?.value,\n        accessToken,\n        refreshToken: refreshToken || ''\n      });\n    } else {\n      // Update tokens\n      user = await storage.updateUser(user.id, {\n        accessToken,\n        refreshToken: refreshToken || user.refreshToken\n      });\n    }\n    \n    return done(null, user);\n  } catch (error) {\n    return done(error, null);\n  }\n}));\n\npassport.serializeUser((user: User, done: (err: unknown, id?: string) => void) => {\n  done(null, user.id);\n});\n\npassport.deserializeUser(async (id: string, done) => {\n  try {\n    const user = await storage.getUser(id);\n    done(null, user);\n  } catch (error) {\n    done(error, null);\n  }\n});\n\nexport default passport;\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/services/gemini.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":2,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":2,"endColumn":52,"fix":{"range":[66,66],"text":" type"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":4,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":4,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[177,179],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { GoogleGenerativeAI } from '@google/generative-ai';\nimport { UnknownObject } from '../types/llm-types';\n\nconst genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY || '');\nconst geminiModel = genAI.getGenerativeModel({ model: 'gemini-2.0-flash-exp' });\n\nexport class GeminiService {\n  async generateChatResponse(message: string, context?: UnknownObject): Promise<string> {\n    try {\n      const systemPrompt = `You are an AI assistant for a wellness solopreneur's client relationship management system. \n      You help analyze client data, provide insights, and suggest next steps for client care. \n      Be professional, empathetic, and focused on wellness outcomes.\n      \n      Current context: ${context ? JSON.stringify(context) : 'No specific context provided'}`;\n\n      const result = await geminiModel.generateContent([{ text: systemPrompt }, { text: message }]);\n\n      return result.response.text() || \"I'm sorry, I couldn't generate a response at this time.\";\n    } catch (error) {\n      console.error('Gemini API error:', error);\n      throw new Error(\n        'Failed to generate AI response. Please check your Google API configuration.'\n      );\n    }\n  }\n}\n\nexport const geminiService = new GeminiService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/services/gmail-filter.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"Imports \"gmail_v1\" and \"Auth\" are only used as type.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"someImportsAreOnlyTypes","endLine":1,"endColumn":53,"fix":{"range":[0,31],"text":"import type { gmail_v1, Auth } from 'googleapis';\nimport { google"}},{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":2,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":2,"endColumn":56,"fix":{"range":[59,59],"text":" type"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":124,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":124,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3812,3814],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":229,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":229,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7293,7295],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":233,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":233,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7399,7401],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":241,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":241,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7640,7642],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":268,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":268,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8547,8549],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":270,"column":76,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":270,"endColumn":78,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8642,8644],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":271,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":271,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8718,8720],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":285,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":285,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9284,9286],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":287,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":287,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9344,9346],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":296,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":296,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9667,9669],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":310,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":310,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10037,10039],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":349,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":349,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11124,11126],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import { gmail_v1, google, Auth } from 'googleapis';\nimport { EmailFilterConfig } from '../types/llm-types';\n\nexport interface ExtendedEmailFilterConfig extends EmailFilterConfig {\n  // Category exclusions (Gmail's automatic categorization)\n  excludeCategories: string[];\n  // Date range filtering\n  afterDate?: Date;\n  beforeDate?: Date;\n  // Business domain filtering\n  includeDomains?: string[];\n  excludeDomains?: string[];\n  // Content-based filtering\n  businessKeywords: string[];\n  spamKeywords: string[];\n  // Relevance scoring thresholds\n  minRelevanceScore: number;\n}\n\nexport interface FilteredEmail {\n  message: gmail_v1.Schema$Message;\n  relevanceScore: number;\n  filterReason: string;\n  category?: string;\n}\n\nexport class GmailFilterService {\n  private gmail: gmail_v1.Gmail;\n  private config: ExtendedEmailFilterConfig;\n\n  constructor(auth: Auth.OAuth2Client | Auth.GoogleAuth, config?: Partial<ExtendedEmailFilterConfig>) {\n    this.gmail = google.gmail({ version: 'v1', auth });\n    this.config = {\n      maxEmails: config?.maxEmails ?? 100,\n      daysBack: config?.daysBack ?? 30,\n      businessHoursOnly: config?.businessHoursOnly ?? false,\n      excludePromotions: config?.excludePromotions ?? true,\n      excludeSocial: config?.excludeSocial ?? true,\n      excludeCategories: ['promotions', 'social', 'updates', 'forums'],\n      businessKeywords: [\n        'meeting', 'proposal', 'contract', 'invoice', 'quote', 'project',\n        'deadline', 'schedule', 'budget', 'client', 'appointment', 'call',\n        'consultation', 'review', 'feedback', 'collaboration', 'partnership'\n      ],\n      spamKeywords: [\n        'unsubscribe', 'opt out', 'click here', 'free trial', 'limited time',\n        'act now', 'congratulations', 'winner', 'prize', 'lottery', 'urgent',\n        'expires today', 'special offer', 'discount', 'sale ends'\n      ],\n      minRelevanceScore: 6,\n      ...config\n    };\n  }\n\n  /**\n   * Build Gmail API query with aggressive pre-filtering\n   */\n  private buildFilterQuery(options: {\n    afterDate?: Date;\n    beforeDate?: Date;\n    maxResults?: number;\n  } = {}): string {\n    const queryParts: string[] = [];\n\n    // Exclude non-business categories (most effective filter)\n    this.config.excludeCategories.forEach(category => {\n      queryParts.push(`-category:${category}`);\n    });\n\n    // Date filtering\n    if (options.afterDate) {\n      const dateStr = options.afterDate.toISOString().split('T')[0].replace(/-/g, '/');\n      queryParts.push(`after:${dateStr}`);\n    }\n    if (options.beforeDate) {\n      const dateStr = options.beforeDate.toISOString().split('T')[0].replace(/-/g, '/');\n      queryParts.push(`before:${dateStr}`);\n    }\n\n    // Exclude obvious spam patterns\n    const spamExclusions = [\n      '-\"unsubscribe\"',\n      '-\"opt out\"', \n      '-\"click here\"',\n      '-\"free trial\"',\n      '-\"limited time\"'\n    ];\n    queryParts.push(...spamExclusions);\n\n    // Include business indicators (OR query)\n    const businessIndicators = [\n      'has:attachment',\n      '\"meeting\"',\n      '\"proposal\"',\n      '\"contract\"',\n      '\"invoice\"',\n      '\"project\"',\n      '\"client\"'\n    ];\n    if (businessIndicators.length > 0) {\n      queryParts.push(`(${businessIndicators.join(' OR ')})`);\n    }\n\n    return queryParts.join(' ');\n  }\n\n  /**\n   * Calculate business relevance score for an email\n   */\n  private calculateRelevanceScore(\n    subject: string = '',\n    fromEmail: string = '',\n    snippet: string = '',\n    hasAttachments: boolean = false,\n    category?: string\n  ): { score: number; reasons: string[] } {\n    let score = 0;\n    const reasons: string[] = [];\n\n    // Category-based scoring\n    if (category === 'primary') {\n      score += 3;\n      reasons.push('Gmail primary category');\n    } else if (this.config.excludeCategories.includes(category || '')) {\n      score -= 5;\n      reasons.push(`Excluded category: ${category}`);\n    }\n\n    // Business keywords in subject (weighted heavily)\n    const subjectLower = subject.toLowerCase();\n    const businessMatches = this.config.businessKeywords.filter(keyword => \n      subjectLower.includes(keyword.toLowerCase())\n    );\n    if (businessMatches.length > 0) {\n      score += businessMatches.length * 2;\n      reasons.push(`Business keywords in subject: ${businessMatches.join(', ')}`);\n    }\n\n    // Spam keywords (heavy penalty)\n    const spamMatches = this.config.spamKeywords.filter(keyword =>\n      subjectLower.includes(keyword.toLowerCase()) || \n      snippet.toLowerCase().includes(keyword.toLowerCase())\n    );\n    if (spamMatches.length > 0) {\n      score -= spamMatches.length * 3;\n      reasons.push(`Spam indicators: ${spamMatches.join(', ')}`);\n    }\n\n    // Domain analysis\n    const domain = fromEmail.split('@')[1]?.toLowerCase();\n    if (domain) {\n      // Business domains\n      if (this.config.includeDomains?.includes(domain)) {\n        score += 4;\n        reasons.push(`Whitelisted domain: ${domain}`);\n      }\n      \n      // Exclude known marketing domains\n      const marketingDomains = [\n        'mailchimp.com', 'constantcontact.com', 'campaign-archive.com',\n        'mailjet.com', 'sendgrid.net', 'amazonses.com', 'notifications.google.com',\n        'noreply', 'no-reply', 'donotreply'\n      ];\n      \n      if (marketingDomains.some(md => domain.includes(md)) || \n          fromEmail.toLowerCase().includes('noreply')) {\n        score -= 4;\n        reasons.push(`Marketing/automated domain: ${domain}`);\n      }\n\n      // Personal email domains (lower priority)\n      const personalDomains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com'];\n      if (personalDomains.includes(domain)) {\n        score -= 1;\n        reasons.push(`Personal email domain: ${domain}`);\n      }\n    }\n\n    // Attachments indicate business correspondence\n    if (hasAttachments) {\n      score += 2;\n      reasons.push('Has attachments');\n    }\n\n    // Content analysis\n    const businessContentKeywords = [\n      'meeting', 'schedule', 'appointment', 'call', 'zoom', 'teams',\n      'proposal', 'contract', 'agreement', 'invoice', 'payment',\n      'project', 'deadline', 'milestone', 'deliverable',\n      'client', 'customer', 'collaboration', 'partnership'\n    ];\n\n    const contentText = (subject + ' ' + snippet).toLowerCase();\n    const contentMatches = businessContentKeywords.filter(keyword =>\n      contentText.includes(keyword)\n    );\n\n    if (contentMatches.length > 0) {\n      score += Math.min(contentMatches.length, 3); // Cap at +3\n      reasons.push(`Business content indicators: ${contentMatches.slice(0, 3).join(', ')}`);\n    }\n\n    return { score: Math.max(0, Math.min(10, score)), reasons };\n  }\n\n  /**\n   * Fetch and filter emails with aggressive pre-filtering\n   */\n  async fetchFilteredEmails(options: {\n    afterDate?: Date;\n    beforeDate?: Date;\n    maxResults?: number;\n    pageToken?: string;\n  } = {}): Promise<{\n    emails: FilteredEmail[];\n    totalFetched: number;\n    totalFiltered: number;\n    nextPageToken?: string;\n  }> {\n    const query = this.buildFilterQuery(options);\n    \n    console.log('Gmail API Query:', query);\n\n    try {\n      // First, get message list with pre-filtering\n      const listResponse = await this.gmail.users.messages.list({\n        userId: 'me',\n        q: query,\n        maxResults: options.maxResults || 100,\n        pageToken: options.pageToken\n      });\n\n      const messages = listResponse.data.messages || [];\n      const totalFetched = messages.length;\n\n      if (messages.length === 0) {\n        return { \n          emails: [], \n          totalFetched: 0, \n          totalFiltered: 0,\n          nextPageToken: listResponse.data.nextPageToken || undefined\n        };\n      }\n\n      // Batch fetch message details (up to 100 at a time)\n      const batchSize = 100;\n      const filteredEmails: FilteredEmail[] = [];\n\n      for (let i = 0; i < messages.length; i += batchSize) {\n        const batch = messages.slice(i, i + batchSize);\n        \n        // Create batch request\n        const batchPromises = batch.map(message => \n          this.gmail.users.messages.get({\n            userId: 'me',\n            id: message.id!,\n            format: 'metadata',\n            metadataHeaders: ['Subject', 'From', 'To', 'Date', 'Category']\n          })\n        );\n\n        const batchResults = await Promise.allSettled(batchPromises);\n\n        // Process batch results\n        for (const result of batchResults) {\n          if (result.status === 'fulfilled') {\n            const message = result.value.data;\n            const headers = message.payload?.headers || [];\n            \n            const subject = headers.find(h => h.name === 'Subject')?.value || '';\n            const from = headers.find(h => h.name === 'From')?.value || '';\n            const fromEmail = from.match(/<(.+?)>/)?.[1] ?? from;\n            \n            // Extract category if available\n            const category = headers.find(h => h.name === 'Category')?.value;\n            \n            const hasAttachments = (message.payload?.parts?.some(part => \n              part.filename && part.filename.length > 0\n            )) ?? false;\n\n            // Calculate relevance score\n            const { score, reasons } = this.calculateRelevanceScore(\n              subject,\n              fromEmail,\n              message.snippet || '',\n              hasAttachments,\n              category || undefined\n            );\n\n            // Only include emails above threshold\n            if (score >= this.config.minRelevanceScore) {\n              filteredEmails.push({\n                message,\n                relevanceScore: score,\n                filterReason: reasons.join('; '),\n                category: category || undefined\n              });\n            }\n          }\n        }\n      }\n\n      // Sort by relevance score (highest first)\n      filteredEmails.sort((a, b) => b.relevanceScore - a.relevanceScore);\n\n      return {\n        emails: filteredEmails,\n        totalFetched,\n        totalFiltered: filteredEmails.length,\n        nextPageToken: listResponse.data.nextPageToken || undefined\n      };\n\n    } catch (error) {\n      console.error('Gmail filtering error:', error);\n      throw new Error(`Failed to fetch filtered emails: ${error}`);\n    }\n  }\n\n  /**\n   * Get filtering statistics for monitoring\n   */\n  async getFilteringStats(days: number = 7): Promise<{\n    totalEmails: number;\n    excludedByCategory: Record<string, number>;\n    averageRelevanceScore: number;\n    processingTimeMs: number;\n  }> {\n    const startTime = Date.now();\n    const afterDate = new Date();\n    afterDate.setDate(afterDate.getDate() - days);\n\n    // Get total emails without filtering\n    const totalQuery = `after:${afterDate.toISOString().split('T')[0].replace(/-/g, '/')}`;\n    const totalResponse = await this.gmail.users.messages.list({\n      userId: 'me',\n      q: totalQuery,\n      maxResults: 1\n    });\n\n    // Get filtered results\n    const filteredResult = await this.fetchFilteredEmails({ \n      afterDate, \n      maxResults: 100 \n    });\n\n    const processingTimeMs = Date.now() - startTime;\n\n    return {\n      totalEmails: totalResponse.data.resultSizeEstimate || 0,\n      excludedByCategory: {}, // Would need additional API calls to get category breakdown\n      averageRelevanceScore: filteredResult.emails.length > 0 \n        ? filteredResult.emails.reduce((sum, email) => sum + email.relevanceScore, 0) / filteredResult.emails.length\n        : 0,\n      processingTimeMs\n    };\n  }\n\n  /**\n   * Update filter configuration\n   */\n  updateConfig(newConfig: Partial<EmailFilterConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n}\n\nexport default GmailFilterService;","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/services/google.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":6,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":26},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":33,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":33,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[993,995],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":43,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":43,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1263,1265],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":44,"column":68,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":44,"endColumn":70,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1337,1339],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":45,"column":74,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":45,"endColumn":76,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1417,1419],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":124,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":124,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4218,4220],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":178,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":178,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includes on an `error` typed value.","line":178,"column":29,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":178,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":178,"column":49,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":178,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includes on an `error` typed value.","line":178,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":178,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":179,"column":13,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":179,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includes on an `error` typed value.","line":179,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":179,"endColumn":40},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":179,"column":52,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":179,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includes on an `error` typed value.","line":179,"column":71,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":179,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":181,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":181,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includes on an `error` typed value.","line":181,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":44},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `error` type typed value.","line":181,"column":57,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":181,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .includes on an `error` typed value.","line":181,"column":76,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":181,"endColumn":84},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":187,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":187,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":189,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":189,"endColumn":41},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":189,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":189,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6664,6666],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":190,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":190,"endColumn":49},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":190,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":190,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6714,6716],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateTime on an `error` typed value.","line":191,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateTime on an `error` typed value.","line":191,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":191,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .date on an `error` typed value.","line":192,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":192,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .date on an `error` typed value.","line":192,"column":62,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":192,"endColumn":66},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateTime on an `error` typed value.","line":193,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":193,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateTime on an `error` typed value.","line":193,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":193,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .date on an `error` typed value.","line":194,"column":30,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":194,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .date on an `error` typed value.","line":194,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":194,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":195,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":195,"endColumn":45},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":195,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":195,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7056,7058],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":196,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":196,"endColumn":43},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":196,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":196,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7100,7102],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":202,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":202,"endColumn":47},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":202,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":202,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7366,7368],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":203,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":203,"endColumn":51},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":203,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":203,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7418,7420],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":204,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":204,"endColumn":53},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":204,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":204,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7472,7474],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":209,"column":31,"nodeType":"LogicalExpression","messageId":"constantShortCircuit","endLine":210,"endColumn":56},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":209,"column":31,"nodeType":"BinaryExpression","messageId":"constantShortCircuit","endLine":209,"endColumn":94},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":215,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":215,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":216,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":216,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":219,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":219,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":220,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":220,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":224,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":224,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":225,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":225,"endColumn":51},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":226,"column":15,"nodeType":"Property","messageId":"anyAssignment","endLine":226,"endColumn":53},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":239,"column":27,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":239,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":239,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":239,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":243,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":243,"endColumn":72},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":245,"column":13,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":252,"endColumn":14,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[9162,9437],"text":"contact ??= await storage.createContact({\n                userId: user.id,\n                name: attendee.displayName ?? attendee.email,\n                email: attendee.email,\n                lastContact: new Date()\n              });"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":248,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":248,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .displayName on an `error` typed value.","line":248,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":248,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":248,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":248,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":249,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":249,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `error` typed value.","line":249,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":249,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":264,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":264,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateTime on an `error` typed value.","line":266,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":266,"endColumn":49},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .dateTime on an `error` typed value.","line":266,"column":73,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":266,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":268,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":268,"endColumn":35},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":304,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":304,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11417,11419],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":324,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":324,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12221,12223],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":64,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { google } from 'googleapis';\nimport { storage } from '../storage';\nimport type { User } from '@shared/schema';\n\nexport class GoogleService {\n  private getOAuth2Client(user: User) {\n    const oauth2Client = new google.auth.OAuth2(\n      process.env.GOOGLE_OAUTH_CLIENT_ID ?? process.env.GOOGLE_CLIENT_ID,\n      process.env.GOOGLE_OAUTH_CLIENT_SECRET ?? process.env.GOOGLE_CLIENT_SECRET,\n      process.env.GOOGLE_CALLBACK_URL\n    );\n\n    oauth2Client.setCredentials({\n      access_token: user.accessToken,\n      refresh_token: user.refreshToken,\n    });\n\n    return oauth2Client;\n  }\n\n  async syncGmail(user: User): Promise<void> {\n    try {\n      const oauth2Client = this.getOAuth2Client(user);\n      const gmail = google.gmail({ version: 'v1', auth: oauth2Client });\n\n      // Get recent messages\n      const response = await gmail.users.messages.list({\n        userId: 'me',\n        maxResults: 50,\n        q: 'newer_than:7d'\n      });\n\n      const messages = response.data.messages || [];\n\n      for (const message of messages) {\n        if (!message.id) continue;\n\n        const messageDetail = await gmail.users.messages.get({\n          userId: 'me',\n          id: message.id,\n        });\n\n        const headers = messageDetail.data.payload?.headers || [];\n        const from = headers.find((h) => h.name === 'From')?.value || '';\n        const subject = headers.find((h) => h.name === 'Subject')?.value || '';\n        const date = headers.find((h) => h.name === 'Date')?.value;\n\n        // Extract email address\n        const emailMatch = from.match(/<(.+?)>/) ?? from.match(/(\\S+@\\S+)/);\n        const email = emailMatch ? emailMatch[1] ?? emailMatch[0] : '';\n\n        if (!email) continue;\n\n        // Find or create contact\n        const contacts = await storage.getContactsByUserId(user.id);\n        let contact = contacts.find(c => c.email === email);\n\n        if (!contact) {\n          const name = from.replace(/<.*?>/, '').trim() ?? email;\n          contact = await storage.createContact({\n            userId: user.id,\n            name,\n            email,\n            lastContact: new Date()\n          });\n        }\n\n        // Create interaction\n        await storage.createInteraction({\n          contactId: contact.id,\n          type: 'email',\n          subject,\n          content: subject ?? 'Email interaction',\n          timestamp: date ? new Date(date) : new Date(),\n          source: 'gmail',\n          sourceId: message.id\n        });\n      }\n\n      await storage.updateSyncStatus(user.id, 'gmail', {\n        lastSync: new Date(),\n        status: 'success'\n      });\n    } catch (error) {\n      console.error('Gmail sync error:', error);\n      await storage.updateSyncStatus(user.id, 'gmail', {\n        lastSync: new Date(),\n        status: 'error',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  }\n\n  async syncCalendar(user: User, options?: {\n    startDate?: Date;\n    endDate?: Date;\n    syncType?: 'initial' | 'incremental';\n  }): Promise<void> {\n    try {\n      const oauth2Client = this.getOAuth2Client(user);\n      const calendar = google.calendar({ version: 'v3', auth: oauth2Client });\n\n      const now = new Date();\n      const syncType = options?.syncType ?? 'incremental';\n      \n      // Set date ranges based on sync type\n      let startDate: Date;\n      let endDate: Date;\n      \n      if (syncType === 'initial') {\n        // Initial sync: 1 year back, 6 months forward\n        startDate = options?.startDate ?? new Date(now.getTime() - 365 * 24 * 60 * 60 * 1000);\n        endDate = options?.endDate ?? new Date(now.getTime() + 180 * 24 * 60 * 60 * 1000);\n      } else {\n        // Incremental sync: 7 days back (for updates), 6 months forward\n        startDate = options?.startDate ?? new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        endDate = options?.endDate ?? new Date(now.getTime() + 180 * 24 * 60 * 60 * 1000);\n      }\n\n      console.log(`${syncType} sync for user ${user.email} from ${startDate.toISOString()} to ${endDate.toISOString()}`);\n\n      // First, get all user's calendars\n      const calendarListResponse = await calendar.calendarList.list();\n      const calendars = calendarListResponse.data.items || [];\n      console.log(`Found ${calendars.length} calendars for user`);\n\n      let allEvents: unknown[] = [];\n      const calendarMetadata: { [key: string]: { name: string; color: string } } = {};\n\n      // Fetch events from each calendar\n      for (const cal of calendars) {\n        if (!cal.id) continue;\n        \n        // Store calendar metadata\n        calendarMetadata[cal.id] = {\n          name: cal.summary ?? cal.id,\n          color: cal.backgroundColor ?? cal.colorId ?? '#4285f4' // Default Google blue\n        };\n\n        try {\n          const response = await calendar.events.list({\n            calendarId: cal.id,\n            timeMin: startDate.toISOString(),\n            timeMax: endDate.toISOString(),\n            singleEvents: true,\n            orderBy: 'startTime',\n            maxResults: 2500,\n          });\n\n          const calendarEvents = (response.data.items ?? []).map(event => ({\n            ...event,\n            calendarId: cal.id,\n            calendarName: cal.summary ?? cal.id,\n            calendarColor: cal.backgroundColor ?? cal.colorId ?? '#4285f4'\n          }));\n\n          allEvents = allEvents.concat(calendarEvents);\n          console.log(`Found ${calendarEvents.length} events in calendar: ${cal.summary}`);\n        } catch (error) {\n          console.error(`Error fetching events from calendar ${cal.summary}:`, error);\n        }\n      }\n\n      console.log(`Found ${allEvents.length} total calendar events to process`);\n      const events = allEvents;\n\n      let newEventsCount = 0;\n      let updatedEventsCount = 0;\n\n      for (const event of events) {\n        if (!event.id) continue;\n\n        // Check if we already have this event\n        const existingEvent = await storage.getCalendarEventByGoogleId(user.id, event.id);\n        \n        // Determine meeting type based on event properties\n        let meetingType = 'in-person';\n        if (event.location?.includes('zoom') ?? event.location?.includes('meet.google.com') ?? \n            event.description?.includes('zoom') ?? event.description?.includes('meet.google.com')) {\n          meetingType = 'video';\n        } else if (event.location?.includes('phone') ?? event.description?.includes('phone')) {\n          meetingType = 'phone';\n        }\n\n        const eventData = {\n          userId: user.id,\n          googleEventId: event.id,\n          rawData: event, // Store the complete Google Calendar event JSON\n          summary: event.summary || null,\n          description: event.description || null,\n          startTime: event.start?.dateTime ? new Date(event.start.dateTime) : \n                    event.start?.date ? new Date(event.start.date) : null,\n          endTime: event.end?.dateTime ? new Date(event.end.dateTime) : \n                  event.end?.date ? new Date(event.end.date) : null,\n          attendees: event.attendees || null,\n          location: event.location || null,\n          meetingType,\n          processed: false, // Will be processed by LLM later\n          extractedData: null,\n          contactId: null, // Will be determined during LLM processing\n          // Calendar metadata\n          calendarId: event.calendarId || null,\n          calendarName: event.calendarName || null,\n          calendarColor: event.calendarColor || null,\n        };\n\n        if (existingEvent) {\n          // Update existing event if the raw data has changed OR if calendar metadata is missing\n          const needsUpdate = JSON.stringify(existingEvent.rawData) !== JSON.stringify(event) ??\n                            !existingEvent.calendarName ?? !existingEvent.calendarColor;\n          \n          if (needsUpdate) {\n            await storage.updateCalendarEvent(existingEvent.id, {\n              rawData: event,\n              summary: eventData.summary,\n              description: eventData.description,\n              startTime: eventData.startTime,\n              endTime: eventData.endTime,\n              attendees: eventData.attendees,\n              location: eventData.location,\n              meetingType: eventData.meetingType,\n              processed: false, // Re-process if data changed\n              // Add calendar metadata\n              calendarId: eventData.calendarId,\n              calendarName: eventData.calendarName,\n              calendarColor: eventData.calendarColor,\n            });\n            updatedEventsCount++;\n          }\n        } else {\n          // Create new event\n          await storage.createCalendarEvent(eventData);\n          newEventsCount++;\n        }\n\n        // Also create interactions for contacts (existing logic)\n        if (event.attendees && event.summary) {\n          for (const attendee of event.attendees) {\n            if (!attendee.email || attendee.email === user.email) continue;\n\n            // Find or create contact\n            const contacts = await storage.getContactsByUserId(user.id);\n            let contact = contacts.find(c => c.email === attendee.email);\n\n            if (!contact) {\n              contact = await storage.createContact({\n                userId: user.id,\n                name: attendee.displayName ?? attendee.email,\n                email: attendee.email,\n                lastContact: new Date()\n              });\n            }\n\n            // Create interaction (check for duplicates by sourceId)\n            const existingInteractions = await storage.getInteractionsByContactId(contact.id);\n            const hasExistingInteraction = existingInteractions.some(\n              interaction => interaction.sourceId === event.id\n            );\n\n            if (!hasExistingInteraction) {\n              await storage.createInteraction({\n                contactId: contact.id,\n                type: 'meeting',\n                subject: event.summary,\n                content: `Meeting: ${event.summary}${event.description ? ` - ${event.description}` : ''}`,\n                timestamp: event.start?.dateTime ? new Date(event.start.dateTime) : new Date(),\n                source: 'calendar',\n                sourceId: event.id\n              });\n            }\n          }\n        }\n      }\n\n      console.log(`Calendar sync completed: ${newEventsCount} new events, ${updatedEventsCount} updated events`);\n\n      await storage.updateSyncStatus(user.id, 'calendar', {\n        lastSync: new Date(),\n        status: 'success'\n      });\n    } catch (error) {\n      console.error('Calendar sync error:', error);\n      await storage.updateSyncStatus(user.id, 'calendar', {\n        lastSync: new Date(),\n        status: 'error',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  }\n\n  async syncDrive(user: User): Promise<void> {\n    try {\n      const oauth2Client = this.getOAuth2Client(user);\n      const drive = google.drive({ version: 'v3', auth: oauth2Client });\n\n      // Search for documents (PDF, DOCX, TXT)\n      const response = await drive.files.list({\n        q: \"mimeType='application/pdf' or mimeType='application/vnd.openxmlformats-officedocument.wordprocessingml.document' or mimeType='text/plain'\",\n        fields: 'files(id, name, mimeType, modifiedTime)',\n        orderBy: 'modifiedTime desc',\n        pageSize: 50\n      });\n\n      const files = response.data.files || [];\n\n      for (const file of files) {\n        if (!file.id || !file.name) continue;\n\n        // For now, we'll associate documents with the most recent contact\n        // In a real implementation, you'd parse the document content to identify clients\n        const contacts = await storage.getContactsByUserId(user.id);\n        if (contacts.length === 0) continue;\n\n        const contact = contacts[0]; // Associate with most recent contact\n\n        // Check if document already exists\n        const existingDocs = await storage.getDocumentsByContactId(contact.id);\n        const exists = existingDocs.some(doc => doc.driveId === file.id);\n\n        if (!exists) {\n          await storage.createDocument({\n            contactId: contact.id,\n            name: file.name,\n            type: file.mimeType || 'unknown',\n            driveId: file.id,\n            url: `https://drive.google.com/file/d/${file.id}/view`\n          });\n        }\n      }\n\n      await storage.updateSyncStatus(user.id, 'drive', {\n        lastSync: new Date(),\n        status: 'success'\n      });\n    } catch (error) {\n      console.error('Drive sync error:', error);\n      await storage.updateSyncStatus(user.id, 'drive', {\n        lastSync: new Date(),\n        status: 'error',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  }\n}\n\nexport const googleService = new GoogleService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/services/jwt-auth.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":30,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":30,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":57,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":57,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":86,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":86,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":99,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":99,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":99,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":17}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import jwt from 'jsonwebtoken';\nimport type { Request, Response, NextFunction } from 'express';\nimport { storage } from '../storage';\nimport type { User } from '@shared/schema';\n\n// Extend Express Request to include user property\ninterface AuthenticatedRequest extends Request {\n  user?: User;\n}\n\nconst JWT_SECRET = process.env.JWT_SECRET;\n\nif (!JWT_SECRET) {\n  throw new Error('JWT_SECRET environment variable is required for security');\n}\n\n// TypeScript assertion - we know JWT_SECRET exists after the check above\nconst SECRET: string = JWT_SECRET;\nconst JWT_EXPIRES_IN = '7d'; // 7 days\nconst COOKIE_NAME = 'auth-token';\n\nexport function generateToken(userId: string): string {\n  return jwt.sign({ userId }, SECRET, { expiresIn: JWT_EXPIRES_IN });\n}\n\nexport function verifyToken(token: string): { userId: string } | null {\n  try {\n    const decoded = jwt.verify(token, SECRET) as { userId: string };\n    return decoded;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport function setAuthCookie(res: Response, userId: string): void {\n  const token = generateToken(userId);\n  res.cookie(COOKIE_NAME, token, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'lax',\n    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days in milliseconds\n    path: '/',\n  });\n}\n\nexport function clearAuthCookie(res: Response): void {\n  res.clearCookie(COOKIE_NAME, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'lax',\n    path: '/',\n  });\n}\n\nexport async function requireAuth(req: AuthenticatedRequest, res: Response, next: NextFunction): Promise<void> {\n  try {\n    const token = req.cookies[COOKIE_NAME];\n\n    if (!token) {\n      res.status(401).json({ error: 'Authentication required' });\n      return;\n    }\n\n    const decoded = verifyToken(token);\n    if (!decoded) {\n      res.status(401).json({ error: 'Invalid or expired token' });\n      return;\n    }\n\n    const user = await storage.getUser(decoded.userId);\n    if (!user) {\n      res.status(401).json({ error: 'User not found' });\n      return;\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    console.error('Auth middleware error:', error);\n    res.status(401).json({ error: 'Authentication failed' });\n  }\n}\n\nexport async function optionalAuth(req: AuthenticatedRequest, next: NextFunction): Promise<void> {\n  try {\n    const token = req.cookies[COOKIE_NAME];\n\n    if (token) {\n      const decoded = verifyToken(token);\n      if (decoded) {\n        const user = await storage.getUser(decoded.userId);\n        if (user) {\n          req.user = user;\n        }\n      }\n    }\n\n    next();\n  } catch (error) {\n    // Don't fail on optional auth errors, just continue without user\n    next();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/services/llm-processor.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'geminiService' is defined but never used.","line":4,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":4,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"geminiService"},"fix":{"range":[132,173],"text":""},"desc":"Remove unused variable 'geminiService'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'geminiService' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":86,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":86,"endColumn":53,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[2714,2730],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":86,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":45}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { storage } from '../storage';\nimport type { User } from '@shared/schema';\nimport { openRouterService } from './openrouter';\nimport { geminiService } from './gemini';\nimport OpenAI from 'openai';\n\nconst openrouter = new OpenAI({\n  baseURL: 'https://openrouter.ai/api/v1',\n  apiKey: process.env.OPENROUTER_API_KEY,\n});\n\nexport class LLMProcessor {\n  /**\n   * Process unprocessed calendar events for a user\n   * Extracts client sessions, appointments, and insights\n   */\n  async processCalendarEvents(user: User): Promise<void> {\n    try {\n      console.log(`Starting LLM processing for user ${user.email}`);\n\n      const unprocessedEvents = await storage.getUnprocessedCalendarEvents(user.id);\n      console.log(`Found ${unprocessedEvents.length} unprocessed calendar events`);\n\n      if (unprocessedEvents.length === 0) {\n        return;\n      }\n\n      // Get all user contacts for matching\n      const contacts = await storage.getContactsByUserId(user.id);\n\n      for (const event of unprocessedEvents) {\n        try {\n          const extractedData = await openRouterService.analyzeCalendarEvent(event, contacts);\n\n          // Update the event with extracted data and mark as processed\n          await storage.markCalendarEventProcessed(event.id, extractedData);\n\n          console.log(`Processed event: ${event.summary} - Type: ${extractedData.eventType}`);\n        } catch (error) {\n          console.error(`Error processing event ${event.id}:`, error);\n          // Mark as processed with error to avoid reprocessing\n          await storage.markCalendarEventProcessed(event.id, {\n            error: error instanceof Error ? error.message : 'Unknown error',\n            eventType: 'unknown',\n          });\n        }\n      }\n\n      console.log(`Completed LLM processing for user ${user.email}`);\n    } catch (error) {\n      console.error('LLM processing error:', error);\n    }\n  }\n\n  /**\n   * Process text using Kimi 2 model for advanced reasoning\n   */\n  async processWithKimi(prompt: string): Promise<string> {\n    try {\n      const response = await openrouter.chat.completions.create({\n        model: 'moonshotai/kimi-k2',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a helpful AI assistant. Provide accurate and detailed responses.',\n          },\n          {\n            role: 'user',\n            content: prompt,\n          },\n        ],\n        temperature: 0.1,\n        max_tokens: 2000,\n      });\n\n      return response.choices[0]?.message?.content ?? '';\n    } catch (error) {\n      console.error('Kimi processing error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process text prompt using OpenRouter\n   */\n  async processPrompt(prompt: string, userId: string): Promise<string> {\n    try {\n      const response = await openrouter.chat.completions.create({\n        model: 'meta-llama/llama-3.1-8b-instruct:free',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a helpful AI assistant for a wellness CRM system. Provide accurate and structured responses.',\n          },\n          {\n            role: 'user',\n            content: prompt,\n          },\n        ],\n        temperature: 0.3,\n        max_tokens: 1500,\n      });\n\n      return response.choices[0]?.message?.content ?? '';\n    } catch (error) {\n      console.error('LLM prompt processing error:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process all users' calendar events (for background job)\n   */\n  async processAllUsers(): Promise<void> {\n    try {\n      console.log('Background LLM processing started for all users');\n\n      // Get all users from the database\n      const { db } = await import('../db');\n      const { users } = await import('@shared/schema');\n      const allUsers = await db.select().from(users);\n\n      for (const user of allUsers) {\n        await this.processCalendarEvents(user);\n      }\n\n      console.log('Background LLM processing completed');\n    } catch (error) {\n      console.error('Background LLM processing error:', error);\n    }\n  }\n}\n\nexport const llmProcessor = new LLMProcessor();\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/services/mistral.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":29,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":29,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[545,547],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":82,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":82,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":85,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":85,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .rating on an `any` value.","line":87,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":87,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .confidence on an `any` value.","line":88,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":62}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import dotenv from 'dotenv';\ndotenv.config();\n\ninterface MistralResponse {\n  id: string;\n  object: string;\n  created: number;\n  model: string;\n  choices: Array<{\n    index: number;\n    message: {\n      role: string;\n      content: string;\n    };\n    finish_reason: string;\n  }>;\n  usage: {\n    prompt_tokens: number;\n    total_tokens: number;\n    completion_tokens: number;\n  };\n}\n\nclass MistralService {\n  private apiKey: string;\n  private baseURL = 'https://api.mistral.ai/v1';\n\n  constructor() {\n    this.apiKey = process.env.MISTRAL_API_KEY || '';\n    if (!this.apiKey) {\n      console.warn('MISTRAL_API_KEY not found in environment variables');\n    }\n  }\n\n  async analyzeSentiment(text: string): Promise<{ rating: number; confidence: number }> {\n    try {\n      const response = await fetch(`${this.baseURL}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.apiKey}`,\n        },\n        body: JSON.stringify({\n          model: 'mistral-small-latest',\n          messages: [\n            {\n              role: 'system',\n              content: `You are analyzing communications for a wellness practitioner's CRM.\n\n              First classify the message type:\n              - Client communication: appointments, health updates, feedback, questions\n              - Non-client: invoices, spam, marketing, supplier emails, system notifications\n\n              For NON-CLIENT messages: return { \"rating\": 3, \"confidence\": 0.0 }\n\n              For CLIENT messages, analyze sentiment considering:\n              - Health progress (improvements = positive, setbacks = negative)  \n              - Appointment requests/changes (neutral unless emotional)\n              - Emotional tone and urgency\n              - Satisfaction with treatment\n\n              Rating scale:\n              1 = Very negative (complaints, health crisis, very upset)\n              2 = Negative (cancellations, mild complaints, setbacks)\n              3 = Neutral (scheduling, factual questions)\n              4 = Positive (improvements, gratitude, satisfaction)\n              5 = Very positive (major breakthroughs, high praise)\n\n              Return ONLY valid JSON: { \"rating\": number, \"confidence\": number }`,\n            },\n            { role: 'user', content: text },\n          ],\n          response_format: { type: 'json_object' },\n          temperature: 0.1,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Mistral API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data: MistralResponse = await response.json();\n      const content = data.choices[0]?.message?.content || '{\"rating\": 3, \"confidence\": 0.5}';\n      \n      const result = JSON.parse(content);\n      return {\n        rating: Math.max(1, Math.min(5, Math.round(result.rating))),\n        confidence: Math.max(0, Math.min(1, result.confidence)),\n      };\n    } catch (error) {\n      console.error('Mistral sentiment analysis error:', error);\n      return { rating: 3, confidence: 0.5 };\n    }\n  }\n}\n\nexport const mistralService = new MistralService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/services/openai.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":2,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":2,"endColumn":65,"fix":{"range":[35,35],"text":" type"}},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":6,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":6,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[265,329],"text":"(process.env.OPENAI_API_KEY ?? process.env.OPENAI_API_KEY_ENV_VAR)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":6,"column":76,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":6,"endColumn":78,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[330,332],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":28,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":28,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1192,1194],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":49,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":49,"endColumn":107},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":49,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":49,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2130,2132],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .rating on an `any` value.","line":52,"column":59,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":52,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .confidence on an `any` value.","line":53,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":53,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":83,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":83,"endColumn":140},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":83,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":83,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3257,3259],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import OpenAI from \"openai\";\nimport { ContactData, UnknownObject } from '../types/llm-types';\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\nexport class AIService {\n  async generateChatResponse(message: string, context?: UnknownObject): Promise<string> {\n    try {\n      const systemPrompt = `You are an AI assistant for a wellness solopreneur's client relationship management system. \n      You help analyze client data, provide insights, and suggest next steps for client care. \n      Be professional, empathetic, and focused on wellness outcomes.\n      \n      Current context: ${context ? JSON.stringify(context) : 'No specific context provided'}`;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: message }\n        ],\n        max_tokens: 500,\n        temperature: 0.7,\n      });\n\n      return response.choices[0].message.content || \"I'm sorry, I couldn't generate a response at this time.\";\n    } catch (error) {\n      console.error('OpenAI API error:', error);\n      throw new Error(\"Failed to generate AI response. Please check your OpenAI API configuration.\");\n    }\n  }\n\n  async analyzeSentiment(text: string): Promise<{ rating: number; confidence: number }> {\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a sentiment analysis expert. Analyze the sentiment of the text and provide a rating from 1 to 5 stars and a confidence score between 0 and 1. Respond with JSON in this format: { 'rating': number, 'confidence': number }\"\n          },\n          { role: \"user\", content: text }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{\"rating\": 3, \"confidence\": 0.5}');\n\n      return {\n        rating: Math.max(1, Math.min(5, Math.round(result.rating))),\n        confidence: Math.max(0, Math.min(1, result.confidence)),\n      };\n    } catch (error) {\n      console.error('Sentiment analysis error:', error);\n      return { rating: 3, confidence: 0.5 }; // Default neutral sentiment\n    }\n  }\n\n  async generateInsights(contactData: ContactData): Promise<{\n    summary: string;\n    nextSteps: string[];\n    riskFactors: string[];\n  }> {\n    try {\n      const prompt = `Analyze this client data and provide wellness coaching insights:\n      ${JSON.stringify(contactData)}\n      \n      Provide a JSON response with:\n      - summary: Brief overview of client progress\n      - nextSteps: Array of recommended actions\n      - riskFactors: Array of potential concerns to address`;\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          { role: \"user\", content: prompt }\n        ],\n        response_format: { type: \"json_object\" },\n      });\n\n      return JSON.parse(response.choices[0].message.content || '{\"summary\": \"No insights available\", \"nextSteps\": [], \"riskFactors\": []}');\n    } catch (error) {\n      console.error('Insights generation error:', error);\n      return {\n        summary: \"Unable to generate insights at this time.\",\n        nextSteps: [],\n        riskFactors: []\n      };\n    }\n  }\n\n  \n}\n\nexport const aiService = new AIService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/services/openrouter.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":6,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":13,"endColumn":29,"fix":{"range":[128,128],"text":" type"}},{"ruleId":"no-unused-vars","severity":2,"message":"'contacts' is defined but never used.","line":64,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":75,"suggestions":[{"messageId":"removeVar","data":{"varName":"contacts"},"fix":{"range":[1728,1753],"text":""},"desc":"Remove unused variable 'contacts'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'contacts' is defined but never used.","line":64,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":60},{"ruleId":"object-shorthand","severity":2,"message":"Expected property shorthand.","line":111,"column":7,"nodeType":"Property","messageId":"expectedPropertyShorthand","endLine":111,"endColumn":25,"fix":{"range":[3323,3341],"text":"analysis"}},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":318,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":318,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":322,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":322,"endColumn":65},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .summary on an `any` value.","line":322,"column":25,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":322,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":323,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":323,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .nextSteps on an `any` value.","line":323,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":323,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .nextSteps on an `any` value.","line":323,"column":61,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":323,"endColumn":70},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":324,"column":9,"nodeType":"Property","messageId":"anyAssignment","endLine":324,"endColumn":81},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .riskFactors on an `any` value.","line":324,"column":43,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":324,"endColumn":54},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .riskFactors on an `any` value.","line":324,"column":65,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":324,"endColumn":76},{"ruleId":"no-unused-vars","severity":2,"message":"'eventData' is assigned a value but never used.","line":338,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":338,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"eventData"},"fix":{"range":[12393,12523],"text":""},"desc":"Remove unused variable 'eventData'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'eventData' is assigned a value but never used.","line":338,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":338,"endColumn":20},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":366,"column":26,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":366,"endColumn":28,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13431,13433],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":367,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":367,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13481,13483],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":368,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":368,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13544,13546],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":369,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":369,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13596,13598],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":370,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":370,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13639,13641],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":371,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":371,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13693,13695],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":454,"column":69,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":454,"endColumn":71}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import dotenv from 'dotenv';\ndotenv.config();\n\nimport OpenAI from 'openai';\nimport { rateLimiter } from './rate-limiter';\nimport { \n  CalendarEventRaw, \n  CalendarEventAnalysis, \n  ProcessedEvent, \n  StorageInterface, \n  ContactData,\n  AttendeeData \n} from '../types/llm-types';\n\n// Using OpenAI SDK but pointing to OpenRouter's API endpoint\nconst openrouter = new OpenAI({\n  baseURL: 'https://openrouter.ai/api/v1',\n  apiKey: process.env.OPENROUTER_API_KEY,\n});\n\n// Utility function to safely extract JSON from LLM responses\nfunction extractJSON(content: string): string {\n  // Remove common markdown code blocks\n  content = content\n    .replace(/```json\\s*/g, '')\n    .replace(/```\\s*/g, '')\n    .trim();\n\n  // Find the first opening brace and last closing brace\n  const firstBrace = content.indexOf('{');\n  const lastBrace = content.lastIndexOf('}');\n\n  if (firstBrace !== -1 && lastBrace !== -1 && lastBrace > firstBrace) {\n    return content.substring(firstBrace, lastBrace + 1);\n  }\n\n  // If no braces found, return the content as-is and let JSON.parse handle the error\n  return content;\n}\n\n// Types imported from llm-types.ts\n\nexport class OpenRouterService {\n  private processedEvents: Map<string, ProcessedEvent> = new Map();\n  private storage: StorageInterface | null;\n\n  constructor(storage?: StorageInterface) {\n    this.storage = storage ?? null;\n  }\n\n  private isNoReplyEmail(email: string): boolean {\n    const noReplyPatterns = [\n      /no-?reply/i,\n      /do-?not-?reply/i,\n      /notifications?@/i,\n      /automated@/i,\n      /system@/i,\n      /mailer-daemon/i,\n      /postmaster@/i,\n    ];\n    return noReplyPatterns.some(pattern => pattern.test(email));\n  }\n\n  private shouldSkipEvent(event: CalendarEventRaw, contacts: ContactData[]): boolean {\n    const skipPatterns = [\n      /^(birthday|anniversary)/i,\n      /^(spam|advertisement|promotion)/i,\n      /^(automated|system|notification)/i,\n      /^(holiday|vacation|out of office)/i,\n    ];\n\n    // Check title\n    if (event.summary && skipPatterns.some(p => p.test(event.summary))) {\n      return true;\n    }\n\n    // Check if all attendees are no-reply\n    if (event.attendees?.length > 0) {\n      const allNoReply = event.attendees.every((a: AttendeeData) => \n        a.email ? this.isNoReplyEmail(a.email) : false\n      );\n      if (allNoReply) return true;\n    }\n\n    // Skip if no attendees and title suggests personal event\n    const personalPatterns = /^(lunch|dinner|break|personal|private)/i;\n    if (!event.attendees?.length && personalPatterns.test(event.summary ?? '')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private hasEventChanged(event: CalendarEventRaw, processed: ProcessedEvent): boolean {\n    return (\n      event.updatedAt > processed.processedAt ||\n      event.summary !== processed.originalSummary ||\n      event.description !== processed.originalDescription ||\n      JSON.stringify(event.attendees) !== JSON.stringify(processed.originalAttendees)\n    );\n  }\n\n  private markAsProcessed(event: CalendarEventRaw, analysis: CalendarEventAnalysis): void {\n    this.processedEvents.set(event.id, {\n      eventId: event.id,\n      processedAt: new Date(),\n      originalSummary: event.summary,\n      originalDescription: event.description,\n      originalAttendees: event.attendees,\n      updatedAt: event.updatedAt,\n      analysis: analysis\n    });\n  }\n\n  async processCalendarEvents(events: CalendarEventRaw[], contacts: ContactData[], userId: string, useFreeModel: boolean = false): Promise<CalendarEventAnalysis[]> {\n    const results = [];\n    let rateLimitDelayMs = 0;\n    \n    // Get recommended model based on batch size\n    const recommendedModel = rateLimiter.getRecommendedModel(events.length, useFreeModel);\n    const modelToUse = useFreeModel ? 'meta-llama/llama-3.1-8b-instruct:free' : recommendedModel;\n    \n    console.log(`Processing ${events.length} events with model: ${modelToUse}`);\n    \n    for (const event of events) {\n      // Check if already processed using persistent storage\n      if (this.storage) {\n        const shouldProcess = await this.storage.shouldProcessEvent(event.id);\n        if (!shouldProcess) {\n          console.log(`Event ${event.id} already processed and unchanged, skipping...`);\n          continue;\n        }\n      } else {\n        // Fallback to in-memory check\n        const existingProcess = this.processedEvents.get(event.id);\n        if (existingProcess && !this.hasEventChanged(event, existingProcess)) {\n          console.log(`Event ${event.id} already processed, skipping...`);\n          continue;\n        }\n      }\n      \n      // Pre-filter before sending to LLM\n      if (this.shouldSkipEvent(event, contacts)) {\n        console.log(`Event ${event.id} filtered out by pre-check`);\n        await this.markAsProcessedPersistent(event, { isRelevant: false, skipped: true });\n        continue;\n      }\n      \n      // Check rate limit before making API call\n      const rateLimitCheck = await rateLimiter.checkLimit(userId, modelToUse);\n      if (!rateLimitCheck.allowed) {\n        const waitTime = rateLimitCheck.resetTime ? rateLimitCheck.resetTime - Date.now() : 60000;\n        console.log(`Rate limit exceeded for ${modelToUse}. ${rateLimitCheck.suggestion}. Waiting ${waitTime}ms...`);\n        \n        // Wait for rate limit reset or switch to free model\n        if (modelToUse.includes('qwen') && !useFreeModel) {\n          console.log('Switching to free model due to rate limit');\n          const freeModelCheck = await rateLimiter.checkLimit(userId, 'meta-llama/llama-3.1-8b-instruct:free');\n          if (freeModelCheck.allowed) {\n            // Continue with free model\n            const analysis = await this.analyzeCalendarEvent(event, contacts, true);\n            if (analysis.isRelevant) {\n              results.push(analysis);\n              await this.markAsProcessedPersistent(event, analysis);\n            } else {\n              await this.markAsProcessedPersistent(event, { isRelevant: false });\n            }\n            continue;\n          }\n        }\n        \n        // If we can't switch models, wait for reset\n        await new Promise(resolve => setTimeout(resolve, Math.min(waitTime, 60000)));\n        rateLimitDelayMs += Math.min(waitTime, 60000);\n      }\n      \n      try {\n        const analysis = await this.analyzeCalendarEvent(event, contacts, modelToUse.includes('free'));\n        \n        // Only store and process relevant events\n        if (analysis.isRelevant) {\n          results.push(analysis);\n          await this.markAsProcessedPersistent(event, analysis);\n        } else {\n          console.log(`Event ${event.id} marked as not relevant: ${analysis.relevanceReason}`);\n          await this.markAsProcessedPersistent(event, { isRelevant: false });\n        }\n        \n        // Add small delay between requests to be respectful\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n      } catch (error: unknown) {\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        console.error(`Error processing event ${event.id}:`, errorMessage);\n        \n        // If it's a rate limit error, implement exponential backoff\n        if (errorMessage.includes('rate') || errorMessage.includes('429')) {\n          const backoffTime = Math.min(1000 * Math.pow(2, results.length % 5), 30000);\n          console.log(`Rate limit error detected, backing off for ${backoffTime}ms`);\n          await new Promise(resolve => setTimeout(resolve, backoffTime));\n          rateLimitDelayMs += backoffTime;\n        }\n      }\n    }\n    \n    if (rateLimitDelayMs > 0) {\n      console.log(`Total processing time included ${rateLimitDelayMs}ms of rate limit delays`);\n    }\n    \n    return results;\n  }\n\n  private async markAsProcessedPersistent(event: CalendarEventRaw, analysis: CalendarEventAnalysis): Promise<void> {\n    if (this.storage) {\n      try {\n        const eventHash = await this.storage.getEventHash(event);\n        await this.storage.markEventProcessed(\n          event.id,\n          eventHash,\n          analysis.isRelevant || false,\n          analysis,\n          analysis.llmModel\n        );\n      } catch (error) {\n        console.error('Error marking event as processed in storage:', error);\n        // Fallback to in-memory\n        this.markAsProcessed(event, analysis);\n      }\n    } else {\n      // Fallback to in-memory\n      this.markAsProcessed(event, analysis);\n    }\n  }\n\n  async generateInsights(contactData: ContactData): Promise<{\n    summary: string;\n    nextSteps: string[];\n    riskFactors: string[];\n  }> {\n    try {\n      const prompt = `You are an expert wellness coach analyzing client data for actionable insights.\n\n        CLIENT DATA:\n        ${JSON.stringify(contactData, null, 2)}\n\n        Analyze this data focusing on:\n\n        1. ENGAGEMENT PATTERNS:\n        - Session frequency and consistency\n        - Communication patterns (emails, messages)\n        - Appointment adherence (kept vs cancelled)\n        - Response time to communications\n\n        2. PROGRESS INDICATORS:\n        - Sentiment trends over time (if available)\n        - Health improvements or setbacks mentioned\n        - Goal achievement progress\n        - Mood/energy patterns\n\n        3. RISK ASSESSMENT:\n        - Declining engagement (fewer sessions, delayed responses)\n        - Negative sentiment patterns\n        - Missed appointments without rescheduling\n        - Long gaps between contacts\n        - Any crisis indicators in communications\n\n        4. RELATIONSHIP HEALTH:\n        - Overall satisfaction indicators\n        - Trust and rapport signals\n        - Commitment level to wellness journey\n\n        Based on your analysis, provide a JSON response with:\n\n        {\n        \"summary\": \"A 2-3 sentence overview highlighting the most important patterns. Include: current engagement level, progress trajectory, and primary area needing attention. Be specific with timeframes (e.g., 'over the past month').\",\n        \n        \"nextSteps\": [\n            \"Specific, actionable recommendations (3-5 items)\",\n            \"Include timeframes (e.g., 'Schedule check-in within 48 hours')\",\n            \"Prioritize based on urgency and impact\",\n            \"Consider both clinical and relationship aspects\"\n        ],\n        \n        \"riskFactors\": [\n            \"Specific concerns with severity indicators\",\n            \"Include timeframe when issue emerged\",\n            \"Actionable mitigation strategies\",\n            \"Format: 'Risk: [issue] - Action: [what to do]'\"\n        ]\n        }\n\n        IMPORTANT CONSIDERATIONS:\n        - If data is limited, acknowledge this in the summary\n        - Prioritize client retention and wellbeing\n        - Be constructive and solution-focused\n        - Consider seasonal/temporal factors\n        - Look for both obvious and subtle patterns\n        - If sentiment data exists, weight recent trends more heavily`;\n\n      const response = await openrouter.chat.completions.create({\n        model: 'moonshotai/kimi-k2', // Kimi K2\n        messages: [\n          {\n            role: 'system',\n            content:\n              'You are a wellness coaching insights expert. Analyze client data to identify patterns, risks, and opportunities for better care. Always provide specific, actionable insights based on the actual data provided.',\n          },\n          { role: 'user', content: prompt },\n        ],\n        response_format: { type: 'json_object' },\n      });\n\n      let content =\n        response.choices[0].message.content ??\n        '{\"summary\": \"No insights available\", \"nextSteps\": [], \"riskFactors\": []}';\n      content = extractJSON(content);\n\n      const result = JSON.parse(content);\n\n      // Validate and ensure arrays\n      return {\n        summary: result.summary ?? 'Unable to generate summary.',\n        nextSteps: Array.isArray(result.nextSteps) ? result.nextSteps : [],\n        riskFactors: Array.isArray(result.riskFactors) ? result.riskFactors : [],\n      };\n    } catch (error) {\n      console.error('OpenRouter insights generation error:', error);\n      return {\n        summary: 'Unable to generate insights at this time.',\n        nextSteps: [],\n        riskFactors: [],\n      };\n    }\n  }\n\n  async analyzeCalendarEvent(event: CalendarEventRaw, contacts: ContactData[], useFreeModel: boolean = false): Promise<CalendarEventAnalysis> {\n    // Type guard for event raw data\n    const eventData = event.rawData && typeof event.rawData === 'object' \n      ? event.rawData as Record<string, unknown>\n      : {};\n      \n    const knownContactEmails = new Set(contacts.map(c => c.email.toLowerCase()));\n    \n    // Pre-filter attendees with proper type checking\n    const attendees = event.attendees \n      ? event.attendees\n          .filter((a): a is AttendeeData => \n            a !== null && \n            typeof a === 'object' && \n            'email' in a && \n            typeof a.email === 'string' && \n            !this.isNoReplyEmail(a.email)\n          )\n          .map((a) => ({\n            email: a.email!.toLowerCase(),\n            isKnownContact: knownContactEmails.has(a.email!.toLowerCase())\n          }))\n      : [];\n\n    const hasKnownContacts = attendees.some(a => a.isKnownContact);\n    \n    const prompt = `\nAnalyze this calendar event for a wellness/coaching CRM. Your primary task is to determine if this event is relevant to the user's professional practice.\n\nEVENT DETAILS:\n- Title: ${event.summary || 'No title'}\n- Description: ${event.description || 'No description'}\n- Start: ${event.startTime?.toISOString() || 'Unknown'}\n- End: ${event.endTime?.toISOString() || 'Unknown'}\n- Location: ${event.location || 'No location'}\n- Meeting Type: ${event.meetingType || 'Unknown'}\n- Attendees: ${JSON.stringify(attendees)}\n- Has Known Client Contacts: ${hasKnownContacts}\n\nFILTERING CRITERIA:\n1. RELEVANCE: Only mark as relevant if the event appears to be:\n   - A client session (therapy, coaching, wellness, consultation)\n   - A business meeting related to the practice\n   - Professional development or training\n   - Administrative work for the practice\n\n2. EXCLUDE events that are clearly:\n   - Personal appointments (doctor, dentist, personal errands)\n   - Social events unrelated to business\n   - Automated calendar entries (birthdays, holidays)\n   - Spam or marketing events\n   - Events with only no-reply email addresses\n   - Events with no known contacts AND no clear business purpose\n\n3. BE CONSERVATIVE: When in doubt, mark as not relevant.\n\nReturn a JSON object:\n{\n  \"isRelevant\": boolean, // PRIMARY FILTER: false if event should be ignored\n  \"relevanceReason\": \"string explaining why relevant or not\",\n  \"eventType\": \"client_session\" | \"consultation\" | \"group_session\" | \"admin\" | \"training\" | \"personal\" | \"spam\" | \"unknown\",\n  \"isClientRelated\": boolean,\n  \"clientEmails\": [\"only emails of known contacts\"],\n  \"sessionType\": \"therapy\" | \"coaching\" | \"wellness\" | \"consultation\" | \"group\" | \"other\" | null,\n  \"keyTopics\": [\"only if relevant\"],\n  \"actionItems\": [\"only if relevant\"],\n  \"notes\": \"Brief summary only if relevant\",\n  \"confidence\": 0.0-1.0,\n  \"suggestedAction\": \"process\" | \"ignore\" | \"review\"\n}`;\n\n    try {\n      // Choose model based on usage scenario\n      const model = useFreeModel ? 'meta-llama/llama-3.1-8b-instruct:free' : 'qwen/qwen3-235b-a22b-2507';\n      \n      const response = await openrouter.chat.completions.create({\n        model,\n        messages: [\n          {\n            role: 'system',\n            content:\n              'You are an AI assistant specialized in analyzing calendar events for wellness and coaching professionals. Your primary job is to filter out irrelevant events to save processing costs. Be conservative - when in doubt, mark as not relevant.',\n          },\n          {\n            role: 'user',\n            content: prompt,\n          },\n        ],\n        temperature: 0.1,\n        max_tokens: 1000,\n        response_format: { type: 'json_object' },\n      });\n\n      let content = response.choices[0]?.message?.content;\n      if (!content) {\n        throw new Error('No response from OpenRouter');\n      }\n\n      content = extractJSON(content);\n      const extractedData = JSON.parse(content) as CalendarEventAnalysis;\n      \n      // Add metadata\n      const result = {\n        ...extractedData,\n        processedAt: new Date().toISOString(),\n        llmModel: model,\n        eventId: event.id\n      };\n\n      return result;\n    } catch (error) {\n      console.error('Error calling OpenRouter:', error);\n      throw error;\n    }\n  }\n}\n\n// Export factory function to allow storage injection\nexport const createOpenRouterService = (storage?: StorageInterface) => new OpenRouterService(storage);\n\n// Default instance for backward compatibility\nexport const openRouterService = new OpenRouterService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/services/photo-enrichment.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"All imports in the declaration are only used as types. Use `import type`.","line":1,"column":1,"nodeType":"ImportDeclaration","messageId":"typeOverValue","endLine":1,"endColumn":46,"fix":{"range":[6,6],"text":" type"}},{"ruleId":"no-unused-vars","severity":2,"message":"'storage' is defined but never used.","line":42,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"storage"},"fix":{"range":[979,1003],"text":""},"desc":"Remove unused variable 'storage'."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":52,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":52,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1346,1348],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":53,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":53,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1383,1385],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":54,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":54,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1423,1425],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":55,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":55,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1456,1458],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":56,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":56,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1498,1500],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":71,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":71,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":72,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":72,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":166,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":166,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":166,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5163,5166],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5163,5166],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar on an `any` value.","line":167,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":167,"endColumn":24},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":170,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":170,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar on an `any` value.","line":170,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":170,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":173,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":173,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar on an `any` value.","line":173,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":173,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":200,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":200,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":200,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6098,6101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6098,6101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar_url on an `any` value.","line":201,"column":18,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":201,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":204,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":204,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar_url on an `any` value.","line":204,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":204,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .avatar_url on an `any` value.","line":207,"column":35,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":207,"endColumn":45},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":388,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":388,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12141,12143],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { DatabaseStorage } from '../storage';\nimport { llmProcessor } from './llm-processor';\nimport crypto from 'crypto';\nimport fetch from 'node-fetch';\nimport fs from 'fs/promises';\nimport path from 'path';\n\ninterface ContactInfo {\n  id: string;\n  name: string;\n  email?: string | null;\n  company?: string;\n  linkedinUrl?: string;\n  jobTitle?: string;\n  phone?: string | null;\n  allowProfilePictureScraping?: boolean;\n}\n\ninterface PhotoSuggestion {\n  id: string;\n  url: string;\n  source: 'linkedin' | 'gravatar' | 'clearbit' | 'ai_generated' | 'facebook' | 'twitter' | 'instagram' | 'github';\n  confidence: number;\n  thumbnailUrl: string;\n  metadata?: {\n    size?: { width: number; height: number };\n    format?: string;\n    sourceUrl?: string;\n    description?: string;\n  };\n}\n\ninterface SocialMediaHandles {\n  linkedin?: string;\n  facebook?: string;\n  twitter?: string;\n  instagram?: string;\n  github?: string;\n}\n\nexport class PhotoEnrichmentService {\n  constructor(private storage: DatabaseStorage) {}\n\n  /**\n   * Extract social media handles from contact information using LLM\n   */\n  async extractSocialMediaHandles(contact: ContactInfo): Promise<SocialMediaHandles> {\n    const prompt = `\nAnalyze the following contact information and extract or suggest likely social media handles/URLs:\n\nContact: ${contact.name}\nEmail: ${contact.email || 'N/A'}\nCompany: ${contact.company || 'N/A'}\nJob Title: ${contact.jobTitle || 'N/A'}\nPhone: ${contact.phone || 'N/A'}\nLinkedIn: ${contact.linkedinUrl || 'N/A'}\n\nBased on this information, provide the most likely social media profiles in this JSON format:\n{\n  \"linkedin\": \"https://linkedin.com/in/username or null\",\n  \"facebook\": \"https://facebook.com/username or null\", \n  \"twitter\": \"https://twitter.com/username or null\",\n  \"instagram\": \"https://instagram.com/username or null\",\n  \"github\": \"https://github.com/username or null\"\n}\n\nOnly include URLs that you can reasonably infer from the provided information. Use null for platforms where you cannot make a reasonable guess.`;\n\n    try {\n      const response = await llmProcessor.processWithKimi(prompt);\n      const handles = JSON.parse(response);\n      return handles;\n    } catch (error) {\n      console.error('Failed to extract social media handles:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Find photo suggestions for a contact using multiple sources\n   */\n  async findPhotoSuggestions(contact: ContactInfo): Promise<PhotoSuggestion[]> {\n    const suggestions: PhotoSuggestion[] = [];\n\n    try {\n      // First, extract social media handles using LLM\n      const socialHandles = await this.extractSocialMediaHandles(contact);\n\n      // Try Gravatar first (most reliable for email-based lookup)\n      if (contact.email) {\n        const gravatarSuggestion = await this.getGravatarPhoto(contact.email);\n        if (gravatarSuggestion) {\n          suggestions.push(gravatarSuggestion);\n        }\n      }\n\n      // Try Clearbit Person API\n      if (contact.email) {\n        const clearbitSuggestion = await this.getClearbitPhoto(contact.email);\n        if (clearbitSuggestion) {\n          suggestions.push(clearbitSuggestion);\n        }\n      }\n\n      // Try GitHub if we found a handle\n      if (socialHandles.github) {\n        const githubSuggestion = await this.getGitHubPhoto(socialHandles.github);\n        if (githubSuggestion) {\n          suggestions.push(githubSuggestion);\n        }\n      }\n\n      // Generate AI avatar as fallback\n      if (suggestions.length === 0) {\n        const aiSuggestion = this.generateAIAvatar(contact);\n        suggestions.push(aiSuggestion);\n      }\n\n      return suggestions.sort((a, b) => b.confidence - a.confidence);\n    } catch (error) {\n      console.error('Photo enrichment error:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get Gravatar photo by email hash\n   */\n  private async getGravatarPhoto(email: string): Promise<PhotoSuggestion | null> {\n    try {\n      const emailHash = crypto.createHash('md5').update(email.toLowerCase().trim()).digest('hex');\n      const gravatarUrl = `https://www.gravatar.com/avatar/${emailHash}?s=200&d=404`;\n      \n      // Check if Gravatar exists\n      const response = await fetch(gravatarUrl, { method: 'HEAD' });\n      if (response.ok) {\n        return {\n          id: `gravatar_${emailHash}`,\n          url: gravatarUrl,\n          source: 'gravatar',\n          confidence: 0.8,\n          thumbnailUrl: `https://www.gravatar.com/avatar/${emailHash}?s=50&d=404`,\n          metadata: {\n            size: { width: 200, height: 200 },\n            format: 'jpeg',\n            sourceUrl: `https://gravatar.com/profiles/${emailHash}`,\n            description: 'Gravatar profile photo'\n          }\n        };\n      }\n    } catch (error) {\n      console.warn('Gravatar lookup failed:', error);\n    }\n    return null;\n  }\n\n  /**\n   * Get Clearbit person photo by email\n   */\n  private async getClearbitPhoto(email: string): Promise<PhotoSuggestion | null> {\n    try {\n      const clearbitUrl = `https://person.clearbit.com/v1/people/email/${email}`;\n      \n      const response = await fetch(clearbitUrl);\n      if (response.ok) {\n        const data = await response.json() as any;\n        if (data.avatar) {\n          return {\n            id: `clearbit_${email}`,\n            url: data.avatar,\n            source: 'clearbit',\n            confidence: 0.7,\n            thumbnailUrl: data.avatar,\n            metadata: {\n              format: 'jpeg',\n              sourceUrl: clearbitUrl,\n              description: 'Clearbit person profile photo'\n            }\n          };\n        }\n      }\n    } catch (error) {\n      console.warn('Clearbit lookup failed:', error);\n    }\n    return null;\n  }\n\n  /**\n   * Get GitHub avatar from username\n   */\n  private async getGitHubPhoto(githubUrl: string): Promise<PhotoSuggestion | null> {\n    try {\n      const username = githubUrl.split('/').pop();\n      if (!username) return null;\n\n      const apiUrl = `https://api.github.com/users/${username}`;\n      const response = await fetch(apiUrl);\n      \n      if (response.ok) {\n        const data = await response.json() as any;\n        if (data.avatar_url) {\n          return {\n            id: `github_${username}`,\n            url: data.avatar_url,\n            source: 'github',\n            confidence: 0.6,\n            thumbnailUrl: `${data.avatar_url}&s=50`,\n            metadata: {\n              format: 'jpeg',\n              sourceUrl: githubUrl,\n              description: `GitHub avatar for ${username}`\n            }\n          };\n        }\n      }\n    } catch (error) {\n      console.warn('GitHub lookup failed:', error);\n    }\n    return null;\n  }\n\n  /**\n   * Generate an AI avatar using the contact's name\n   */\n  private generateAIAvatar(contact: ContactInfo): PhotoSuggestion {\n    const initials = contact.name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase();\n\n    // Generate using DiceBear (free avatar generation service)\n    const avatarUrl = `https://api.dicebear.com/7.x/initials/svg?seed=${encodeURIComponent(contact.name)}&backgroundColor=random&fontSize=40`;\n    \n    return {\n      id: `ai_generated_${Date.now()}`,\n      url: avatarUrl,\n      source: 'ai_generated',\n      confidence: 0.5,\n      thumbnailUrl: avatarUrl,\n      metadata: {\n        format: 'svg',\n        description: `AI-generated avatar for ${contact.name} (${initials})`\n      }\n    };\n  }\n\n  /**\n   * Download and save a photo for a contact\n   */\n  async downloadAndSavePhoto(contactId: string, photoUrl: string, source: string): Promise<{ success: boolean; avatarUrl?: string; error?: string }> {\n    try {\n      // Download the image\n      const response = await fetch(photoUrl);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch image: ${response.statusText}`);\n      }\n\n      const buffer = Buffer.from(await response.arrayBuffer());\n      \n      // Create uploads directory if it doesn't exist\n      const uploadsDir = path.join(process.cwd(), 'uploads', 'avatars');\n      await fs.mkdir(uploadsDir, { recursive: true });\n\n      // Generate filename\n      const extension = photoUrl.includes('.png') ? 'png' : 'jpg';\n      const filename = `${contactId}_${source}_${Date.now()}.${extension}`;\n      const filepath = path.join(uploadsDir, filename);\n\n      // Save the file\n      await fs.writeFile(filepath, buffer);\n\n      // Update contact with new avatar URL\n      const avatarUrl = `/uploads/avatars/${filename}`;\n      await this.storage.updateContact(contactId, { avatarUrl });\n\n      return {\n        success: true,\n        avatarUrl\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Batch process photo enrichment for all consented contacts\n   */\n  async batchEnrichPhotos(userId: string): Promise<{ processed: number; success: number; errors: string[] }> {\n    try {\n      // Get user's GDPR consent status\n      const user = await this.storage.getUserById(userId);\n      if (!user?.allowProfilePictureScraping) {\n        throw new Error('User has not consented to profile picture scraping');\n      }\n\n      // Get all contacts for this user that allow photo scraping\n      const allContacts = await this.storage.getContactsByUserId(userId);\n      const consentedContacts = allContacts.filter(contact => \n        contact.hasGdprConsent && !contact.avatarUrl\n      );\n\n      const results = {\n        processed: 0,\n        success: 0,\n        errors: [] as string[]\n      };\n\n      // Process contacts in batches to avoid rate limiting\n      const batchSize = 3;\n      for (let i = 0; i < consentedContacts.length; i += batchSize) {\n        const batch = consentedContacts.slice(i, i + batchSize);\n        \n        for (const contact of batch) {\n          try {\n            results.processed++;\n            const suggestions = await this.findPhotoSuggestions(contact);\n            \n            if (suggestions.length > 0) {\n              const bestSuggestion = suggestions[0];\n              const result = await this.downloadAndSavePhoto(\n                contact.id, \n                bestSuggestion.url, \n                bestSuggestion.source\n              );\n              \n              if (result.success) {\n                results.success++;\n                console.log(`✓ Enriched photo for ${contact.name} from ${bestSuggestion.source}`);\n              } else {\n                results.errors.push(`${contact.name}: ${result.error}`);\n              }\n            } else {\n              results.errors.push(`${contact.name}: No photo suggestions found`);\n            }\n          } catch (error) {\n            results.errors.push(`${contact.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n          }\n        }\n\n        // Small delay between batches to respect rate limits\n        if (i + batchSize < consentedContacts.length) {\n          await new Promise(resolve => setTimeout(resolve, 2000));\n        }\n      }\n\n      return results;\n    } catch (error) {\n      throw new Error(`Batch enrichment failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Enrich a single contact's photo\n   */\n  async enrichSingleContact(contactId: string): Promise<{ success: boolean; suggestion?: PhotoSuggestion; error?: string }> {\n    try {\n      const contact = await this.storage.getContact(contactId);\n      if (!contact) {\n        throw new Error('Contact not found');\n      }\n\n      if (!contact.hasGdprConsent) {\n        throw new Error('Contact has not consented to profile picture scraping');\n      }\n\n      const suggestions = await this.findPhotoSuggestions(contact);\n      if (suggestions.length === 0) {\n        throw new Error('No photo suggestions found');\n      }\n\n      const bestSuggestion = suggestions[0];\n      const result = await this.downloadAndSavePhoto(\n        contact.id, \n        bestSuggestion.url, \n        bestSuggestion.source\n      );\n\n      if (result.success) {\n        return {\n          success: true,\n          suggestion: bestSuggestion\n        };\n      } else {\n        throw new Error(result.error || 'Failed to download photo');\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/services/rate-limiter.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":109,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":109,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3358,3360],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":110,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":110,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3404,3406],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":113,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":113,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3483,3485],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":114,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":114,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3532,3534],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"interface RateLimitConfig {\n  windowMs: number;\n  maxRequests: number;\n  modelType: 'free' | 'premium';\n}\n\ninterface RateLimitEntry {\n  count: number;\n  resetTime: number;\n}\n\nexport class RateLimiter {\n  private limits: Map<string, RateLimitEntry> = new Map();\n  private config: Record<string, RateLimitConfig> = {\n    'meta-llama/llama-3.1-8b-instruct:free': {\n      windowMs: 60 * 1000, // 1 minute\n      maxRequests: 20, // 20 requests per minute for free model\n      modelType: 'free'\n    },\n    'qwen/qwen3-235b-a22b-2507': {\n      windowMs: 60 * 1000, // 1 minute\n      maxRequests: 60, // 60 requests per minute for premium model\n      modelType: 'premium'\n    }\n  };\n\n  async checkLimit(userId: string, model: string): Promise<{ allowed: boolean; resetTime?: number; suggestion?: string }> {\n    const config = this.config[model];\n    if (!config) {\n      return { allowed: true }; // No limit configured for this model\n    }\n\n    const key = `${userId}:${model}`;\n    const now = Date.now();\n    const entry = this.limits.get(key);\n\n    // Clean up expired entries\n    if (entry && now > entry.resetTime) {\n      this.limits.delete(key);\n    }\n\n    const currentEntry = this.limits.get(key);\n\n    if (!currentEntry) {\n      // First request in window\n      this.limits.set(key, {\n        count: 1,\n        resetTime: now + config.windowMs\n      });\n      return { allowed: true };\n    }\n\n    if (currentEntry.count >= config.maxRequests) {\n      // Rate limit exceeded\n      const suggestion = config.modelType === 'premium' \n        ? 'Consider using the free model for bulk processing or wait for rate limit reset'\n        : 'Consider upgrading to premium model for higher rate limits';\n        \n      return { \n        allowed: false, \n        resetTime: currentEntry.resetTime,\n        suggestion\n      };\n    }\n\n    // Increment count\n    currentEntry.count++;\n    return { allowed: true };\n  }\n\n  getRecommendedModel(requestCount: number, isHistoricalSync: boolean = false): string {\n    // For historical sync or large batches, recommend free model\n    if (isHistoricalSync || requestCount > 50) {\n      return 'meta-llama/llama-3.1-8b-instruct:free';\n    }\n    \n    // For ongoing processing or small batches, use premium model\n    return 'qwen/qwen3-235b-a22b-2507';\n  }\n\n  async getUsageStats(userId: string): Promise<{\n    freeModelUsage: { count: number; resetTime: number | null };\n    premiumModelUsage: { count: number; resetTime: number | null };\n    recommendations: string[];\n  }> {\n    const freeKey = `${userId}:meta-llama/llama-3.1-8b-instruct:free`;\n    const premiumKey = `${userId}:qwen/qwen3-235b-a22b-2507`;\n    \n    const freeEntry = this.limits.get(freeKey);\n    const premiumEntry = this.limits.get(premiumKey);\n    \n    const recommendations = [];\n    \n    // Generate recommendations based on usage\n    if (premiumEntry && premiumEntry.count > 40) {\n      recommendations.push('Consider using free model for bulk operations to save costs');\n    }\n    \n    if (freeEntry && freeEntry.count > 15) {\n      recommendations.push('Free model usage is high - premium model offers better accuracy');\n    }\n    \n    if (!freeEntry && !premiumEntry) {\n      recommendations.push('Start with free model for testing, upgrade to premium for production');\n    }\n\n    return {\n      freeModelUsage: {\n        count: freeEntry?.count || 0,\n        resetTime: freeEntry?.resetTime || null\n      },\n      premiumModelUsage: {\n        count: premiumEntry?.count || 0,\n        resetTime: premiumEntry?.resetTime || null\n      },\n      recommendations\n    };\n  }\n\n  // Clean up expired entries periodically\n  cleanup(): void {\n    const now = Date.now();\n    for (const [key, entry] of this.limits.entries()) {\n      if (now > entry.resetTime) {\n        this.limits.delete(key);\n      }\n    }\n  }\n}\n\nexport const rateLimiter = new RateLimiter();\n\n// Clean up expired entries every 5 minutes\nsetInterval(() => {\n  rateLimiter.cleanup();\n}, 5 * 60 * 1000);","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/services/security.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":13,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":13,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[396,398],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[803,806],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[803,806],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":32,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":32,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[877,879],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":39,"column":14,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":39,"endColumn":69},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":40,"column":14,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":40,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":41,"column":14,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":41,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":42,"column":14,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":42,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":43,"column":14,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":43,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":64,"column":9,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":64,"endColumn":72},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access ._csrf on an `any` value.","line":64,"column":67,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":64,"endColumn":72},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":197,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":197,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":197,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":197,"endColumn":17}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import rateLimit from 'express-rate-limit';\nimport helmet from 'helmet';\nimport { body, param, validationResult } from 'express-validator';\nimport type { Request, Response, NextFunction } from 'express';\nimport crypto from 'crypto';\nimport path from 'path';\n\n// CSRF Token Management\nclass CSRFTokenManager {\n  private secret: string;\n\n  constructor() {\n    this.secret = process.env.CSRF_SECRET || crypto.randomBytes(32).toString('hex');\n  }\n\n  generateToken(): string {\n    return crypto.randomBytes(32).toString('hex');\n  }\n\n  verifyToken(token: string, sessionToken: string): boolean {\n    return token === sessionToken;\n  }\n}\n\nexport const csrfTokenManager = new CSRFTokenManager();\n\n// Rate Limiting Configurations\nexport const createRateLimit = (windowMs: number, max: number, message?: string): any => {\n  return rateLimit({\n    windowMs,\n    max,\n    message: message || 'Too many requests from this IP, please try again later.',\n    standardHeaders: true,\n    legacyHeaders: false,\n  });\n};\n\n// Different rate limits for different endpoints\nexport const generalRateLimit = createRateLimit(15 * 60 * 1000, 100); // 100 requests per 15 minutes\nexport const authRateLimit = createRateLimit(15 * 60 * 1000, 5); // 5 login attempts per 15 minutes\nexport const apiRateLimit = createRateLimit(1 * 60 * 1000, 60); // 60 API requests per minute\nexport const uploadRateLimit = createRateLimit(15 * 60 * 1000, 10); // 10 uploads per 15 minutes\nexport const aiRateLimit = createRateLimit(1 * 60 * 1000, 20); // 20 AI requests per minute\n\n// Extend session type\ndeclare module 'express-session' {\n  interface SessionData {\n    csrfToken?: string;\n  }\n}\n\n// CSRF Protection Middleware\nexport const csrfProtection = (req: Request, res: Response, next: NextFunction): void | Response => {\n  // Skip CSRF for GET requests and API endpoints that don't modify data\n  if (req.method === 'GET' || req.method === 'HEAD' || req.method === 'OPTIONS') {\n    return next();\n  }\n\n  // Skip CSRF for OAuth callbacks\n  if (req.path.includes('/auth/google') || req.path.includes('/auth/callback')) {\n    return next();\n  }\n\n  const token = req.headers['x-csrf-token'] as string || req.body._csrf;\n  const sessionToken = req.session?.csrfToken;\n\n  if (!token || !sessionToken || !csrfTokenManager.verifyToken(token, sessionToken)) {\n    return res.status(403).json({ error: 'Invalid CSRF token' });\n  }\n\n  next();\n};\n\n// Generate CSRF token endpoint\nexport const generateCSRFToken = (req: Request, res: Response): void => {\n  const token = csrfTokenManager.generateToken();\n  if (req.session) {\n    req.session.csrfToken = token;\n  }\n  res.json({ csrfToken: token });\n};\n\n// Path Validation Middleware\nexport const validatePath = (req: Request, res: Response, next: NextFunction): void | Response => {\n  const { path: filePath } = req.params;\n  \n  if (!filePath) {\n    return next();\n  }\n\n  // Prevent path traversal attacks\n  const normalizedPath = path.normalize(filePath);\n  if (normalizedPath.includes('..') || normalizedPath.startsWith('/')) {\n    return res.status(400).json({ error: 'Invalid file path' });\n  }\n\n  // Only allow specific file extensions\n  const allowedExtensions = ['.jpg', '.jpeg', '.png', '.webp', '.gif'];\n  const ext = path.extname(normalizedPath).toLowerCase();\n  if (ext && !allowedExtensions.includes(ext)) {\n    return res.status(400).json({ error: 'Invalid file type' });\n  }\n\n  next();\n};\n\n// Input Validation Rules\nexport const validateContactId = [\n  param('id').isUUID().withMessage('Invalid contact ID format'),\n];\n\nexport const validateContactCreation = [\n  body('name').trim().isLength({ min: 1, max: 100 }).withMessage('Name must be 1-100 characters'),\n  body('email').optional().isEmail().withMessage('Invalid email format'),\n  body('phone').optional().isMobilePhone('any').withMessage('Invalid phone number'),\n];\n\nexport const validateInteractionCreation = [\n  body('contactId').isUUID().withMessage('Invalid contact ID'),\n  body('type').isIn(['email', 'call', 'meeting', 'note']).withMessage('Invalid interaction type'),\n  body('content').trim().isLength({ min: 1, max: 5000 }).withMessage('Content must be 1-5000 characters'),\n];\n\nexport const validateEmailSend = [\n  body('to').isEmail().withMessage('Invalid recipient email'),\n  body('subject').trim().isLength({ min: 1, max: 200 }).withMessage('Subject must be 1-200 characters'),\n  body('body').trim().isLength({ min: 1, max: 10000 }).withMessage('Body must be 1-10000 characters'),\n];\n\n// Validation Error Handler\nexport const handleValidationErrors = (req: Request, res: Response, next: NextFunction): void | Response => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: 'Validation failed',\n      details: errors.array()\n    });\n  }\n  next();\n};\n\n// Security Headers\nexport const securityHeaders = helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      scriptSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n      connectSrc: [\"'self'\"],\n      fontSrc: [\"'self'\"],\n      objectSrc: [\"'none'\"],\n      mediaSrc: [\"'self'\"],\n      frameSrc: [\"'none'\"],\n    },\n  },\n  crossOriginEmbedderPolicy: false, // Disable for development\n});\n\n// File Upload Security\nexport const validateFileUpload = (req: Request, res: Response, next: NextFunction): void | Response => {\n  if (!req.file) {\n    return res.status(400).json({ error: 'No file uploaded' });\n  }\n\n  // Check file size (5MB limit)\n  if (req.file.size > 5 * 1024 * 1024) {\n    return res.status(400).json({ error: 'File too large. Maximum size is 5MB.' });\n  }\n\n  // Check file type\n  const allowedMimeTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];\n  if (!allowedMimeTypes.includes(req.file.mimetype)) {\n    return res.status(400).json({ error: 'Invalid file type. Only images are allowed.' });\n  }\n\n  next();\n};\n\n// Safe File Operations\nexport const safeFileOperation = (filePath: string, allowedDir: string): boolean => {\n  try {\n    const normalizedPath = path.normalize(filePath);\n    const normalizedAllowedDir = path.normalize(allowedDir);\n    \n    // Convert to absolute paths for proper comparison\n    const absoluteFilePath = path.isAbsolute(normalizedPath) \n      ? normalizedPath \n      : path.resolve(normalizedAllowedDir, normalizedPath);\n    const absoluteAllowedDir = path.isAbsolute(normalizedAllowedDir)\n      ? normalizedAllowedDir\n      : path.resolve(normalizedAllowedDir);\n    \n    // Ensure the file is within the allowed directory\n    return absoluteFilePath.startsWith(absoluteAllowedDir) && \n           !normalizedPath.includes('..');\n  } catch (error) {\n    // If any error occurs during path operations, deny access\n    return false;\n  }\n};\n\n// API Response Sanitization\nexport const sanitizeResponse = <T>(data: T): T => {\n  if (typeof data !== 'object' || data === null) {\n    return data;\n  }\n\n  if (Array.isArray(data)) {\n    return data.map(sanitizeResponse) as T;\n  }\n\n  const sanitized: Record<string, unknown> = {};\n  for (const [key, value] of Object.entries(data)) {\n    // Remove sensitive fields\n    if (['password', 'secret', 'token', 'key'].some(sensitive => \n      key.toLowerCase().includes(sensitive))) {\n      continue;\n    }\n    sanitized[key] = sanitizeResponse(value);\n  }\n\n  return sanitized as T;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/services/sync.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":39,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":47,"column":56,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":61},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":49,"column":54,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2718,2721],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2718,2721],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import cron from 'node-cron';\nimport { storage } from '../storage';\nimport { googleService } from './google';\n\nexport class SyncService {\n  private isRunning = false;\n\n  start(): void {\n    if (this.isRunning) return;\n\n    this.isRunning = true;\n    console.log('Starting sync service...');\n\n    // Run sync at 8am, 4pm, and midnight\n    cron.schedule('0 8,16,0 * * *', async () => {\n      await this.performSync();\n    });\n\n    // Initial sync after 1 minute - DISABLED for dev, uncomment for production\n    // setTimeout(() => {\n    //   this.performSync();\n    // }, 60000);\n  }\n\n  stop(): void {\n    this.isRunning = false;\n    console.log('Sync service stopped');\n  }\n\n  async performSync(): Promise<void> {\n    console.log('Starting scheduled sync...');\n\n    try {\n      // Get all users that need syncing\n      const allUsers = await this.getAllUsers();\n\n      for (const user of allUsers) {\n        try {\n          console.log(`Syncing data for user: ${user.email}`);\n\n          await Promise.all([\n            googleService.syncGmail(user),\n            googleService.syncCalendar(user, { syncType: 'incremental' }),\n            googleService.syncDrive(user),\n          ]);\n\n          console.log(`Sync completed for user: ${user.email}`);\n        } catch (error) {\n          console.error(`Sync failed for user ${user.email}:`, error);\n        }\n      }\n    } catch (error) {\n      console.error('Sync service error:', error);\n    }\n  }\n\n  async manualSync(userId: string): Promise<void> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      await Promise.all([\n        googleService.syncGmail(user),\n        googleService.syncCalendar(user, { syncType: 'incremental' }),\n        googleService.syncDrive(user),\n      ]);\n    } catch (error) {\n      console.error('Manual sync error:', error);\n      throw error;\n    }\n  }\n  async syncCalendar(userId: string): Promise<void> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      // Use incremental sync for regular scheduled syncs\n      await googleService.syncCalendar(user, {\n        syncType: 'incremental'\n      });\n    } catch (error) {\n      console.error('Calendar sync error:', error);\n      throw error;\n    }\n  }\n\n  async syncEmails(userId: string): Promise<void> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      await googleService.syncGmail(user);\n    } catch (error) {\n      console.error('Email sync error:', error);\n      throw error;\n    }\n  }\n\n  private async getAllUsers(): Promise<any[]> {\n    try {\n      // Get all users from the database\n      // Since we don't have a getAllUsers method in storage, we'll need to add it\n      // For now, let's implement it here directly\n      const { db } = await import('../db');\n      const { users } = await import('@shared/schema');\n      const allUsers = await db.select().from(users);\n      return allUsers;\n    } catch (error) {\n      console.error('Error getting all users:', error);\n      return [];\n    }\n  }\n}\n\nexport const syncService = new SyncService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/services/task-ai.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'AiSuggestion' is not defined.","line":27,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'AiSuggestion' is not defined.","line":91,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":91,"endColumn":26},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":178,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":178,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5600,5602],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":375,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":375,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12283,12285],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of a value of type `any`.","line":389,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":389,"endColumn":35},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":390,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":390,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":390,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":390,"endColumn":19},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":496,"column":20,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":496,"endColumn":22,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16546,16548],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":505,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":505,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16803,16805],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { storage } from '../storage';\nimport { llmProcessor } from './llm-processor';\nimport type {\n  Task,\n  \n  Contact,\n} from '@shared/schema';\nimport type {\n  AttendanceRecord,\n  AttendanceAnalysis,\n  TaskAnalysis,\n  BulkAction,\n  UnknownObject,\n} from '../types/llm-types';\nimport { format } from 'date-fns';\n\nexport class TaskAIService {\n  constructor() {}\n\n  /**\n   * Process CSV attendance data and generate AI suggestions\n   */\n  async processAttendanceCSV(\n    userId: string,\n    csvData: string,\n    fileName: string\n  ): Promise<AiSuggestion[]> {\n    console.log(`Processing attendance CSV: ${fileName} for user ${userId}`);\n\n    try {\n      // Create data processing job\n      const job = await storage.createDataProcessingJob({\n        userId,\n        jobType: 'attendance_csv',\n        sourceType: 'manual_upload',\n        sourceReference: fileName,\n        status: 'processing',\n        startedAt: new Date(),\n        inputData: { csvData, fileName },\n      });\n\n      // Parse CSV data\n      const attendanceData = this.parseCSVAttendance(csvData);\n      const affectedContacts = await this.matchContactsFromAttendance(userId, attendanceData);\n\n      // Generate AI analysis\n      const aiAnalysis = await this.generateAttendanceAnalysis(attendanceData, affectedContacts);\n\n      // Create AI suggestion\n      const suggestion = await storage.createAiSuggestion({\n        userId,\n        type: 'contact_update',\n        title: `Add ${fileName} to ${affectedContacts.length} client timelines?`,\n        description: `A new attendance sheet was uploaded. Should I add this class attendance to the timelines of the ${affectedContacts.length} clients listed?`,\n        suggestedAction: {\n          type: 'bulk_timeline_update',\n          contactIds: affectedContacts.map((c) => c.id),\n          eventType: 'class_attendance',\n          eventData: {\n            className: this.extractClassNameFromFilename(fileName),\n            date: this.extractDateFromFilename(fileName),\n            attendees: attendanceData.attendees,\n          },\n        },\n        sourceData: { csvData, fileName, attendanceData },\n        aiAnalysis,\n        priority: 'medium',\n      });\n\n      // Update job status\n      await storage.updateDataProcessingJob(job.id, {\n        status: 'completed',\n        completedAt: new Date(),\n        outputData: { suggestionId: suggestion.id },\n        suggestionsGenerated: 1,\n      });\n\n      return [suggestion];\n    } catch (error) {\n      console.error('Error processing attendance CSV:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process new photos with GDPR consent and generate suggestions\n   */\n  async processNewPhotos(\n    userId: string,\n    photoData: { contactId: string; photoUrl: string; source: string }[]\n  ): Promise<AiSuggestion[]> {\n    console.log(`Processing ${photoData.length} new photos for user ${userId}`);\n\n    try {\n      const job = await storage.createDataProcessingJob({\n        userId,\n        jobType: 'photo_gdpr',\n        sourceType: 'ai_enrichment',\n        sourceReference: `${photoData.length}_photos`,\n        status: 'processing',\n        startedAt: new Date(),\n        inputData: { photoData },\n      });\n\n      const successfulPhotos = photoData.filter((p) => p.photoUrl);\n      const failedPhotos = photoData.filter((p) => !p.photoUrl);\n\n      if (successfulPhotos.length > 0) {\n        const suggestion = await storage.createAiSuggestion({\n          userId,\n          type: 'contact_update',\n          title: `Add new photos for ${successfulPhotos.length} clients?`,\n          description: `GDPR consent was activated and new photos are available for ${successfulPhotos.length} clients. ${failedPhotos.length} photo lookups returned no results. Shall I add the available photos to the respective client records?`,\n          suggestedAction: {\n            type: 'bulk_photo_update',\n            updates: successfulPhotos.map((p) => ({\n              contactId: p.contactId,\n              photoUrl: p.photoUrl,\n              source: p.source,\n            })),\n          },\n          sourceData: { photoData },\n          aiAnalysis: {\n            successCount: successfulPhotos.length,\n            failureCount: failedPhotos.length,\n            sources: [...new Set(successfulPhotos.map((p) => p.source))],\n          },\n          priority: 'low',\n        });\n\n        await storage.updateDataProcessingJob(job.id, {\n          status: 'completed',\n          completedAt: new Date(),\n          outputData: { suggestionId: suggestion.id },\n          suggestionsGenerated: 1,\n        });\n\n        return [suggestion];\n      }\n\n      await storage.updateDataProcessingJob(job.id, {\n        status: 'completed',\n        completedAt: new Date(),\n        outputData: { message: 'No photos to process' },\n        suggestionsGenerated: 0,\n      });\n\n      return [];\n    } catch (error) {\n      console.error('Error processing new photos:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create and delegate task to AI assistant\n   */\n  async delegateTaskToAI(\n    userId: string,\n    taskData: {\n      title: string;\n      description: string;\n      contactIds: string[];\n      dueDate?: Date;\n      projectId?: string;\n      priority?: 'low' | 'medium' | 'high' | 'urgent';\n    }\n  ): Promise<Task> {\n    console.log(`Delegating task to AI: ${taskData.title}`);\n\n    // Create the main task assigned to AI\n    const task = await storage.createTask({\n      userId,\n      title: taskData.title,\n      description: taskData.description,\n      owner: 'ai_assistant',\n      status: 'in_progress',\n      priority: taskData.priority || 'medium',\n      dueDate: taskData.dueDate,\n      projectId: taskData.projectId,\n      assignedContactIds: taskData.contactIds,\n      isAiGenerated: false,\n    });\n\n    // Log task creation activity\n    await storage.createTaskActivity({\n      taskId: task.id,\n      actorType: 'user',\n      actorId: userId,\n      actionType: 'delegated_to_ai',\n      description: `Task delegated to AI assistant: ${taskData.title}`,\n      metadata: { originalTaskData: taskData },\n    });\n\n    // Start AI processing in background\n    this.processAIDelegatedTask(task).catch((error) => {\n      console.error(`Error processing AI task ${task.id}:`, error);\n    });\n\n    return task;\n  }\n\n  /**\n   * Process AI-delegated task in background\n   */\n  private async processAIDelegatedTask(task: Task): Promise<void> {\n    try {\n      // Get contact data for analysis\n      const contacts = await Promise.all(\n        (task.assignedContactIds as string[]).map((id) => storage.getContact(id))\n      );\n      const validContacts = contacts.filter(Boolean) as Contact[];\n\n      // Generate AI analysis based on task type\n      const aiAnalysis = await this.generateTaskAnalysis(task, validContacts);\n\n      // Create subtasks or generate deliverables based on task content\n      const subtasks = await this.generateSubtasks(task, validContacts, aiAnalysis);\n\n      // Update task with AI analysis\n      await storage.updateTask(task.id, {\n        aiAnalysis,\n        status: subtasks.length > 0 ? 'in_progress' : 'completed',\n      });\n\n      // Log AI processing activity\n      await storage.createTaskActivity({\n        taskId: task.id,\n        actorType: 'ai_assistant',\n        actionType: 'ai_processed',\n        description: `AI generated ${subtasks.length} deliverables for task`,\n        metadata: {\n          aiAnalysis,\n          subtasksCreated: subtasks.length,\n          contactsAnalyzed: validContacts.length,\n        },\n      });\n\n      // If task involves email creation, generate drafts\n      if (\n        task.title.toLowerCase().includes('email') ||\n        task.description?.toLowerCase().includes('email')\n      ) {\n        await this.generateEmailDrafts(task, validContacts, aiAnalysis);\n      }\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      console.error(`Error processing AI task ${task.id}:`, errorMessage);\n\n      await storage.updateTask(task.id, {\n        status: 'cancelled',\n        aiAnalysis: { error: errorMessage },\n      });\n\n      await storage.createTaskActivity({\n        taskId: task.id,\n        actorType: 'ai_assistant',\n        actionType: 'failed',\n        description: `AI processing failed: ${errorMessage}`,\n        metadata: { error: errorMessage },\n      });\n    }\n  }\n\n  /**\n   * Execute approved AI suggestion\n   */\n  async executeAISuggestion(suggestionId: string): Promise<boolean> {\n    try {\n      const suggestion = await storage.getAiSuggestion(suggestionId);\n      if (!suggestion || suggestion.status !== 'approved') {\n        throw new Error('Suggestion not found or not approved');\n      }\n\n      // Type guard for suggestion action\n      const action = suggestion.suggestedAction as UnknownObject;\n      \n      if (!action || typeof action !== 'object') {\n        throw new Error('Invalid suggestion action');\n      }\n      \n      if (!('type' in action) || typeof action.type !== 'string') {\n        throw new Error('Suggestion action missing type');\n      }\n\n      switch (action.type) {\n        case 'bulk_timeline_update':\n          await this.executeBulkTimelineUpdate(action as BulkAction);\n          break;\n        case 'bulk_photo_update':\n          await this.executeBulkPhotoUpdate(action as BulkAction);\n          break;\n        default:\n          throw new Error(`Unknown action type: ${action.type}`);\n      }\n\n      await storage.updateAiSuggestion(suggestionId, {\n        status: 'executed',\n        executedAt: new Date(),\n      });\n\n      return true;\n    } catch (error: unknown) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      console.error('Error executing AI suggestion:', errorMessage);\n      await storage.updateAiSuggestion(suggestionId, {\n        status: 'rejected',\n        rejectionReason: errorMessage,\n      });\n      return false;\n    }\n  }\n\n  // Helper methods\n  private parseCSVAttendance(csvData: string): { attendees: string[]; className?: string } {\n    const lines = csvData.trim().split('\\n');\n    const attendees = lines\n      .slice(1) // Skip header\n      .map((line) => line.split(',')[0]?.trim())\n      .filter(Boolean);\n\n    return { attendees };\n  }\n\n  private async matchContactsFromAttendance(\n    userId: string,\n    attendanceData: AttendanceRecord\n  ): Promise<Contact[]> {\n    const allContacts = await storage.getContactsByUserId(userId);\n\n    return allContacts.filter((contact) =>\n      attendanceData.attendees.some(\n        (attendee) =>\n          contact.name.toLowerCase().includes(attendee.name.toLowerCase()) ||\n          attendee.name.toLowerCase().includes(contact.name.toLowerCase())\n      )\n    );\n  }\n\n  private extractClassNameFromFilename(fileName: string): string {\n    // Extract class name from filename like \"tuesday_yoga_attendance_2025-08-26.csv\"\n    const parts = fileName.replace('.csv', '').split('_');\n    if (parts.length >= 2) {\n      return `${parts[0]} ${parts[1]}`.replace(/^\\w/, (c) => c.toUpperCase());\n    }\n    return 'Class';\n  }\n\n  private extractDateFromFilename(fileName: string): string {\n    // Extract date from filename\n    const dateMatch = fileName.match(/(\\d{4}-\\d{2}-\\d{2})/);\n    return dateMatch ? dateMatch[1] : format(new Date(), 'yyyy-MM-dd');\n  }\n\n  private async generateAttendanceAnalysis(attendanceData: AttendanceRecord, contacts: Contact[]): Promise<AttendanceAnalysis> {\n    return {\n      attendeeCount: attendanceData.attendees.length,\n      matchedContacts: contacts.length,\n      unmatchedAttendees: attendanceData.attendees\n        .filter((attendee) =>\n          !contacts.some((contact) => contact.name.toLowerCase().includes(attendee.name.toLowerCase()))\n        )\n        .map(attendee => attendee.name),\n      analysis: `Processed attendance data with ${attendanceData.attendees.length} attendees, successfully matched ${contacts.length} to existing contacts.`,\n    };\n  }\n\n  private async generateTaskAnalysis(task: Task, contacts: Contact[]): Promise<TaskAnalysis> {\n    const prompt = `\nAnalyze this task for a wellness professional:\n\nTask: ${task.title}\nDescription: ${task.description}\nAssigned to ${contacts.length} contacts:\n${contacts.map((c) => `- ${c.name} (${c.lifecycleStage || 'unknown stage'})`).join('\\n')}\n\nProvide analysis and recommendations for how to complete this task effectively.\nConsider the lifecycle stages of the contacts and suggest personalized approaches.\n\nReturn JSON with: {\n  \"strategy\": \"overall approach\",\n  \"contactSegments\": [{\"segment\": \"name\", \"contacts\": [\"names\"], \"approach\": \"specific approach\"}],\n  \"recommendations\": [\"actionable recommendations\"],\n  \"estimatedTime\": \"time estimate in minutes\"\n}`;\n\n    try {\n      const response = await llmProcessor.processPrompt(prompt, task.userId);\n      return JSON.parse(response);\n    } catch (error) {\n      return {\n        strategy: 'Standard approach for all contacts',\n        contactSegments: [\n          { segment: 'all', contacts: contacts.map((c) => c.name), approach: 'uniform approach' },\n        ],\n        recommendations: ['Process contacts individually', 'Follow standard procedures'],\n        estimatedTime: '30-60 minutes',\n      };\n    }\n  }\n\n  private async generateSubtasks(\n    task: Task,\n    contacts: Contact[],\n    aiAnalysis: TaskAnalysis\n  ): Promise<Task[]> {\n    const subtasks: Task[] = [];\n\n    // Generate subtasks based on contact segments from AI analysis\n    if (aiAnalysis.contactSegments && Array.isArray(aiAnalysis.contactSegments)) {\n      for (const segment of aiAnalysis.contactSegments) {\n        const segmentContactIds = contacts\n          .filter((c) => segment.contacts.includes(c.name))\n          .map((c) => c.id);\n\n        if (segmentContactIds.length > 0) {\n          const subtask = await storage.createTask({\n            userId: task.userId,\n            parentTaskId: task.id,\n            title: `${task.title} - ${segment.segment}`,\n            description: segment.approach,\n            owner: 'ai_assistant',\n            status: 'completed', // AI completes analysis subtasks immediately\n            assignedContactIds: segmentContactIds,\n            isAiGenerated: true,\n            aiAnalysis: { segment: segment.segment, approach: segment.approach },\n          });\n\n          subtasks.push(subtask);\n        }\n      }\n    }\n\n    return subtasks;\n  }\n\n  private async generateEmailDrafts(\n    task: Task,\n    contacts: Contact[],\n    aiAnalysis: TaskAnalysis\n  ): Promise<void> {\n    // Create a completion task with email drafts\n    const completionTask = await storage.createTask({\n      userId: task.userId,\n      parentTaskId: task.id,\n      title: `Email Drafts Ready for Review - ${task.title}`,\n      description: `AI has generated personalized email drafts based on your task requirements. Review and send as needed.`,\n      owner: 'user', // Hand back to user for review\n      status: 'pending',\n      priority: task.priority,\n      isAiGenerated: true,\n      aiAnalysis: {\n        emailDrafts: contacts.map((contact) => ({\n          contactId: contact.id,\n          contactName: contact.name,\n          subject: this.generateEmailSubject(task, contact),\n          body: this.generateEmailBody(task, contact, aiAnalysis),\n        })),\n      },\n    });\n\n    await storage.createTaskActivity({\n      taskId: completionTask.id,\n      actorType: 'ai_assistant',\n      actionType: 'email_drafts_generated',\n      description: `Generated ${contacts.length} personalized email drafts`,\n      metadata: {\n        originalTaskId: task.id,\n        draftsCount: contacts.length,\n        contacts: contacts.map((c) => ({ id: c.id, name: c.name })),\n      },\n    });\n  }\n\n  private generateEmailSubject(task: Task, contact: Contact): string {\n    // Generate personalized subject based on task and contact\n    const taskType = task.title.toLowerCase();\n\n    if (taskType.includes('retreat')) {\n      return `Special invitation for you, ${contact.name}`;\n    } else if (taskType.includes('workshop')) {\n      return `${contact.name}, join our upcoming workshop`;\n    } else if (taskType.includes('follow')) {\n      return `Hope you're doing well, ${contact.name}`;\n    }\n\n    return `Personal message for ${contact.name}`;\n  }\n\n  private generateEmailBody(task: Task, contact: Contact, aiAnalysis: TaskAnalysis): string {\n    // Generate personalized email body\n    const segment = aiAnalysis.contactSegments?.find((s) => s.contacts.includes(contact.name));\n\n    return `Hi ${contact.name},\n\n${task.description || 'I wanted to reach out with a personal message.'}\n\n${segment ? segment.approach : 'I hope this message finds you well.'}\n\nBest regards,\nYour Wellness Team\n\n---\nThis email was personalized based on your relationship stage: ${\n      contact.lifecycleStage || 'valued client'\n    }`;\n  }\n\n  private async executeBulkTimelineUpdate(action: BulkAction): Promise<void> {\n    // Implementation for bulk timeline updates\n    if (!action.eventData) {\n      throw new Error('Event data is required for timeline updates');\n    }\n    \n    for (const contactId of action.contactIds) {\n      await storage.createInteraction({\n        contactId,\n        type: 'class_attendance',\n        content: `Attended ${action.eventData.className} - Class attendance recorded from ${action.eventData.date}`,\n        timestamp: new Date(action.eventData.date),\n      });\n    }\n  }\n\n  private async executeBulkPhotoUpdate(action: BulkAction): Promise<void> {\n    // Implementation for bulk photo updates\n    if (!action.updates) {\n      throw new Error('Updates array is required for photo updates');\n    }\n    \n    for (const update of action.updates) {\n      await storage.updateContact(update.contactId, {\n        avatarUrl: update.photoUrl,\n      });\n    }\n  }\n}\n\nexport const taskAI = new TaskAIService();\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/services/task-scheduler.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":209,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":209,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6693,6695],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":215,"column":64,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":215,"endColumn":66,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6858,6973],"text":"(email.bodyText?.toLowerCase().includes('workshop') ??\n            email.bodyText?.toLowerCase().includes('retreat'))"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":216,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":216,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6974,6976],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import cron from 'node-cron';\nimport { storage } from '../storage';\nimport { taskAI } from './task-ai';\n\nimport fs from 'fs/promises';\nimport path from 'path';\n\nexport class TaskScheduler {\n  private isRunning = false;\n\n  start(): void {\n    if (this.isRunning) return;\n\n    this.isRunning = true;\n    console.log('Starting task scheduler service...');\n\n    // Run AI analysis at 4 AM daily\n    cron.schedule('0 4 * * *', async () => {\n      console.log('Running daily AI analysis at 4 AM...');\n      await this.runDailyAIAnalysis();\n    });\n\n    // Check for new data every hour during business hours (8 AM - 8 PM)\n    cron.schedule('0 8-20 * * *', async () => {\n      console.log('Checking for new data to process...');\n      await this.checkForNewData();\n    });\n\n    // Process pending AI suggestions every 30 minutes\n    cron.schedule('*/30 * * * *', async () => {\n      await this.processPendingTasks();\n    });\n  }\n\n  stop(): void {\n    this.isRunning = false;\n    console.log('Task scheduler stopped');\n  }\n\n  /**\n   * Run comprehensive daily AI analysis\n   */\n  private async runDailyAIAnalysis(): Promise<void> {\n    try {\n      console.log('Starting daily AI analysis...');\n\n      // Get all users for processing\n      const users = await this.getAllActiveUsers();\n\n      for (const user of users) {\n        try {\n          console.log(`Running AI analysis for user: ${user.email}`);\n\n          // Check for new Google Drive files (CSV attendance sheets)\n          await this.checkForNewAttendanceSheets(user.id);\n\n          // Check for new photo enrichment opportunities\n          await this.checkForPhotoEnrichmentOpportunities(user.id);\n\n          // Analyze recent email patterns for task suggestions\n          await this.analyzeEmailPatternsForTasks(user.id);\n\n          // Review incomplete tasks and suggest next steps\n          await this.reviewIncompleteTasks(user.id);\n        } catch (error) {\n          console.error(`Daily analysis failed for user ${user.email}:`, error);\n        }\n      }\n\n      console.log('Daily AI analysis completed');\n    } catch (error) {\n      console.error('Daily AI analysis error:', error);\n    }\n  }\n\n  /**\n   * Check for new data throughout the day\n   */\n  private async checkForNewData(): Promise<void> {\n    try {\n      const users = await this.getAllActiveUsers();\n\n      for (const user of users) {\n        // Quick check for new files or data that need processing\n        await this.quickDataCheck(user.id);\n      }\n    } catch (error) {\n      console.error('New data check error:', error);\n    }\n  }\n\n  /**\n   * Process pending AI tasks and suggestions\n   */\n  private async processPendingTasks(): Promise<void> {\n    try {\n      // Process tasks assigned to AI that are in progress\n      const aiTasks = await storage.getTasksByStatus('in_progress', 'ai_assistant');\n\n      for (const task of aiTasks) {\n        // Check if task has been processing for too long\n        const hoursInProgress =\n          (Date.now() - new Date(task.updatedAt).getTime()) / (1000 * 60 * 60);\n\n        if (hoursInProgress > 1) {\n          // If processing for more than 1 hour\n          console.log(`Processing stalled AI task: ${task.title}`);\n          // Could retry or mark as failed\n        }\n      }\n\n      // Clean up old completed suggestions\n      await this.cleanupOldSuggestions();\n    } catch (error) {\n      console.error('Pending tasks processing error:', error);\n    }\n  }\n\n  /**\n   * Check for new attendance sheets in Google Drive\n   */\n  private async checkForNewAttendanceSheets(userId: string): Promise<void> {\n    try {\n      // This would integrate with Google Drive API to check for new CSV files\n      // For now, we'll simulate checking a monitored folder\n\n      const monitoredFolder = `/uploads/attendance/${userId}`;\n\n      try {\n        const files = await fs.readdir(monitoredFolder);\n        const csvFiles = files.filter(\n          (file) => file.endsWith('.csv') && file.includes('attendance')\n        );\n\n        for (const csvFile of csvFiles) {\n          const filePath = path.join(monitoredFolder, csvFile);\n          const stats = await fs.stat(filePath);\n\n          // Check if file is new (created in last 24 hours)\n          const isNewFile = Date.now() - stats.mtime.getTime() < 24 * 60 * 60 * 1000;\n\n          if (isNewFile) {\n            console.log(`Processing new attendance file: ${csvFile}`);\n            const csvData = await fs.readFile(filePath, 'utf-8');\n            await taskAI.processAttendanceCSV(userId, csvData, csvFile);\n          }\n        }\n      } catch {\n        // Folder doesn't exist or no files, which is fine\n        console.log(`No attendance folder found for user ${userId}`);\n      }\n    } catch (error) {\n      console.error(`Error checking attendance sheets for user ${userId}:`, error);\n    }\n  }\n\n  /**\n   * Check for photo enrichment opportunities\n   */\n  private async checkForPhotoEnrichmentOpportunities(userId: string): Promise<void> {\n    try {\n      // Get contacts without photos who have GDPR consent\n      const contacts = await storage.getContactsByUserId(userId);\n      const contactsNeedingPhotos = contacts.filter(\n        (contact) =>\n          !contact.avatarUrl && contact.hasGdprConsent\n      );\n\n      if (contactsNeedingPhotos.length > 0) {\n        console.log(\n          `Found ${contactsNeedingPhotos.length} contacts needing photos for user ${userId}`\n        );\n\n        // Simulate photo enrichment results\n        const photoResults = contactsNeedingPhotos\n          .slice(0, 5)\n          .map((contact) => ({\n            contactId: contact.id,\n            photoUrl: contact.email\n              ? `https://api.dicebear.com/7.x/initials/svg?seed=${encodeURIComponent(contact.name)}`\n              : null,\n            source: 'ai_generated' as const,\n          }))\n          .filter((result): result is { contactId: string; photoUrl: string; source: 'ai_generated' } => \n            result.photoUrl !== null\n          );\n\n        if (photoResults.length > 0) {\n          await taskAI.processNewPhotos(userId, photoResults);\n        }\n      }\n    } catch (error) {\n      console.error(`Error checking photo opportunities for user ${userId}:`, error);\n    }\n  }\n\n  /**\n   * Analyze email patterns to suggest tasks\n   */\n  private async analyzeEmailPatternsForTasks(userId: string): Promise<void> {\n    try {\n      // Get recent emails\n      const recentEmails = await storage.getRecentEmails(userId, 7); // Last 7 days\n\n      if (recentEmails.length > 0) {\n        // Analyze for patterns that might suggest tasks\n        const followUpNeeded = recentEmails.filter(\n          (email) =>\n            email.bodyText?.toLowerCase().includes('follow up') ||\n            email.bodyText?.toLowerCase().includes('get back to')\n        );\n\n        const eventMentions = recentEmails.filter(\n          (email) =>\n            email.bodyText?.toLowerCase().includes('workshop') ||\n            email.bodyText?.toLowerCase().includes('retreat') ||\n            email.bodyText?.toLowerCase().includes('class')\n        );\n\n        // Create suggestions based on patterns\n        if (followUpNeeded.length > 2) {\n          await storage.createAiSuggestion({\n            userId,\n            type: 'task_creation',\n            title: 'Create follow-up tasks?',\n            description: `I noticed ${followUpNeeded.length} emails mentioning follow-ups in the last week. Should I create tasks to track these?`,\n            suggestedAction: {\n              type: 'create_follow_up_tasks',\n              emails: followUpNeeded.map((e) => ({ id: e.id, subject: e.subject })),\n            },\n            sourceData: { followUpEmails: followUpNeeded.length },\n            aiAnalysis: { pattern: 'follow_up_pattern', confidence: 0.8 },\n            priority: 'medium',\n          });\n        }\n\n        if (eventMentions.length > 1) {\n          await storage.createAiSuggestion({\n            userId,\n            type: 'task_creation',\n            title: 'Plan event communications?',\n            description: `Multiple emails mention events/workshops. Should I help create a communication plan?`,\n            suggestedAction: {\n              type: 'create_event_tasks',\n              events: eventMentions.map((e) => ({ id: e.id, subject: e.subject })),\n            },\n            sourceData: { eventEmails: eventMentions.length },\n            aiAnalysis: { pattern: 'event_planning_pattern', confidence: 0.7 },\n            priority: 'medium',\n          });\n        }\n      }\n    } catch (error) {\n      console.error(`Error analyzing email patterns for user ${userId}:`, error);\n    }\n  }\n\n  /**\n   * Review incomplete tasks and suggest next steps\n   */\n  private async reviewIncompleteTasks(userId: string): Promise<void> {\n    try {\n      const incompleteTasks = await storage.getTasksByUserId(userId, ['pending', 'in_progress']);\n      const overdueTasks = incompleteTasks.filter(\n        (task) => task.dueDate && new Date(task.dueDate) < new Date()\n      );\n\n      if (overdueTasks.length > 0) {\n        await storage.createAiSuggestion({\n          userId,\n          type: 'task_review',\n          title: `Review ${overdueTasks.length} overdue tasks?`,\n          description: `You have ${overdueTasks.length} overdue tasks. Should I help prioritize or reschedule them?`,\n          suggestedAction: {\n            type: 'task_review',\n            overdueTasks: overdueTasks.map((t) => ({\n              id: t.id,\n              title: t.title,\n              dueDate: t.dueDate,\n            })),\n          },\n          sourceData: { overdueCount: overdueTasks.length },\n          aiAnalysis: {\n            urgentTasks: overdueTasks.filter((t) => t.priority === 'urgent').length,\n            oldestTask: overdueTasks.reduce((oldest, task) =>\n              new Date(task.dueDate!) < new Date(oldest.dueDate!) ? task : oldest\n            ),\n          },\n          priority: 'high',\n        });\n      }\n    } catch (error) {\n      console.error(`Error reviewing incomplete tasks for user ${userId}:`, error);\n    }\n  }\n\n  /**\n   * Quick check for new data without heavy processing\n   */\n  private async quickDataCheck(userId: string): Promise<void> {\n    try {\n      // Check for any data processing jobs that failed and might need retry\n      const failedJobs = await storage.getFailedDataProcessingJobs(userId);\n\n      if (failedJobs.length > 0) {\n        console.log(`Found ${failedJobs.length} failed jobs for user ${userId}`);\n        // Could create suggestions to retry or manual review\n      }\n    } catch (error) {\n      console.error(`Quick data check error for user ${userId}:`, error);\n    }\n  }\n\n  /**\n   * Clean up old suggestions and completed jobs\n   */\n  private async cleanupOldSuggestions(): Promise<void> {\n    try {\n      // Remove suggestions older than 30 days that are completed/rejected\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n      await storage.cleanupOldSuggestions(thirtyDaysAgo);\n      await storage.cleanupOldDataProcessingJobs(thirtyDaysAgo);\n    } catch (error) {\n      console.error('Cleanup error:', error);\n    }\n  }\n\n  /**\n   * Get all active users for processing\n   */\n  private async getAllActiveUsers(): Promise<Array<{ id: string; email: string }>> {\n    try {\n      // Get users who have been active in the last 30 days\n      const users = await storage.getActiveUsers(30);\n      return users;\n    } catch (error) {\n      console.error('Error getting active users:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Manual trigger for immediate processing\n   */\n  async triggerImmediateAnalysis(userId: string): Promise<void> {\n    console.log(`Triggering immediate analysis for user ${userId}`);\n\n    try {\n      await this.checkForNewAttendanceSheets(userId);\n      await this.checkForPhotoEnrichmentOpportunities(userId);\n      await this.analyzeEmailPatternsForTasks(userId);\n      await this.reviewIncompleteTasks(userId);\n\n      console.log(`Immediate analysis completed for user ${userId}`);\n    } catch (error) {\n      console.error(`Immediate analysis failed for user ${userId}:`, error);\n      throw error;\n    }\n  }\n}\n\nexport const taskScheduler = new TaskScheduler();\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/storage.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'InsertContactTag' is defined but never used.","line":40,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"InsertContactTag"},"fix":{"range":[658,683],"text":""},"desc":"Remove unused variable 'InsertContactTag'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InsertContactTag' is defined but never used.","line":40,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":60,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[1152,1162],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":61,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[1206,1216],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'googleId' is defined but never used.","line":62,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"googleId"},"fix":{"range":[1266,1282],"text":""},"desc":"Remove unused variable 'googleId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is defined but never used.","line":63,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[1325,1341],"text":""},"desc":"Remove unused variable 'user'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":64,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[1372,1383],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updates' is defined but never used.","line":64,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":54,"suggestions":[{"messageId":"removeVar","data":{"varName":"updates"},"fix":{"range":[1382,1412],"text":""},"desc":"Remove unused variable 'updates'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":66,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[1459,1470],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'consent' is defined but never used.","line":67,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":6,"suggestions":[{"messageId":"removeVar","data":{"varName":"consent"},"fix":{"range":[1469,1598],"text":""},"desc":"Remove unused variable 'consent'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":75,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":75,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[1656,1670],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":76,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[1706,1716],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'contact' is defined but never used.","line":77,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"contact"},"fix":{"range":[1765,1787],"text":""},"desc":"Remove unused variable 'contact'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":78,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":78,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[1824,1835],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updates' is defined but never used.","line":78,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":78,"endColumn":60,"suggestions":[{"messageId":"removeVar","data":{"varName":"updates"},"fix":{"range":[1834,1867],"text":""},"desc":"Remove unused variable 'updates'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":79,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":79,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[1904,1914],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'contactId' is defined but never used.","line":82,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"contactId"},"fix":{"range":[1983,2000],"text":""},"desc":"Remove unused variable 'contactId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'interaction' is defined but never used.","line":83,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"interaction"},"fix":{"range":[2047,2077],"text":""},"desc":"Remove unused variable 'interaction'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":85,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":85,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[2131,2146],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'limit' is defined but never used.","line":86,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":86,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"limit"},"fix":{"range":[2145,2165],"text":""},"desc":"Remove unused variable 'limit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'contactId' is defined but never used.","line":90,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"contactId"},"fix":{"range":[2254,2271],"text":""},"desc":"Remove unused variable 'contactId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'goal' is defined but never used.","line":91,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":91,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"goal"},"fix":{"range":[2304,2320],"text":""},"desc":"Remove unused variable 'goal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":92,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[2351,2362],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updates' is defined but never used.","line":92,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":54,"suggestions":[{"messageId":"removeVar","data":{"varName":"updates"},"fix":{"range":[2361,2391],"text":""},"desc":"Remove unused variable 'updates'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'contactId' is defined but never used.","line":95,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":95,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"contactId"},"fix":{"range":[2451,2468],"text":""},"desc":"Remove unused variable 'contactId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'document' is defined but never used.","line":96,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":96,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"document"},"fix":{"range":[2509,2533],"text":""},"desc":"Remove unused variable 'document'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":99,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":99,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[2589,2603],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":101,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":101,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[2653,2668],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'service' is defined but never used.","line":102,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":102,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"service"},"fix":{"range":[2667,2688],"text":""},"desc":"Remove unused variable 'service'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'status' is defined but never used.","line":103,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":103,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"status"},"fix":{"range":[2688,2727],"text":""},"desc":"Remove unused variable 'status'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":107,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":107,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[2781,2795],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":115,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":115,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[2998,3013],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'limit' is defined but never used.","line":115,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":115,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"limit"},"fix":{"range":[3012,3028],"text":""},"desc":"Remove unused variable 'limit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'contactId' is defined but never used.","line":116,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":116,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"contactId"},"fix":{"range":[3072,3089],"text":""},"desc":"Remove unused variable 'contactId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":117,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[3130,3145],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'gmailMessageId' is defined but never used.","line":117,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":117,"endColumn":59,"suggestions":[{"messageId":"removeVar","data":{"varName":"gmailMessageId"},"fix":{"range":[3144,3168],"text":""},"desc":"Remove unused variable 'gmailMessageId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'email' is defined but never used.","line":118,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":118,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"email"},"fix":{"range":[3213,3231],"text":""},"desc":"Remove unused variable 'email'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":119,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":119,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[3264,3275],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updates' is defined but never used.","line":119,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":119,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"updates"},"fix":{"range":[3274,3305],"text":""},"desc":"Remove unused variable 'updates'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":120,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":120,"endColumn":38,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[3347,3361],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":121,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[3403,3414],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'extractedData' is defined but never used.","line":121,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":121,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"extractedData"},"fix":{"range":[3413,3433],"text":""},"desc":"Remove unused variable 'extractedData'."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3430,3433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3430,3433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":124,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":124,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[3520,3535],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'limit' is defined but never used.","line":124,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":124,"endColumn":59,"suggestions":[{"messageId":"removeVar","data":{"varName":"limit"},"fix":{"range":[3534,3550],"text":""},"desc":"Remove unused variable 'limit'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'contactId' is defined but never used.","line":125,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":125,"endColumn":49,"suggestions":[{"messageId":"removeVar","data":{"varName":"contactId"},"fix":{"range":[3610,3627],"text":""},"desc":"Remove unused variable 'contactId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":127,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":127,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[3690,3705],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'googleEventId' is defined but never used.","line":128,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":128,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"googleEventId"},"fix":{"range":[3704,3731],"text":""},"desc":"Remove unused variable 'googleEventId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used.","line":130,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":130,"endColumn":49,"suggestions":[{"messageId":"removeVar","data":{"varName":"event"},"fix":{"range":[3795,3821],"text":""},"desc":"Remove unused variable 'event'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":131,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":131,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[3870,3881],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updates' is defined but never used.","line":131,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":131,"endColumn":72,"suggestions":[{"messageId":"removeVar","data":{"varName":"updates"},"fix":{"range":[3880,3919],"text":""},"desc":"Remove unused variable 'updates'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":132,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":132,"endColumn":46,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[3977,3991],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":133,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":133,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[4049,4060],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'extractedData' is defined but never used.","line":133,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":133,"endColumn":60,"suggestions":[{"messageId":"removeVar","data":{"varName":"extractedData"},"fix":{"range":[4059,4079],"text":""},"desc":"Remove unused variable 'extractedData'."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4076,4079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4076,4079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'photo' is defined but never used.","line":136,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":136,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"photo"},"fix":{"range":[4148,4173],"text":""},"desc":"Remove unused variable 'photo'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'contactId' is defined but never used.","line":137,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":137,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"contactId"},"fix":{"range":[4218,4235],"text":""},"desc":"Remove unused variable 'contactId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":138,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":138,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[4284,4294],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'tag' is defined but never used.","line":142,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":142,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"tag"},"fix":{"range":[4370,4384],"text":""},"desc":"Remove unused variable 'tag'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'contactId' is defined but never used.","line":143,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":143,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"contactId"},"fix":{"range":[4419,4437],"text":""},"desc":"Remove unused variable 'contactId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'tagId' is defined but never used.","line":143,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":143,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"tagId"},"fix":{"range":[4436,4451],"text":""},"desc":"Remove unused variable 'tagId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'contactId' is defined but never used.","line":144,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":144,"endColumn":41,"suggestions":[{"messageId":"removeVar","data":{"varName":"contactId"},"fix":{"range":[4498,4516],"text":""},"desc":"Remove unused variable 'contactId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'tagId' is defined but never used.","line":144,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":144,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"tagId"},"fix":{"range":[4515,4530],"text":""},"desc":"Remove unused variable 'tagId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'contactIds' is defined but never used.","line":145,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":145,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"contactIds"},"fix":{"range":[4570,4591],"text":""},"desc":"Remove unused variable 'contactIds'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'tagId' is defined but never used.","line":145,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":145,"endColumn":55,"suggestions":[{"messageId":"removeVar","data":{"varName":"tagId"},"fix":{"range":[4590,4605],"text":""},"desc":"Remove unused variable 'tagId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'contactIds' is defined but never used.","line":146,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":146,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"contactIds"},"fix":{"range":[4655,4676],"text":""},"desc":"Remove unused variable 'contactIds'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'tagId' is defined but never used.","line":146,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":146,"endColumn":60,"suggestions":[{"messageId":"removeVar","data":{"varName":"tagId"},"fix":{"range":[4675,4690],"text":""},"desc":"Remove unused variable 'tagId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used.","line":149,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":149,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"event"},"fix":{"range":[4789,4809],"text":""},"desc":"Remove unused variable 'event'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'eventId' is defined but never used.","line":150,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"eventId"},"fix":{"range":[4850,4865],"text":""},"desc":"Remove unused variable 'eventId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'eventId' is defined but never used.","line":152,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":152,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"eventId"},"fix":{"range":[4912,4928],"text":""},"desc":"Remove unused variable 'eventId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'eventHash' is defined but never used.","line":153,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":153,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"eventHash"},"fix":{"range":[4927,4950],"text":""},"desc":"Remove unused variable 'eventHash'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'isRelevant' is defined but never used.","line":154,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":154,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"isRelevant"},"fix":{"range":[4950,4975],"text":""},"desc":"Remove unused variable 'isRelevant'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'analysis' is defined but never used.","line":155,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":155,"endColumn":19,"suggestions":[{"messageId":"removeVar","data":{"varName":"analysis"},"fix":{"range":[4975,4995],"text":""},"desc":"Remove unused variable 'analysis'."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4992,4995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4992,4995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'llmModel' is defined but never used.","line":156,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":156,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"llmModel"},"fix":{"range":[4995,5018],"text":""},"desc":"Remove unused variable 'llmModel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'eventId' is defined but never used.","line":158,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":158,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"eventId"},"fix":{"range":[5069,5084],"text":""},"desc":"Remove unused variable 'eventId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":162,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":162,"endColumn":37,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[5182,5196],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":163,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[5232,5242],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'project' is defined but never used.","line":164,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":164,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"project"},"fix":{"range":[5291,5313],"text":""},"desc":"Remove unused variable 'project'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":165,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":165,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[5350,5361],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updates' is defined but never used.","line":165,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":165,"endColumn":60,"suggestions":[{"messageId":"removeVar","data":{"varName":"updates"},"fix":{"range":[5360,5393],"text":""},"desc":"Remove unused variable 'updates'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":166,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":166,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[5430,5440],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":169,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":169,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[5492,5507],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'statuses' is defined but never used.","line":169,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":169,"endColumn":55,"suggestions":[{"messageId":"removeVar","data":{"varName":"statuses"},"fix":{"range":[5506,5527],"text":""},"desc":"Remove unused variable 'statuses'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'projectId' is defined but never used.","line":170,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":170,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"projectId"},"fix":{"range":[5569,5586],"text":""},"desc":"Remove unused variable 'projectId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'status' is defined but never used.","line":171,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":171,"endColumn":34,"suggestions":[{"messageId":"removeVar","data":{"varName":"status"},"fix":{"range":[5625,5640],"text":""},"desc":"Remove unused variable 'status'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'owner' is defined but never used.","line":171,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":171,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"owner"},"fix":{"range":[5639,5655],"text":""},"desc":"Remove unused variable 'owner'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":172,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":172,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[5685,5695],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'task' is defined but never used.","line":173,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":173,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"task"},"fix":{"range":[5738,5754],"text":""},"desc":"Remove unused variable 'task'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":174,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":174,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[5785,5796],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updates' is defined but never used.","line":174,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":174,"endColumn":54,"suggestions":[{"messageId":"removeVar","data":{"varName":"updates"},"fix":{"range":[5795,5825],"text":""},"desc":"Remove unused variable 'updates'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":175,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":24,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[5856,5866],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'parentTaskId' is defined but never used.","line":176,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":176,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"parentTaskId"},"fix":{"range":[5901,5921],"text":""},"desc":"Remove unused variable 'parentTaskId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'taskId' is defined but never used.","line":179,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":179,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"taskId"},"fix":{"range":[5983,5997],"text":""},"desc":"Remove unused variable 'taskId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'activity' is defined but never used.","line":180,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":180,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"activity"},"fix":{"range":[6046,6074],"text":""},"desc":"Remove unused variable 'activity'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":183,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":183,"endColumn":42,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[6148,6163],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'status' is defined but never used.","line":183,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":183,"endColumn":59,"suggestions":[{"messageId":"removeVar","data":{"varName":"status"},"fix":{"range":[6162,6179],"text":""},"desc":"Remove unused variable 'status'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":184,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":184,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[6225,6235],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'suggestion' is defined but never used.","line":185,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":185,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"suggestion"},"fix":{"range":[6294,6324],"text":""},"desc":"Remove unused variable 'suggestion'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":186,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":186,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[6371,6382],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updates' is defined but never used.","line":186,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":186,"endColumn":70,"suggestions":[{"messageId":"removeVar","data":{"varName":"updates"},"fix":{"range":[6381,6419],"text":""},"desc":"Remove unused variable 'updates'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'olderThan' is defined but never used.","line":187,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":187,"endColumn":40,"suggestions":[{"messageId":"removeVar","data":{"varName":"olderThan"},"fix":{"range":[6469,6484],"text":""},"desc":"Remove unused variable 'olderThan'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":190,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[6564,6578],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":191,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":191,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[6641,6655],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'job' is defined but never used.","line":192,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":192,"endColumn":55,"suggestions":[{"messageId":"removeVar","data":{"varName":"job"},"fix":{"range":[6714,6742],"text":""},"desc":"Remove unused variable 'job'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":194,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":194,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"id"},"fix":{"range":[6804,6815],"text":""},"desc":"Remove unused variable 'id'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updates' is defined but never used.","line":195,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":195,"endColumn":46,"suggestions":[{"messageId":"removeVar","data":{"varName":"updates"},"fix":{"range":[6814,6861],"text":""},"desc":"Remove unused variable 'updates'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'olderThan' is defined but never used.","line":197,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":197,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"olderThan"},"fix":{"range":[6926,6941],"text":""},"desc":"Remove unused variable 'olderThan'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'daysSinceLastActivity' is defined but never used.","line":200,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":200,"endColumn":47,"suggestions":[{"messageId":"removeVar","data":{"varName":"daysSinceLastActivity"},"fix":{"range":[7014,7043],"text":""},"desc":"Remove unused variable 'daysSinceLastActivity'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":201,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":201,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[7111,7126],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'daysBack' is defined but never used.","line":201,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":201,"endColumn":51,"suggestions":[{"messageId":"removeVar","data":{"varName":"daysBack"},"fix":{"range":[7125,7143],"text":""},"desc":"Remove unused variable 'daysBack'."}]},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":477,"column":26,"nodeType":"CallExpression","messageId":"constantShortCircuit","endLine":477,"endColumn":58},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":478,"column":28,"nodeType":"CallExpression","messageId":"constantShortCircuit","endLine":478,"endColumn":62},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":479,"column":27,"nodeType":"CallExpression","messageId":"constantShortCircuit","endLine":479,"endColumn":60},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":480,"column":25,"nodeType":"CallExpression","messageId":"constantShortCircuit","endLine":480,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":541,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":541,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17548,17551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17548,17551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":610,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":610,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19583,19586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19583,19586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":732,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":732,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23153,23156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23153,23156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":741,"column":7,"nodeType":"Property","messageId":"anyAssignment","endLine":741,"endColumn":15},{"ruleId":"prefer-const","severity":2,"message":"'whereConditions' is never reassigned. Use 'const' instead.","line":815,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":815,"endColumn":24,"fix":{"range":[25497,25546],"text":"const whereConditions = [eq(tasks.userId, userId)];"}},{"ruleId":"prefer-const","severity":2,"message":"'whereConditions' is never reassigned. Use 'const' instead.","line":841,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":841,"endColumn":24,"fix":{"range":[26244,26293],"text":"const whereConditions = [eq(tasks.status, status)];"}},{"ruleId":"prefer-const","severity":2,"message":"'whereConditions' is never reassigned. Use 'const' instead.","line":907,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":907,"endColumn":24,"fix":{"range":[28113,28170],"text":"const whereConditions = [eq(aiSuggestions.userId, userId)];"}}],"suppressedMessages":[],"errorCount":122,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import {\n  users,\n  contacts,\n  interactions,\n  goals,\n  documents,\n  syncStatus,\n  calendarEvents,\n  emails,\n  contactPhotos,\n  tags,\n  contactTags,\n  processedEvents,\n  projects,\n  tasks,\n  taskActivities,\n  aiSuggestions,\n  dataProcessingJobs,\n  type User,\n  type InsertUser,\n  type Contact,\n  type InsertContact,\n  type Interaction,\n  type InsertInteraction,\n  type Goal,\n  type InsertGoal,\n  type Document,\n  type InsertDocument,\n  type SyncStatus,\n  type InsertSyncStatus,\n  type CalendarEvent,\n  type InsertCalendarEvent,\n  type Email,\n  type InsertEmail,\n  type ContactPhoto,\n  type InsertContactPhoto,\n  type Tag,\n  type InsertTag,\n  type ContactTag,\n  type InsertContactTag,\n  type ProcessedEvent,\n  type InsertProcessedEvent,\n  type Project,\n  type InsertProject,\n  type Task,\n  type InsertTask,\n  type TaskActivity,\n  type InsertTaskActivity,\n  type AiSuggestion,\n  type InsertAiSuggestion,\n  type DataProcessingJob,\n  type InsertDataProcessingJob,\n} from '@shared/schema';\nimport { db } from './db';\nimport { eq, desc, and, gte, lte, sql } from 'drizzle-orm';\nimport crypto from 'crypto';\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserById(id: string): Promise<User | undefined>;\n  getUserByGoogleId(googleId: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User>;\n  updateUserGdprConsent(\n    id: string,\n    consent: {\n      allowProfilePictureScraping: boolean;\n      gdprConsentDate: Date;\n      gdprConsentVersion: string;\n    }\n  ): Promise<User>;\n\n  // Contacts\n  getContactsByUserId(userId: string): Promise<Contact[]>;\n  getContact(id: string): Promise<Contact | undefined>;\n  createContact(contact: InsertContact): Promise<Contact>;\n  updateContact(id: string, updates: Partial<InsertContact>): Promise<Contact>;\n  deleteContact(id: string): Promise<boolean>;\n\n  // Interactions\n  getInteractionsByContactId(contactId: string): Promise<Interaction[]>;\n  createInteraction(interaction: InsertInteraction): Promise<Interaction>;\n  getRecentInteractions(\n    userId: string,\n    limit?: number\n  ): Promise<(Interaction & { contact: Contact })[]>;\n\n  // Goals\n  getGoalsByContactId(contactId: string): Promise<Goal[]>;\n  createGoal(goal: InsertGoal): Promise<Goal>;\n  updateGoal(id: string, updates: Partial<InsertGoal>): Promise<Goal>;\n\n  // Documents\n  getDocumentsByContactId(contactId: string): Promise<Document[]>;\n  createDocument(document: InsertDocument): Promise<Document>;\n\n  // Sync Status\n  getSyncStatus(userId: string): Promise<SyncStatus[]>;\n  updateSyncStatus(\n    userId: string,\n    service: string,\n    status: Partial<InsertSyncStatus>\n  ): Promise<SyncStatus>;\n\n  // Analytics\n  getStats(userId: string): Promise<{\n    totalClients: number;\n    weeklySessions: number;\n    achievedGoals: number;\n    responseRate: number;\n  }>;\n\n  // Emails (Raw Gmail Data - Filtered Business Emails)\n  getEmailsByUserId(userId: string, limit?: number): Promise<Email[]>;\n  getEmailsByContactId(contactId: string): Promise<Email[]>;\n  getEmailByGmailId(userId: string, gmailMessageId: string): Promise<Email | undefined>;\n  createEmail(email: InsertEmail): Promise<Email>;\n  updateEmail(id: string, updates: Partial<InsertEmail>): Promise<Email>;\n  getUnprocessedEmails(userId: string): Promise<Email[]>;\n  markEmailProcessed(id: string, extractedData: any): Promise<Email>;\n\n  // Calendar Events (Raw Google Data)\n  getCalendarEventsByUserId(userId: string, limit?: number): Promise<CalendarEvent[]>;\n  getCalendarEventsByContactId(contactId: string): Promise<CalendarEvent[]>;\n  getCalendarEventByGoogleId(\n    userId: string,\n    googleEventId: string\n  ): Promise<CalendarEvent | undefined>;\n  createCalendarEvent(event: InsertCalendarEvent): Promise<CalendarEvent>;\n  updateCalendarEvent(id: string, updates: Partial<InsertCalendarEvent>): Promise<CalendarEvent>;\n  getUnprocessedCalendarEvents(userId: string): Promise<CalendarEvent[]>;\n  markCalendarEventProcessed(id: string, extractedData: any): Promise<CalendarEvent>;\n\n  // Contact Photos\n  createContactPhoto(photo: InsertContactPhoto): Promise<ContactPhoto>;\n  getContactPhotos(contactId: string): Promise<ContactPhoto[]>;\n  deleteContactPhoto(id: string): Promise<boolean>;\n\n  // Tags\n  getAllTags(): Promise<Tag[]>;\n  createTag(tag: InsertTag): Promise<Tag>;\n  addTagToContact(contactId: string, tagId: string): Promise<ContactTag>;\n  removeTagFromContact(contactId: string, tagId: string): Promise<boolean>;\n  addTagToContacts(contactIds: string[], tagId: string): Promise<ContactTag[]>;\n  removeTagFromContacts(contactIds: string[], tagId: string): Promise<boolean>;\n\n  // Processed Events - for deduplication and change tracking\n  getEventHash(event: CalendarEvent): Promise<string>;\n  shouldProcessEvent(eventId: string): Promise<boolean>;\n  markEventProcessed(\n    eventId: string,\n    eventHash: string,\n    isRelevant: boolean,\n    analysis?: any,\n    llmModel?: string\n  ): Promise<ProcessedEvent>;\n  getProcessedEvent(eventId: string): Promise<ProcessedEvent | undefined>;\n\n  // Task Management\n  // Projects\n  getProjectsByUserId(userId: string): Promise<Project[]>;\n  getProject(id: string): Promise<Project | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, updates: Partial<InsertProject>): Promise<Project>;\n  deleteProject(id: string): Promise<boolean>;\n\n  // Tasks\n  getTasksByUserId(userId: string, statuses?: string[]): Promise<Task[]>;\n  getTasksByProjectId(projectId: string): Promise<Task[]>;\n  getTasksByStatus(status: string, owner?: string): Promise<Task[]>;\n  getTask(id: string): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, updates: Partial<InsertTask>): Promise<Task>;\n  deleteTask(id: string): Promise<boolean>;\n  getSubtasks(parentTaskId: string): Promise<Task[]>;\n\n  // Task Activities\n  getTaskActivities(taskId: string): Promise<TaskActivity[]>;\n  createTaskActivity(activity: InsertTaskActivity): Promise<TaskActivity>;\n\n  // AI Suggestions\n  getAiSuggestionsByUserId(userId: string, status?: string): Promise<AiSuggestion[]>;\n  getAiSuggestion(id: string): Promise<AiSuggestion | undefined>;\n  createAiSuggestion(suggestion: InsertAiSuggestion): Promise<AiSuggestion>;\n  updateAiSuggestion(id: string, updates: Partial<InsertAiSuggestion>): Promise<AiSuggestion>;\n  cleanupOldSuggestions(olderThan: Date): Promise<boolean>;\n\n  // Data Processing Jobs\n  getDataProcessingJobsByUserId(userId: string): Promise<DataProcessingJob[]>;\n  getFailedDataProcessingJobs(userId: string): Promise<DataProcessingJob[]>;\n  createDataProcessingJob(job: InsertDataProcessingJob): Promise<DataProcessingJob>;\n  updateDataProcessingJob(\n    id: string,\n    updates: Partial<InsertDataProcessingJob>\n  ): Promise<DataProcessingJob>;\n  cleanupOldDataProcessingJobs(olderThan: Date): Promise<boolean>;\n\n  // Helper methods for scheduler\n  getActiveUsers(daysSinceLastActivity: number): Promise<Array<{ id: string; email: string }>>;\n  getRecentEmails(userId: string, daysBack: number): Promise<Email[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user ?? undefined;\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user ?? undefined;\n  }\n\n  async getUserByGoogleId(googleId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.googleId, googleId));\n    return user ?? undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserGdprConsent(\n    id: string,\n    consent: {\n      allowProfilePictureScraping: boolean;\n      gdprConsentDate: Date;\n      gdprConsentVersion: string;\n    }\n  ): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        allowProfilePictureScraping: consent.allowProfilePictureScraping,\n        gdprConsentDate: consent.gdprConsentDate,\n        gdprConsentVersion: consent.gdprConsentVersion,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getContactsByUserId(userId: string): Promise<Contact[]> {\n    // First get the contacts\n    const contactList = await db\n      .select()\n      .from(contacts)\n      .where(eq(contacts.userId, userId))\n      .orderBy(desc(contacts.lastContact));\n\n    // Then get tags for each contact\n    const contactsWithTags = await Promise.all(\n      contactList.map(async (contact) => {\n        const contactTagsData = await db\n          .select({\n            tag: tags,\n          })\n          .from(contactTags)\n          .innerJoin(tags, eq(contactTags.tagId, tags.id))\n          .where(eq(contactTags.contactId, contact.id));\n\n        return {\n          ...contact,\n          tags: contactTagsData.map((ct) => ct.tag),\n        };\n      })\n    );\n\n    return contactsWithTags;\n  }\n\n  async getContact(id: string): Promise<(Contact & { tags: Tag[] }) | undefined> {\n    const [contact] = await db.select().from(contacts).where(eq(contacts.id, id));\n    if (!contact) return undefined;\n\n    // Get tags for this contact\n    const contactTagsData = await db\n      .select({\n        tag: tags,\n      })\n      .from(contactTags)\n      .innerJoin(tags, eq(contactTags.tagId, tags.id))\n      .where(eq(contactTags.contactId, contact.id));\n\n    return {\n      ...contact,\n      tags: contactTagsData.map((ct) => ct.tag),\n    };\n  }\n\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const [contact] = await db.insert(contacts).values(insertContact).returning();\n    return contact;\n  }\n\n  async updateContact(id: string, updates: Partial<InsertContact>): Promise<Contact> {\n    const [contact] = await db\n      .update(contacts)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(contacts.id, id))\n      .returning();\n    return contact;\n  }\n\n  async deleteContact(id: string): Promise<boolean> {\n    try {\n      await db.delete(contacts).where(eq(contacts.id, id));\n      return true;\n    } catch (error) {\n      console.error('Error deleting contact:', error);\n      return false;\n    }\n  }\n\n  async getInteractionsByContactId(contactId: string): Promise<Interaction[]> {\n    return await db\n      .select()\n      .from(interactions)\n      .where(eq(interactions.contactId, contactId))\n      .orderBy(desc(interactions.timestamp));\n  }\n\n  async createInteraction(\n    insertInteraction: InsertInteraction,\n    analyzeSentiment: boolean = true\n  ): Promise<Interaction> {\n    // Auto-analyze sentiment if not provided and content exists, and if enabled\n    if (analyzeSentiment && !insertInteraction.sentiment && insertInteraction.content) {\n      try {\n        const { mistralService } = await import('./services/mistral');\n        const sentimentResult = await mistralService.analyzeSentiment(insertInteraction.content);\n        insertInteraction.sentiment = sentimentResult.rating;\n      } catch (error) {\n        console.warn('Failed to analyze sentiment for interaction:', error);\n        // Continue without sentiment - it's not critical\n      }\n    }\n\n    const [interaction] = await db.insert(interactions).values(insertInteraction).returning();\n    return interaction;\n  }\n\n  async getRecentInteractions(\n    userId: string,\n    limit = 10\n  ): Promise<(Interaction & { contact: Contact })[]> {\n    const result = await db\n      .select()\n      .from(interactions)\n      .innerJoin(contacts, eq(interactions.contactId, contacts.id))\n      .where(eq(contacts.userId, userId))\n      .orderBy(desc(interactions.timestamp))\n      .limit(limit);\n\n    return result.map((row) => ({\n      ...row.interactions,\n      contact: row.contacts,\n    }));\n  }\n\n  async getGoalsByContactId(contactId: string): Promise<Goal[]> {\n    return await db\n      .select()\n      .from(goals)\n      .where(eq(goals.contactId, contactId))\n      .orderBy(desc(goals.createdAt));\n  }\n\n  async createGoal(insertGoal: InsertGoal): Promise<Goal> {\n    const [goal] = await db.insert(goals).values(insertGoal).returning();\n    return goal;\n  }\n\n  async updateGoal(id: string, updates: Partial<InsertGoal>): Promise<Goal> {\n    const [goal] = await db\n      .update(goals)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(goals.id, id))\n      .returning();\n    return goal;\n  }\n\n  async getDocumentsByContactId(contactId: string): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .where(eq(documents.contactId, contactId))\n      .orderBy(desc(documents.createdAt));\n  }\n\n  async createDocument(insertDocument: InsertDocument): Promise<Document> {\n    const [document] = await db.insert(documents).values(insertDocument).returning();\n    return document;\n  }\n\n  async getSyncStatus(userId: string): Promise<SyncStatus[]> {\n    return await db.select().from(syncStatus).where(eq(syncStatus.userId, userId));\n  }\n\n  async updateSyncStatus(\n    userId: string,\n    service: string,\n    status: Partial<InsertSyncStatus>\n  ): Promise<SyncStatus> {\n    const existing = await db\n      .select()\n      .from(syncStatus)\n      .where(and(eq(syncStatus.userId, userId), eq(syncStatus.service, service)));\n\n    if (existing.length > 0) {\n      const [updated] = await db\n        .update(syncStatus)\n        .set(status)\n        .where(and(eq(syncStatus.userId, userId), eq(syncStatus.service, service)))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(syncStatus)\n        .values({ userId, service, ...status })\n        .returning();\n      return created;\n    }\n  }\n\n  async getStats(userId: string): Promise<{\n    totalClients: number;\n    weeklySessions: number;\n    achievedGoals: number;\n    responseRate: number;\n  }> {\n    const [totalClientsResult] = await db\n      .select({ count: sql`count(*)` })\n      .from(contacts)\n      .where(eq(contacts.userId, userId));\n\n    const weekAgo = new Date();\n    weekAgo.setDate(weekAgo.getDate() - 7);\n\n    const [weeklySessionsResult] = await db\n      .select({ count: sql`count(*)` })\n      .from(interactions)\n      .innerJoin(contacts, eq(interactions.contactId, contacts.id))\n      .where(\n        and(\n          eq(contacts.userId, userId),\n          eq(interactions.type, 'meeting'),\n          gte(interactions.timestamp, weekAgo)\n        )\n      );\n\n    const [achievedGoalsResult] = await db\n      .select({ count: sql`count(*)` })\n      .from(goals)\n      .innerJoin(contacts, eq(goals.contactId, contacts.id))\n      .where(and(eq(contacts.userId, userId), eq(goals.status, 'completed')));\n\n    // Calculate response rate based on email interactions\n    const [totalEmailsResult] = await db\n      .select({ count: sql`count(*)` })\n      .from(interactions)\n      .innerJoin(contacts, eq(interactions.contactId, contacts.id))\n      .where(and(eq(contacts.userId, userId), eq(interactions.type, 'email')));\n\n    const totalClients = Number(totalClientsResult.count) ?? 0;\n    const weeklySessions = Number(weeklySessionsResult.count) ?? 0;\n    const achievedGoals = Number(achievedGoalsResult.count) ?? 0;\n    const totalEmails = Number(totalEmailsResult.count) ?? 0;\n\n    // Mock response rate calculation - in real implementation, this would track actual responses\n    const responseRate = totalEmails > 0 ? Math.min(95, 80 + (totalEmails % 20)) : 0;\n\n    return {\n      totalClients,\n      weeklySessions,\n      achievedGoals,\n      responseRate,\n    };\n  }\n\n  // Emails (Raw Gmail Data - Filtered Business Emails)\n  async getEmailsByUserId(userId: string, limit: number = 100): Promise<Email[]> {\n    return await db\n      .select()\n      .from(emails)\n      .where(eq(emails.userId, userId))\n      .orderBy(desc(emails.timestamp))\n      .limit(limit);\n  }\n\n  async getEmailsByContactId(contactId: string): Promise<Email[]> {\n    return await db\n      .select()\n      .from(emails)\n      .where(eq(emails.contactId, contactId))\n      .orderBy(desc(emails.timestamp));\n  }\n\n  async getEmailByGmailId(userId: string, gmailMessageId: string): Promise<Email | undefined> {\n    const [email] = await db\n      .select()\n      .from(emails)\n      .where(and(eq(emails.userId, userId), eq(emails.gmailMessageId, gmailMessageId)));\n    return email ?? undefined;\n  }\n\n  async createEmail(insertEmail: InsertEmail): Promise<Email> {\n    const [email] = await db.insert(emails).values(insertEmail).returning();\n    return email;\n  }\n\n  async updateEmail(id: string, updates: Partial<InsertEmail>): Promise<Email> {\n    const [email] = await db\n      .update(emails)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(emails.id, id))\n      .returning();\n    return email;\n  }\n\n  async getUnprocessedEmails(userId: string): Promise<Email[]> {\n    return await db\n      .select()\n      .from(emails)\n      .where(and(eq(emails.userId, userId), eq(emails.processed, false)))\n      .orderBy(desc(emails.timestamp));\n  }\n\n  async markEmailProcessed(id: string, extractedData: any): Promise<Email> {\n    const [email] = await db\n      .update(emails)\n      .set({\n        processed: true,\n        extractedData,\n        updatedAt: new Date(),\n      })\n      .where(eq(emails.id, id))\n      .returning();\n    return email;\n  }\n\n  // Calendar Events (Raw Google Data)\n  async getCalendarEventsByUserId(userId: string, limit: number = 100): Promise<CalendarEvent[]> {\n    return await db\n      .select()\n      .from(calendarEvents)\n      .where(eq(calendarEvents.userId, userId))\n      .orderBy(desc(calendarEvents.startTime))\n      .limit(limit);\n  }\n\n  async getCalendarEventsByContactId(contactId: string): Promise<CalendarEvent[]> {\n    return await db\n      .select()\n      .from(calendarEvents)\n      .where(eq(calendarEvents.contactId, contactId))\n      .orderBy(desc(calendarEvents.startTime));\n  }\n\n  async getCalendarEventByGoogleId(\n    userId: string,\n    googleEventId: string\n  ): Promise<CalendarEvent | undefined> {\n    const [event] = await db\n      .select()\n      .from(calendarEvents)\n      .where(\n        and(eq(calendarEvents.userId, userId), eq(calendarEvents.googleEventId, googleEventId))\n      );\n    return event ?? undefined;\n  }\n\n  async createCalendarEvent(insertEvent: InsertCalendarEvent): Promise<CalendarEvent> {\n    const [event] = await db.insert(calendarEvents).values(insertEvent).returning();\n    return event;\n  }\n\n  async updateCalendarEvent(\n    id: string,\n    updates: Partial<InsertCalendarEvent>\n  ): Promise<CalendarEvent> {\n    const [event] = await db\n      .update(calendarEvents)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(calendarEvents.id, id))\n      .returning();\n    return event;\n  }\n\n  async getUnprocessedCalendarEvents(userId: string): Promise<CalendarEvent[]> {\n    return await db\n      .select()\n      .from(calendarEvents)\n      .where(and(eq(calendarEvents.userId, userId), eq(calendarEvents.processed, false)))\n      .orderBy(desc(calendarEvents.startTime));\n  }\n\n  async markCalendarEventProcessed(id: string, extractedData: any): Promise<CalendarEvent> {\n    const [event] = await db\n      .update(calendarEvents)\n      .set({\n        processed: true,\n        extractedData,\n        updatedAt: new Date(),\n      })\n      .where(eq(calendarEvents.id, id))\n      .returning();\n    return event;\n  }\n\n  // Contact Photos\n  async createContactPhoto(insertPhoto: InsertContactPhoto): Promise<ContactPhoto> {\n    const [photo] = await db.insert(contactPhotos).values(insertPhoto).returning();\n    return photo;\n  }\n\n  async getContactPhotos(contactId: string): Promise<ContactPhoto[]> {\n    return await db\n      .select()\n      .from(contactPhotos)\n      .where(eq(contactPhotos.contactId, contactId))\n      .orderBy(desc(contactPhotos.createdAt));\n  }\n\n  async deleteContactPhoto(id: string): Promise<boolean> {\n    try {\n      await db.delete(contactPhotos).where(eq(contactPhotos.id, id));\n      return true;\n    } catch (error) {\n      console.error('Error deleting contact photo:', error);\n      return false;\n    }\n  }\n\n  // Tag methods\n  async getAllTags(): Promise<Tag[]> {\n    return await db.select().from(tags).orderBy(tags.name);\n  }\n\n  async createTag(tag: InsertTag): Promise<Tag> {\n    const [newTag] = await db.insert(tags).values(tag).returning();\n    return newTag;\n  }\n\n  async addTagToContact(contactId: string, tagId: string): Promise<ContactTag> {\n    const [contactTag] = await db.insert(contactTags).values({ contactId, tagId }).returning();\n    return contactTag;\n  }\n\n  async removeTagFromContact(contactId: string, tagId: string): Promise<boolean> {\n    try {\n      await db\n        .delete(contactTags)\n        .where(and(eq(contactTags.contactId, contactId), eq(contactTags.tagId, tagId)));\n      return true;\n    } catch (error) {\n      console.error('Error removing tag from contact:', error);\n      return false;\n    }\n  }\n\n  async addTagToContacts(contactIds: string[], tagId: string): Promise<ContactTag[]> {\n    const contactTagInserts = contactIds.map((contactId) => ({\n      contactId,\n      tagId,\n    }));\n    return await db.insert(contactTags).values(contactTagInserts).returning();\n  }\n\n  async removeTagFromContacts(contactIds: string[], tagId: string): Promise<boolean> {\n    try {\n      await db\n        .delete(contactTags)\n        .where(\n          and(sql`${contactTags.contactId} = ANY(${contactIds})`, eq(contactTags.tagId, tagId))\n        );\n      return true;\n    } catch (error) {\n      console.error('Error removing tag from contacts:', error);\n      return false;\n    }\n  }\n\n  // Processed Events methods\n  async getEventHash(event: CalendarEvent): Promise<string> {\n    const hashData = {\n      summary: event.summary,\n      description: event.description,\n      startTime: event.startTime,\n      endTime: event.endTime,\n      attendees: event.attendees,\n      location: event.location,\n    };\n\n    return crypto.createHash('sha256').update(JSON.stringify(hashData)).digest('hex');\n  }\n\n  async shouldProcessEvent(eventId: string): Promise<boolean> {\n    const existingRecord = await this.getProcessedEvent(eventId);\n\n    if (!existingRecord) return true;\n\n    // Get the current event data\n    const [currentEvent] = await db\n      .select()\n      .from(calendarEvents)\n      .where(eq(calendarEvents.id, eventId));\n\n    if (!currentEvent) return false;\n\n    // Check if event has changed by comparing hashes\n    const currentHash = await this.getEventHash(currentEvent);\n    return existingRecord.eventHash !== currentHash;\n  }\n\n  async markEventProcessed(\n    eventId: string,\n    eventHash: string,\n    isRelevant: boolean,\n    analysis?: any,\n    llmModel?: string\n  ): Promise<ProcessedEvent> {\n    const processedEventData: InsertProcessedEvent = {\n      eventId,\n      eventHash,\n      processedAt: new Date(),\n      lastModified: new Date(),\n      isRelevant,\n      analysis,\n      llmModel,\n    };\n\n    // Use upsert pattern - try to insert, if conflict then update\n    const [processedEvent] = await db\n      .insert(processedEvents)\n      .values(processedEventData)\n      .onConflictDoUpdate({\n        target: processedEvents.eventId,\n        set: {\n          eventHash,\n          processedAt: new Date(),\n          lastModified: new Date(),\n          isRelevant,\n          analysis,\n          llmModel,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n\n    return processedEvent;\n  }\n\n  async getProcessedEvent(eventId: string): Promise<ProcessedEvent | undefined> {\n    const [processedEvent] = await db\n      .select()\n      .from(processedEvents)\n      .where(eq(processedEvents.eventId, eventId));\n    return processedEvent ?? undefined;\n  }\n\n  // Task Management Implementation\n  // Projects\n  async getProjectsByUserId(userId: string): Promise<Project[]> {\n    return await db\n      .select()\n      .from(projects)\n      .where(and(eq(projects.userId, userId), eq(projects.isArchived, false)))\n      .orderBy(desc(projects.createdAt));\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    const [project] = await db.select().from(projects).where(eq(projects.id, id));\n    return project ?? undefined;\n  }\n\n  async createProject(project: InsertProject): Promise<Project> {\n    const [newProject] = await db.insert(projects).values(project).returning();\n    return newProject;\n  }\n\n  async updateProject(id: string, updates: Partial<InsertProject>): Promise<Project> {\n    const [project] = await db\n      .update(projects)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(projects.id, id))\n      .returning();\n    return project;\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    try {\n      await db.update(projects).set({ isArchived: true }).where(eq(projects.id, id));\n      return true;\n    } catch (error) {\n      console.error('Error deleting project:', error);\n      return false;\n    }\n  }\n\n  // Tasks\n  async getTasksByUserId(userId: string, statuses?: string[]): Promise<Task[]> {\n    let whereConditions = [eq(tasks.userId, userId)];\n\n    if (statuses && statuses.length > 0) {\n      whereConditions.push(sql`${tasks.status} = ANY(${statuses})`);\n    }\n\n    const result: Task[] = await db\n      .select()\n      .from(tasks)\n      .where(and(...whereConditions))\n      .orderBy(desc(tasks.createdAt));\n    return result;\n  }\n\n  async getTasksByProjectId(projectId: string): Promise<Task[]> {\n    return await db\n      .select()\n      .from(tasks)\n      .where(eq(tasks.projectId, projectId))\n      .orderBy(tasks.orderIndex, desc(tasks.createdAt));\n  }\n\n  async getTasksByStatus(\n    status: 'pending' | 'in_progress' | 'completed' | 'cancelled' | 'waiting_approval',\n    owner?: 'user' | 'ai_assistant'\n  ): Promise<Task[]> {\n    let whereConditions = [eq(tasks.status, status)];\n\n    if (owner) {\n      whereConditions.push(eq(tasks.owner, owner));\n    }\n\n    return await db\n      .select()\n      .from(tasks)\n      .where(and(...whereConditions))\n      .orderBy(desc(tasks.createdAt));\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    const [task] = await db.select().from(tasks).where(eq(tasks.id, id));\n    return task ?? undefined;\n  }\n\n  async createTask(task: InsertTask): Promise<Task> {\n    const [newTask] = await db.insert(tasks).values(task).returning();\n    return newTask;\n  }\n\n  async updateTask(id: string, updates: Partial<InsertTask>): Promise<Task> {\n    const [task] = await db\n      .update(tasks)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(tasks.id, id))\n      .returning();\n    return task;\n  }\n\n  async deleteTask(id: string): Promise<boolean> {\n    try {\n      await db.delete(tasks).where(eq(tasks.id, id));\n      return true;\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      return false;\n    }\n  }\n\n  async getSubtasks(parentTaskId: string): Promise<Task[]> {\n    return await db\n      .select()\n      .from(tasks)\n      .where(eq(tasks.parentTaskId, parentTaskId))\n      .orderBy(tasks.orderIndex, desc(tasks.createdAt));\n  }\n\n  // Task Activities\n  async getTaskActivities(taskId: string): Promise<TaskActivity[]> {\n    return await db\n      .select()\n      .from(taskActivities)\n      .where(eq(taskActivities.taskId, taskId))\n      .orderBy(desc(taskActivities.createdAt));\n  }\n\n  async createTaskActivity(activity: InsertTaskActivity): Promise<TaskActivity> {\n    const [newActivity] = await db.insert(taskActivities).values(activity).returning();\n    return newActivity;\n  }\n\n  // AI Suggestions\n  async getAiSuggestionsByUserId(userId: string, status?: string): Promise<AiSuggestion[]> {\n    let whereConditions = [eq(aiSuggestions.userId, userId)];\n\n    if (status) {\n      whereConditions.push(eq(aiSuggestions.status, status));\n    }\n\n    return await db\n      .select()\n      .from(aiSuggestions)\n      .where(and(...whereConditions))\n      .orderBy(desc(aiSuggestions.createdAt));\n  }\n\n  async getAiSuggestion(id: string): Promise<AiSuggestion | undefined> {\n    const [suggestion] = await db.select().from(aiSuggestions).where(eq(aiSuggestions.id, id));\n    return suggestion ?? undefined;\n  }\n\n  async createAiSuggestion(suggestion: InsertAiSuggestion): Promise<AiSuggestion> {\n    const [newSuggestion] = await db.insert(aiSuggestions).values(suggestion).returning();\n    return newSuggestion;\n  }\n\n  async updateAiSuggestion(\n    id: string,\n    updates: Partial<InsertAiSuggestion>\n  ): Promise<AiSuggestion> {\n    const [suggestion] = await db\n      .update(aiSuggestions)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(aiSuggestions.id, id))\n      .returning();\n    return suggestion;\n  }\n\n  async cleanupOldSuggestions(olderThan: Date): Promise<boolean> {\n    try {\n      await db\n        .delete(aiSuggestions)\n        .where(\n          and(\n            lte(aiSuggestions.createdAt, olderThan),\n            sql`${aiSuggestions.status} IN ('executed', 'rejected')`\n          )\n        );\n      return true;\n    } catch (error) {\n      console.error('Error cleaning up old suggestions:', error);\n      return false;\n    }\n  }\n\n  // Data Processing Jobs\n  async getDataProcessingJobsByUserId(userId: string): Promise<DataProcessingJob[]> {\n    return await db\n      .select()\n      .from(dataProcessingJobs)\n      .where(eq(dataProcessingJobs.userId, userId))\n      .orderBy(desc(dataProcessingJobs.createdAt));\n  }\n\n  async getFailedDataProcessingJobs(userId: string): Promise<DataProcessingJob[]> {\n    return await db\n      .select()\n      .from(dataProcessingJobs)\n      .where(and(eq(dataProcessingJobs.userId, userId), eq(dataProcessingJobs.status, 'failed')))\n      .orderBy(desc(dataProcessingJobs.createdAt));\n  }\n\n  async createDataProcessingJob(job: InsertDataProcessingJob): Promise<DataProcessingJob> {\n    const [newJob] = await db.insert(dataProcessingJobs).values(job).returning();\n    return newJob;\n  }\n\n  async updateDataProcessingJob(\n    id: string,\n    updates: Partial<InsertDataProcessingJob>\n  ): Promise<DataProcessingJob> {\n    const [job] = await db\n      .update(dataProcessingJobs)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(dataProcessingJobs.id, id))\n      .returning();\n    return job;\n  }\n\n  async cleanupOldDataProcessingJobs(olderThan: Date): Promise<boolean> {\n    try {\n      await db\n        .delete(dataProcessingJobs)\n        .where(\n          and(\n            lte(dataProcessingJobs.createdAt, olderThan),\n            sql`${dataProcessingJobs.status} IN ('completed', 'failed')`\n          )\n        );\n      return true;\n    } catch (error) {\n      console.error('Error cleaning up old data processing jobs:', error);\n      return false;\n    }\n  }\n\n  // Helper methods for scheduler\n  async getActiveUsers(\n    daysSinceLastActivity: number\n  ): Promise<Array<{ id: string; email: string }>> {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysSinceLastActivity);\n\n    return await db\n      .select({ id: users.id, email: users.email })\n      .from(users)\n      .where(gte(users.updatedAt, cutoffDate));\n  }\n\n  async getRecentEmails(userId: string, daysBack: number): Promise<Email[]> {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - daysBack);\n\n    return await db\n      .select()\n      .from(emails)\n      .where(and(eq(emails.userId, userId), gte(emails.timestamp, cutoffDate)))\n      .orderBy(desc(emails.timestamp));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/test-llm-integration.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":15,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":15,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":78,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":78,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2997,3000],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2997,3000],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .eventType on an `any` value.","line":79,"column":55,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":64},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":79,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":79,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3066,3068],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .confidence on an `any` value.","line":79,"column":99,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":79,"endColumn":109},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":2,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":79,"column":110,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":79,"endColumn":112,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3111,3113],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4134,4137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4134,4137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4157,4160],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4157,4160],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .email on an `any` value.","line":104,"column":20,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":25}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n\nimport dotenv from 'dotenv';\ndotenv.config();\n\nimport { seedTestData } from './seed-test-data';\nimport { llmProcessor } from './services/llm-processor';\nimport { openRouterService } from './services/openrouter';\nimport { geminiService } from './services/gemini';\nimport { mistralService } from './services/mistral';\nimport { db } from './db';\nimport { users, calendarEvents, contacts } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\n\nasync function testLLMIntegration() {\n  console.log('🧪 Starting LLM Integration Test...');\n  console.log('=' .repeat(50));\n\n  try {\n    // Step 1: Seed test data\n    console.log('\\n📊 Step 1: Seeding test data...');\n    await seedTestData();\n    \n    // Step 2: Get test user and verify data\n    console.log('\\n🔍 Step 2: Verifying seeded data...');\n    const testUser = await db.query.users.findFirst({\n      where: eq(users.email, 'wellness.coach@example.com'),\n    });\n    \n    if (!testUser) {\n      throw new Error('Test user not found after seeding');\n    }\n    \n    const userContacts = await db.query.contacts.findMany({\n      where: eq(contacts.userId, testUser.id),\n    });\n    \n    const unprocessedEvents = await db.query.calendarEvents.findMany({\n      where: eq(calendarEvents.userId, testUser.id),\n    });\n    \n    console.log(`✅ Found ${userContacts.length} contacts`);\n    console.log(`✅ Found ${unprocessedEvents.length} calendar events to process`);\n    \n    // Step 3: Test Mistral sentiment analysis\n    console.log('\\n💭 Step 3: Testing Mistral sentiment analysis...');\n    const testTexts = [\n      \"Thank you for today's session! The breathing exercises really helped during my presentation.\",\n      \"I'm really struggling lately. Work is overwhelming and I'm having trouble sleeping.\",\n      \"Can we reschedule our appointment for next Tuesday at 2pm?\",\n      \"Amazing breakthrough! I stayed completely calm during a difficult conversation.\",\n      \"I'm not sure if I'm ready to commit to the full program yet.\"\n    ];\n    \n    for (const [index, text] of testTexts.entries()) {\n      try {\n        const sentiment = await mistralService.analyzeSentiment(text);\n        console.log(`   Text ${index + 1}: Rating ${sentiment.rating}/5 (confidence: ${sentiment.confidence.toFixed(2)})`);\n      } catch (error) {\n        console.error(`   ❌ Error analyzing text ${index + 1}:`, error);\n      }\n    }\n    \n    // Step 4: Test calendar event processing\n    console.log('\\n📅 Step 4: Testing calendar event processing...');\n    await llmProcessor.processCalendarEvents(testUser);\n    \n    // Step 5: Verify processed events\n    console.log('\\n✅ Step 5: Checking processed events...');\n    const processedEvents = await db.query.calendarEvents.findMany({\n      where: eq(calendarEvents.userId, testUser.id),\n    });\n    \n    let processedCount = 0;\n    for (const event of processedEvents) {\n      if (event.processed && event.extractedData) {\n        processedCount++;\n        const data = event.extractedData as any;\n        console.log(`   📌 \"${event.summary}\": ${data.eventType || 'unknown'} (confidence: ${data.confidence || 'N/A'})`);\n      }\n    }\n    \n    console.log(`\\n✅ Successfully processed ${processedCount}/${processedEvents.length} events`);\n    \n    // Step 6: Test Gemini chat response\n    console.log('\\n🤖 Step 6: Testing Gemini chat response...');\n    try {\n      const chatResponse = await geminiService.generateChatResponse(\n        'What insights can you provide about a client who has missed two appointments and mentioned being overwhelmed?',\n        { contactCount: userContacts.length, eventCount: processedEvents.length }\n      );\n      console.log('   Gemini Response:', chatResponse.substring(0, 200) + '...');\n    } catch (error) {\n      console.error('   ❌ Error testing Gemini:', error);\n    }\n    \n    // Step 7: Test contact insights generation\n    console.log('\\n📈 Step 7: Testing contact insights generation...');\n    if (userContacts.length > 0) {\n      const sampleContact = userContacts[0];\n      const contactEvents = processedEvents.filter(event => \n        event.attendees && \n        (event.attendees as any[]).some((attendee: any) => \n          attendee.email === sampleContact.email\n        )\n      );\n      \n      const contactData = {\n        contact: sampleContact,\n        recentEvents: contactEvents.slice(0, 3),\n        totalInteractions: 5, // Mock data\n        lastInteractionDate: new Date(),\n      };\n      \n      try {\n        const insights = await openRouterService.generateInsights(contactData);\n        console.log('   📊 Generated insights:');\n        console.log(`      Summary: ${insights.summary}`);\n        console.log(`      Next Steps: ${insights.nextSteps.length} items`);\n        console.log(`      Risk Factors: ${insights.riskFactors.length} items`);\n      } catch (error) {\n        console.error('   ❌ Error generating insights:', error);\n      }\n    }\n    \n    console.log('\\n' + '='.repeat(50));\n    console.log('🎉 LLM Integration Test Complete!');\n    console.log('\\n📋 Test Results Summary:');\n    console.log(`   ✅ Mistral API: Working`);\n    console.log(`   ✅ OpenRouter API: Working`);\n    console.log(`   ✅ Gemini API: Working`);\n    console.log(`   ✅ Calendar Processing: ${processedCount}/${processedEvents.length} events processed`);\n    console.log(`   ✅ Data Seeding: ${userContacts.length} contacts, ${processedEvents.length} events`);\n    \n    console.log('\\n🚀 Your LLM integration is ready!');\n    console.log('\\nNext steps:');\n    console.log('1. Start your development server: npm run dev');\n    console.log('2. Open http://localhost:5173 to see the frontend');\n    console.log('3. Check the contacts and dashboard for LLM-processed insights');\n    \n  } catch (error) {\n    console.error('\\n❌ LLM Integration Test Failed:', error);\n    process.exit(1);\n  }\n}\n\n// Run the test - Check if this file is being run directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  testLLMIntegration()\n    .then(() => {\n      console.log('\\n✨ Test completed successfully!');\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error('💥 Test failed:', error);\n      process.exit(1);\n    });\n}\n\nexport { testLLMIntegration };\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/test-single-llm.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":11,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":11,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":15,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":15,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env tsx\n\nimport dotenv from 'dotenv';\ndotenv.config();\n\nimport { openRouterService } from './services/openrouter';\nimport { geminiService } from './services/gemini';\nimport { mistralService } from './services/mistral';\n\n\nasync function delay(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function testSingleLLMFunction() {\n  console.log('🧪 Testing Individual LLM Functions...');\n  console.log('='.repeat(50));\n\n  try {\n    // Test 1: Mistral Sentiment Analysis\n    console.log('\\n💭 Test 1: Mistral Sentiment Analysis');\n    console.log('-'.repeat(30));\n    \n    const testText = \"Thank you for today's session! The breathing exercises really helped during my presentation.\";\n    console.log(`Testing: \"${testText}\"`);\n    \n    try {\n      const sentiment = await mistralService.analyzeSentiment(testText);\n      console.log(`✅ Result: Rating ${sentiment.rating}/5, Confidence: ${sentiment.confidence}`);\n    } catch (error) {\n      console.error(`❌ Error:`, error instanceof Error ? error.message : error);\n    }\n\n    // Wait to avoid rate limiting\n    console.log('\\n⏱️  Waiting 15 seconds to avoid rate limits...');\n    await delay(15000);\n\n    // Test 2: Gemini Chat Response\n    console.log('\\n🤖 Test 2: Gemini Chat Response');\n    console.log('-'.repeat(30));\n    \n    const chatMessage = \"What should I do if a client missed their appointment?\";\n    console.log(`Testing: \"${chatMessage}\"`);\n    \n    try {\n      const chatResponse = await geminiService.generateChatResponse(chatMessage);\n      console.log(`✅ Response (first 200 chars): ${chatResponse.substring(0, 200)}...`);\n    } catch (error) {\n      console.error(`❌ Error:`, error instanceof Error ? error.message : error);\n    }\n\n    // Test 3: Simple Insights Generation\n    console.log('\\n📈 Test 4: Contact Insights Generation');\n    console.log('-'.repeat(30));\n    \n    const mockContactData = {\n      name: \"Emma Rodriguez\",\n      email: \"emma.rodriguez@email.com\",\n      sentiment: 4,\n      lastContact: new Date('2025-01-30T10:00:00Z'),\n      recentInteractions: [\n        {\n          type: \"email\",\n          content: \"Thank you for today's session! The breathing exercises really helped.\",\n          timestamp: new Date('2025-01-30T15:30:00Z'),\n          sentiment: 5\n        }\n      ]\n    };\n\n    console.log('Testing with mock contact data...');\n    \n    try {\n      await delay(15000); // Wait again to avoid rate limits\n      const insights = await openRouterService.generateInsights(mockContactData);\n      console.log(`✅ Generated insights:`);\n      console.log(`   Summary: ${insights.summary}`);\n      console.log(`   Next Steps: ${insights.nextSteps.length} items`);\n      console.log(`   Risk Factors: ${insights.riskFactors.length} items`);\n    } catch (error) {\n      console.error(`❌ Insights Error:`, error instanceof Error ? error.message : error);\n    }\n\n    console.log('\\n' + '='.repeat(50));\n    console.log('🎉 Individual LLM Function Tests Complete!');\n\n  } catch (error) {\n    console.error('❌ Test suite failed:', error);\n    process.exit(1);\n  }\n}\n\n// Check if this file is being run directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  testSingleLLMFunction()\n    .then(() => {\n      console.log('✨ Single LLM tests completed successfully!');\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error('💥 Tests failed:', error);\n      process.exit(1);\n    });\n}\n\nexport { testSingleLLMFunction };\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/types/llm-types.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used.","line":146,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":146,"endColumn":44,"suggestions":[{"messageId":"removeVar","data":{"varName":"event"},"fix":{"range":[3137,3158],"text":""},"desc":"Remove unused variable 'event'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":147,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":147,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"userId"},"fix":{"range":[3191,3205],"text":""},"desc":"Remove unused variable 'userId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is defined but never used.","line":185,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":185,"endColumn":64,"suggestions":[{"messageId":"removeVar","data":{"varName":"user"},"fix":{"range":[4112,4139],"text":""},"desc":"Remove unused variable 'user'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ProcessingContext {\n  userId: string;\n  model?: string;\n  temperature?: number;\n  maxTokens?: number;\n}\n\nexport interface AnalysisResult<T = unknown> {\n  success: boolean;\n  data: T;\n  error?: string;\n  metadata?: {\n    model?: string;\n    tokens?: number;\n    processingTime?: number;\n  };\n}\n\nexport interface AttendeeData {\n  name: string;\n  email?: string;\n  status?: string;\n}\n\nexport interface AttendanceRecord {\n  attendees: AttendeeData[];\n  className?: string;\n  date?: string;\n  instructor?: string;\n}\n\nexport interface ContactSegment {\n  segment: string;\n  contacts: string[];\n  approach: string;\n}\n\nexport interface TaskStrategy {\n  strategy: string;\n  contactSegments: ContactSegment[];\n  recommendations: string[];\n  estimatedTime: string;\n}\n\nexport interface InteractionData {\n  contactId: string;\n  type: string;\n  content: string;\n  timestamp: Date;\n  sentiment?: number | null;\n  subject?: string | null;\n  source?: string | null;\n  sourceId?: string | null;\n}\n\n// Calendar Event Processing Types\nexport interface CalendarEventRaw {\n  id: string;\n  summary?: string;\n  description?: string;\n  start?: {\n    dateTime?: string;\n    date?: string;\n  };\n  end?: {\n    dateTime?: string;\n    date?: string;\n  };\n  attendees?: AttendeeData[];\n  creator?: {\n    email?: string;\n    displayName?: string;\n  };\n  organizer?: {\n    email?: string;\n    displayName?: string;\n  };\n  status?: string;\n  updated?: string;\n  updatedAt?: Date;\n  startTime?: Date;\n  endTime?: Date;\n  location?: string;\n  meetingType?: string;\n  rawData?: Record<string, unknown>;\n}\n\nexport interface ProcessedEvent {\n  eventId: string;\n  processedAt: Date;\n  originalSummary?: string;\n  originalDescription?: string;\n  originalAttendees?: AttendeeData[];\n  updatedAt?: Date;\n  analysis: CalendarEventAnalysis;\n}\n\nexport interface CalendarEventAnalysis {\n  isRelevant: boolean;\n  relevanceReason: string;\n  eventType: 'client_session' | 'consultation' | 'group_session' | 'admin' | 'training' | 'personal' | 'spam' | 'unknown';\n  isClientRelated: boolean;\n  clientEmails: string[];\n  sessionType: 'therapy' | 'coaching' | 'wellness' | 'consultation' | 'group' | 'other' | null;\n  keyTopics: string[];\n  actionItems: string[];\n  notes: string;\n  confidence: number;\n  suggestedAction: 'process' | 'ignore' | 'review';\n  // Additional metadata properties\n  processedAt?: string;\n  llmModel?: string;\n  eventId?: string;\n  skipped?: boolean;\n}\n\n// User types for authentication\nexport interface UserAuthData {\n  id: string;\n  googleId: string;\n  email: string;\n  name: string;\n  picture?: string;\n  accessToken: string;\n  refreshToken: string;\n}\n\nexport interface LLMProcessor {\n  processPrompt(): Promise<string>;\n  processPrompt(): Promise<string>;\n  processCalendarEvents(): Promise<void>;\n  processWithKimi(): Promise<string>;\n  processAllUsers(): Promise<void>;\n}\n\nexport interface ErrorContext {\n  operation: string;\n  userId?: string;\n  taskId?: string;\n  timestamp: Date;\n}\n\n// Storage interface for dependency injection\nexport interface StorageInterface {\n  getProcessedEvents?(): Promise<ProcessedEvent[]>;\n  saveProcessedEvent?(event: ProcessedEvent): Promise<void>;\n  getContacts?(userId: string): Promise<ContactData[]>;\n  shouldProcessEvent?(): Promise<boolean>;\n  getEventHash?(): Promise<string>;\n  markEventProcessed?(): Promise<void>;\n  // Add other storage methods as needed\n}\n\n// Contact data interface\nexport interface ContactData {\n  id: string;\n  name: string;\n  email: string;\n  phone?: string;\n  avatarUrl?: string;\n  status?: string;\n  lifecycleStage?: string;\n  // Add other contact fields as needed\n}\n\n// Email filter interfaces\nexport interface EmailFilterConfig {\n  maxEmails: number;\n  daysBack: number;\n  businessHoursOnly: boolean;\n  excludePromotions: boolean;\n  excludeSocial: boolean;\n}\n\n// Google Auth profile interface\nexport interface GoogleAuthProfile {\n  id: string;\n  displayName: string;\n  emails: Array<{ value: string; verified?: boolean }>;\n  photos?: Array<{ value: string }>;\n  provider: string;\n}\n\n// Passport done callback type\nexport type PassportDoneCallback = (user?: UserAuthData | false) => void;\n\n// General purpose object type for legacy any usage\nexport type UnknownObject = Record<string, unknown>;\n\n// Task AI specific types\nexport interface AttendanceAnalysis {\n  attendeeCount: number;\n  matchedContacts: number;\n  unmatchedAttendees: string[];\n  analysis: string;\n}\n\nexport interface TaskAnalysis {\n  strategy: string;\n  contactSegments: ContactSegment[];\n  recommendations: string[];\n  estimatedTime: string;\n  personalizedApproaches?: Record<string, string>;\n}\n\nexport interface BulkAction {\n  type: 'bulk_timeline_update' | 'bulk_photo_update' | 'bulk_contact_update';\n  contactIds: string[];\n  eventData?: {\n    className: string;\n    date: string;\n    [key: string]: unknown;\n  };\n  updates?: Array<{\n    contactId: string;\n    photoUrl: string;\n    source: string;\n    [key: string]: unknown;\n  }>;\n  data?: UnknownObject;\n  metadata?: UnknownObject;\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/server/vite.ts","messages":[{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":11,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":11,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":22,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":22,"endColumn":32},{"ruleId":"@typescript-eslint/explicit-function-return-type","severity":1,"message":"Missing return type on function.","line":70,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":70,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/MindfulCRM/shared/schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]